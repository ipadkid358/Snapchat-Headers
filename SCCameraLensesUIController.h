/*
* This header is generated by classdump-dyld 1.0
* on Saturday, May 19, 2018 at 4:52:38 PM Eastern Daylight Time
* Operating System: Version 10.2 (Build 14C92)
* Image Source: /var/containers/Bundle/Application/7AB1B6B1-534C-4BF9-A7EB-BE2BD4C13043/Snapchat.app/Snapchat
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <Snapchat/Snapchat-Structs.h>
#import <Snapchat/SCBaseLensesUIController.h>
#import <UIKit/UIGestureRecognizerDelegate.h>
#import <Snapchat/SCLensFeedUIController.h>

@protocol SCLensCarouselPresenterProtocol, SCCameraOverlayDelegate, SCFeatureMemories;
@class SCArcadiaUIController, SCLensFeedUIController, SCLensCoreAnalyticsListener, SCLensUnlockedFilterImageHelper, SCOnDemandLensSubPickerController, UITapGestureRecognizer, SCGrowingButton, NSString, UIView, SCLensAnalyticsDataManger, SCLensInfoController, UIButton, SCPreviewTooltipBalloon;

@interface SCCameraLensesUIController : SCBaseLensesUIController <UIGestureRecognizerDelegate, SCLensFeedUIController> {

	SCArcadiaUIController* _arcadiaUIController;
	SCLensFeedUIController* _lensFeedUIController;
	SCLensCoreAnalyticsListener* _coreAnalyticsListener;
	SCLensUnlockedFilterImageHelper* _unlockedFilterImageHelper;
	SCOnDemandLensSubPickerController* _onDemandLensSubPickerController;
	UITapGestureRecognizer* _snappablesPlayButtonGestureRecognizer;
	SCGrowingButton* _exitFullScreenButton;
	BOOL _allInterfaceElementsHidden;
	NSString* _loadingSnappableLensId;
	NSString* _scrolledFromSnappableLensId;
	UIView* _lensControlsContainer;
	id<SCLensCarouselPresenterProtocol> _currentCarouselPresenter;
	id<SCCameraOverlayDelegate> _cameraViewDelegate;
	id<SCFeatureMemories> _memories;
	SCGrowingButton* _infoButton;
	SCLensAnalyticsDataManger* _lensAnalyticsDataManager;
	SCLensInfoController* _lensInfoController;
	UIButton* _ctaButton;
	SCGrowingButton* _lensesOpenCloseButton;
	SCGrowingButton* _lensPinButton;
	SCPreviewTooltipBalloon* _lensPinTooltip;

}

@property (assign,nonatomic,__weak) id<SCCameraOverlayDelegate> cameraViewDelegate;                      //@synthesize cameraViewDelegate=_cameraViewDelegate - In the implementation block
@property (assign,nonatomic,__weak) UIView * parentView; 
@property (assign,nonatomic,__weak) id<SCFeatureMemories> memories;                                      //@synthesize memories=_memories - In the implementation block
@property (nonatomic,retain) SCGrowingButton * infoButton;                                               //@synthesize infoButton=_infoButton - In the implementation block
@property (nonatomic,retain) SCLensAnalyticsDataManger * lensAnalyticsDataManager;                       //@synthesize lensAnalyticsDataManager=_lensAnalyticsDataManager - In the implementation block
@property (nonatomic,retain) SCLensInfoController * lensInfoController;                                  //@synthesize lensInfoController=_lensInfoController - In the implementation block
@property (nonatomic,readonly) id<SCLensCameraScreenDataProviderProtocol> lensDataProvider; 
@property (nonatomic,retain) id<SCLensCarouselPresenterProtocol> currentCarouselPresenter;               //@synthesize currentCarouselPresenter=_currentCarouselPresenter - In the implementation block
@property (nonatomic,retain) UIButton * ctaButton;                                                       //@synthesize ctaButton=_ctaButton - In the implementation block
@property (nonatomic,retain) SCGrowingButton * lensesOpenCloseButton;                                    //@synthesize lensesOpenCloseButton=_lensesOpenCloseButton - In the implementation block
@property (nonatomic,retain) SCGrowingButton * lensPinButton;                                            //@synthesize lensPinButton=_lensPinButton - In the implementation block
@property (nonatomic,retain) SCPreviewTooltipBalloon * lensPinTooltip;                                   //@synthesize lensPinTooltip=_lensPinTooltip - In the implementation block
@property (nonatomic,readonly) BOOL allInterfaceElementsHidden;                                          //@synthesize allInterfaceElementsHidden=_allInterfaceElementsHidden - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
-(void)effectComponent:(id)arg1 willTurnOnEffectWithId:(id)arg2 ;
-(void)effectComponent:(id)arg1 didTurnOnEffectWithId:(id)arg2 features:(unsigned long long)arg3 ;
-(void)effectComponent:(id)arg1 didTurnOffEffectWithId:(id)arg2 features:(unsigned long long)arg3 ;
-(void)effectComponent:(id)arg1 effectId:(id)arg2 performInterfaceAction:(unsigned long long)arg3 interfaceElement:(unsigned long long)arg4 interfaceData:(id)arg5 ;
-(id)pageViewName;
-(BOOL)pointInsideLensLogoPickerUI:(CGPoint)arg1 ;
-(BOOL)pointInsideAnyLensView:(CGPoint)arg1 ;
-(BOOL)pointInsideLensInfoButton:(CGPoint)arg1 ;
-(BOOL)blockTouchesForCurrentLensWithNormalizedTouchPoints:(id)arg1 touchTypeMask:(unsigned long long)arg2 ;
-(BOOL)disallowSnapRecording;
-(void)setCarouselHidden:(BOOL)arg1 ;
-(BOOL)allInterfaceElementsHidden;
-(void)setLensesActive:(BOOL)arg1 appearanceConfiguration:(id)arg2 activationState:(id)arg3 completion:(/*^block*/id)arg4 ;
-(id)pendingDeeplinkBitmojiLensId;
-(void)exitFullScreenMode;
-(id)activeLensIcon;
-(BOOL)pointInsideAnyLensViewButton:(CGPoint)arg1 ;
-(id)initWithParentViewContainer:(id)arg1 hidableViewContainer:(id)arg2 cameraViewDelegate:(id)arg3 memories:(id)arg4 userSession:(id)arg5 lensBitmojiDelegate:(id)arg6 lensUserInterfaceDelegate:(id)arg7 ;
-(void)lensCarouselPresenter:(id)arg1 didSelectLens:(id)arg2 index:(unsigned long long)arg3 originalLensIndex:(unsigned long long)arg4 totalLensesCount:(unsigned long long)arg5 ;
-(void)lensCarouselPresenter:(id)arg1 didScroll:(id)arg2 selectedCellDistance:(double)arg3 selectedLens:(id)arg4 ;
-(void)lensCarouselPresenter:(id)arg1 didEndScrolling:(id)arg2 atLens:(id)arg3 ;
-(UIButton *)ctaButton;
-(void)applyCollectionViewConstraints:(id)arg1 ;
-(BOOL)_pointInsideLensView:(CGPoint)arg1 cellFramesOnly:(BOOL)arg2 ;
-(id<SCLensCarouselPresenterProtocol>)currentCarouselPresenter;
-(void)showLensesUI:(BOOL)arg1 completion:(/*^block*/id)arg2 ;
-(void)hideLensesUI:(BOOL)arg1 completion:(/*^block*/id)arg2 ;
-(void)activateLens:(id)arg1 launchData:(id)arg2 completion:(/*^block*/id)arg3 ;
-(void)showLensesUI:(BOOL)arg1 ;
-(void)hideLensesUI:(BOOL)arg1 ;
-(void)_prepareLensControlsContainer;
-(id)lensFpsLogger;
-(void)_lensCoreHandledAnExceptionNotificationReceived:(id)arg1 ;
-(SCGrowingButton *)lensPinButton;
-(void)lensPinButtonPressed;
-(void)lensesOpenCloseButtonPressed;
-(SCGrowingButton *)lensesOpenCloseButton;
-(void)_hideOnDemandLensSubPickerIfNeededWithCompletion:(/*^block*/id)arg1 ;
-(void)setLensInfoButtonHidden:(BOOL)arg1 ;
-(void)setLensCtaButtonHidden:(BOOL)arg1 ;
-(BOOL)pointInsideLensCtaButton:(CGPoint)arg1 ;
-(void)_removeSnappablesPlayButton;
-(void)hideLensPinTooltipAnimated:(BOOL)arg1 ;
-(void)setLensesOpenCloseButtonVisible:(BOOL)arg1 animated:(BOOL)arg2 ;
-(void)showLensPinTooltip;
-(BOOL)isActiveCommunityLens;
-(id<SCCameraOverlayDelegate>)cameraViewDelegate;
-(void)updateUIElementsVisibilityForLens:(id)arg1 ;
-(void)_presentOnDemandLensSubPicker;
-(SCLensInfoController *)lensInfoController;
-(void)_showLoadingSnappablesPlayButton;
-(void)_hideSnappablesPlayButton;
-(void)_setAllInterfaceElementsHidden:(BOOL)arg1 ;
-(void)_setSnapButtonHidden:(BOOL)arg1 ;
-(void)_removeExitFullScreenButton;
-(void)_snappablesPlayButtonTapped:(id)arg1 ;
-(BOOL)_isSnappablesPlayButtonVisible;
-(void)_addExitFullScreenButton;
-(BOOL)pointInsideOnDemandLensSubPicker:(CGPoint)arg1 ;
-(void)_exitFullScreenButtonTapped:(id)arg1 ;
-(void)_activateSnappablesPlayButton;
-(SCPreviewTooltipBalloon *)lensPinTooltip;
-(void)setCurrentCarouselPresenter:(id<SCLensCarouselPresenterProtocol>)arg1 ;
-(void)infoButtonPressed;
-(void)updateInfoButtonConstraints;
-(void)ctaButtonPressed;
-(id)_ctaTitleForLens:(id)arg1 ;
-(id)_fallbackCtaTitleForLens:(id)arg1 ;
-(void)updateCtaButtonContentAndConstraints;
-(BOOL)_isCurrentLensLoadingInProgress;
-(void)lensFeedUIControllerDidPressLensFeedButton:(id)arg1 ;
-(void)setCameraViewDelegate:(id<SCCameraOverlayDelegate>)arg1 ;
-(void)setMemories:(id<SCFeatureMemories>)arg1 ;
-(SCLensAnalyticsDataManger *)lensAnalyticsDataManager;
-(void)setLensAnalyticsDataManager:(SCLensAnalyticsDataManger *)arg1 ;
-(void)setLensInfoController:(SCLensInfoController *)arg1 ;
-(void)setCtaButton:(UIButton *)arg1 ;
-(void)setLensesOpenCloseButton:(SCGrowingButton *)arg1 ;
-(void)setLensPinButton:(SCGrowingButton *)arg1 ;
-(void)setLensPinTooltip:(SCPreviewTooltipBalloon *)arg1 ;
-(void)dealloc;
-(id)state;
-(BOOL)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2 ;
-(BOOL)gestureRecognizer:(id)arg1 shouldReceiveTouch:(id)arg2 ;
-(void)cleanup;
-(SCGrowingButton *)infoButton;
-(void)setInfoButton:(SCGrowingButton *)arg1 ;
-(id<SCFeatureMemories>)memories;
@end

