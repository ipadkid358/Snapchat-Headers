/*
* This header is generated by classdump-dyld 1.0
* on Saturday, May 19, 2018 at 4:52:38 PM Eastern Daylight Time
* Operating System: Version 10.2 (Build 14C92)
* Image Source: /var/containers/Bundle/Application/7AB1B6B1-534C-4BF9-A7EB-BE2BD4C13043/Snapchat.app/Snapchat
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <Snapchat/Snapchat-Structs.h>
#import <Snapchat/SCTimeProfilable.h>
#import <Snapchat/LSATouchProcessingDelegate.h>
#import <Snapchat/LSATrackingComponentListener.h>
#import <Snapchat/SCLensHintPresenterDelegate.h>
#import <Snapchat/LSAEffectComponentListener.h>
#import <Snapchat/SCLensCarouselPresenterDelegate.h>

@protocol SCLensTestSessionProtocol, SCLensTestSessionFactoryProtocol, SCLensSubPickerControllerProtocol, SCLensProcessingCore, SCLensDataProviderProtocol, UIGestureRecognizerDelegate, SCLensBitmojiDelegate, SCLensUserInterfaceDelegate;
@class SCLensRemoteAssetsDataProvider, SCLensCompassAndLocationProvider, SCLensUriServiceProvider, SCLensTapToActivateLogger, SCLensHintPresenter, SCLensUserInterfaceTooltipPresenter, SCLensCoreAnalyticsLogger, SCLensHintProvider, SCLensUsageTracker, SCLensValidator, SCAlertViewActionButtonController, UICollectionView, UIView, SCLensPresetImageProvider, SCLensPhotoFaceImageProvider, LSATouchProcessingController, SCLensBitmojiAlertUIController, SCLensBitmojiProvider, SCLensUserDataProvider, SCLensGeoDataProvider, NSString, SCLensLayoutProvider, SCLensUIUpdateListenerAnnouncer, SCLensActionController, UITapGestureRecognizer, SCLensCarouselPresenter, SCUserSession, UILabel, SCSponsoredSlugView, SCLoadingIndicatorView, SCLensesUIControllerState;

@interface SCBaseLensesUIController : NSObject <SCTimeProfilable, LSATouchProcessingDelegate, LSATrackingComponentListener, SCLensHintPresenterDelegate, LSAEffectComponentListener, SCLensCarouselPresenterDelegate> {

	SCLensRemoteAssetsDataProvider* _lensRemoteAssetsDataProvider;
	SCLensCompassAndLocationProvider* _compassAndLocationProvider;
	SCLensUriServiceProvider* _uriServiceProvider;
	BOOL _blockCameraTouches;
	SCLensTapToActivateLogger* _tapToActivateLogger;
	SCLensHintPresenter* _hintPresenter;
	SCLensUserInterfaceTooltipPresenter* _userInterfaceTooltipPresenter;
	SCLensCoreAnalyticsLogger* _lensCoreAnalyticsLogger;
	SCLensHintProvider* _hintProvider;
	SCLensUsageTracker* _lensUsageTracker;
	SCLensValidator* _lensValidator;
	SCAlertViewActionButtonController* _modalOkButton;
	id<SCLensTestSessionProtocol> _lensTestSession;
	id<SCLensTestSessionFactoryProtocol> _lensTestSessionFactory;
	UICollectionView* _lensesCollectionView;
	UIView* _lensDownloadOverlay;
	id<SCLensSubPickerControllerProtocol> _lensSubPickerController;
	SCLensPresetImageProvider* _lensSubPickerPresetImageProvider;
	SCLensPhotoFaceImageProvider* _lensSubPickerPhotoFaceImageProvider;
	/*^block*/id _lensSubPickerPhotoFaceImageProviderDeallocBlock;
	LSATouchProcessingController* _touchProcessingController;
	SCLensBitmojiAlertUIController* _lensBitmojiAlertUIController;
	SCLensBitmojiProvider* _lensBitmojiProvider;
	SCLensUserDataProvider* _lensUserDataProvider;
	SCLensGeoDataProvider* _lensGeoDataProvider;
	NSString* _lensDataProviderToken;
	SCLensLayoutProvider* _lensLayoutProvider;
	SCLensUIUpdateListenerAnnouncer* _uiUpdateAnnouncer;
	id<SCLensProcessingCore> _lensProcessingCore;
	SCLensActionController* _lensActionController;
	BOOL _lensesActive;
	UITapGestureRecognizer* _downloadOverlayTapGestureRecognizer;
	id<SCLensDataProviderProtocol> _lensDataProvider;
	SCLensCarouselPresenter* _mainCarouselPresenter;
	UIView* _parentView;
	UIView* _hidableViewContainer;
	id<UIGestureRecognizerDelegate> _gestureRecognizerDelegate;
	id<SCLensBitmojiDelegate> _lensBitmojiDelegate;
	id<SCLensUserInterfaceDelegate> _lensUserInterfaceDelegate;
	SCUserSession* _userSession;
	UILabel* _lensHintLabel;
	UILabel* _tapToDownloadLabel;
	SCSponsoredSlugView* _sponsoredSlugView;
	UIView* _lensLoadingIndicatorBackground;
	SCLoadingIndicatorView* _lensLoadingIndicator;
	UILabel* _demoLensWarningLabel;
	UILabel* _demoLensReleaseDateLabel;
	SCLensesUIControllerState* _state;

}

@property (nonatomic,retain) UITapGestureRecognizer * downloadOverlayTapGestureRecognizer;                  //@synthesize downloadOverlayTapGestureRecognizer=_downloadOverlayTapGestureRecognizer - In the implementation block
@property (nonatomic,readonly) id<SCLensDataProviderProtocol> lensDataProvider;                             //@synthesize lensDataProvider=_lensDataProvider - In the implementation block
@property (nonatomic,readonly) SCLensCarouselPresenter * mainCarouselPresenter;                             //@synthesize mainCarouselPresenter=_mainCarouselPresenter - In the implementation block
@property (nonatomic,readonly) id<SCLensCarouselPresenterProtocol> currentCarouselPresenter; 
@property (assign,nonatomic,__weak) UIView * parentView;                                                    //@synthesize parentView=_parentView - In the implementation block
@property (assign,nonatomic,__weak) UIView * hidableViewContainer;                                          //@synthesize hidableViewContainer=_hidableViewContainer - In the implementation block
@property (assign,nonatomic,__weak) id<UIGestureRecognizerDelegate> gestureRecognizerDelegate;              //@synthesize gestureRecognizerDelegate=_gestureRecognizerDelegate - In the implementation block
@property (assign,nonatomic,__weak) id<SCLensBitmojiDelegate> lensBitmojiDelegate;                          //@synthesize lensBitmojiDelegate=_lensBitmojiDelegate - In the implementation block
@property (assign,nonatomic,__weak) id<SCLensUserInterfaceDelegate> lensUserInterfaceDelegate;              //@synthesize lensUserInterfaceDelegate=_lensUserInterfaceDelegate - In the implementation block
@property (assign,getter=areLensesActive,nonatomic) BOOL lensesActive;                                      //@synthesize lensesActive=_lensesActive - In the implementation block
@property (nonatomic,readonly) SCUserSession * userSession;                                                 //@synthesize userSession=_userSession - In the implementation block
@property (nonatomic,retain) UILabel * lensHintLabel;                                                       //@synthesize lensHintLabel=_lensHintLabel - In the implementation block
@property (nonatomic,retain) UILabel * tapToDownloadLabel;                                                  //@synthesize tapToDownloadLabel=_tapToDownloadLabel - In the implementation block
@property (nonatomic,retain) SCSponsoredSlugView * sponsoredSlugView;                                       //@synthesize sponsoredSlugView=_sponsoredSlugView - In the implementation block
@property (nonatomic,retain) UIView * lensLoadingIndicatorBackground;                                       //@synthesize lensLoadingIndicatorBackground=_lensLoadingIndicatorBackground - In the implementation block
@property (nonatomic,retain) SCLoadingIndicatorView * lensLoadingIndicator;                                 //@synthesize lensLoadingIndicator=_lensLoadingIndicator - In the implementation block
@property (nonatomic,retain) UILabel * demoLensWarningLabel;                                                //@synthesize demoLensWarningLabel=_demoLensWarningLabel - In the implementation block
@property (nonatomic,retain) UILabel * demoLensReleaseDateLabel;                                            //@synthesize demoLensReleaseDateLabel=_demoLensReleaseDateLabel - In the implementation block
@property (nonatomic,retain) SCLensBitmojiAlertUIController * lensBitmojiAlertUIController;                 //@synthesize lensBitmojiAlertUIController=_lensBitmojiAlertUIController - In the implementation block
@property (nonatomic,retain) SCLensesUIControllerState * state;                                             //@synthesize state=_state - In the implementation block
@property (nonatomic,readonly) UICollectionView * lensesCollectionView; 
@property (nonatomic,readonly) BOOL lensTouchProcessingActive; 
@property (nonatomic,readonly) BOOL blockTouchesForCurrentLens; 
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(int)context;
-(void)touchProcessingController:(id)arg1 didReceiveError:(id)arg2 ;
-(void)touchProcessingControllerDidFinishInteraction:(id)arg1 ;
-(void)trackingComponent:(id)arg1 didRecognizeExpression:(id)arg2 ;
-(void)trackingComponent:(id)arg1 didRecognizeFaces:(unsigned long long)arg2 ;
-(void)effectComponent:(id)arg1 willTurnOnEffectWithId:(id)arg2 ;
-(void)effectComponent:(id)arg1 didTurnOnEffectWithId:(id)arg2 features:(unsigned long long)arg3 ;
-(void)effectComponent:(id)arg1 didTurnOffEffectWithId:(id)arg2 features:(unsigned long long)arg3 ;
-(void)effectComponent:(id)arg1 effectId:(id)arg2 showHintWithId:(id)arg3 ;
-(void)effectComponent:(id)arg1 hideAllHintsForEffectWithId:(id)arg2 ;
-(void)effectComponent:(id)arg1 effectId:(id)arg2 performHapticFeedback:(unsigned long long)arg3 ;
-(void)effectComponent:(id)arg1 effectId:(id)arg2 showPopUpHintWithId:(id)arg3 interfaceElement:(unsigned long long)arg4 ;
-(void)effectComponent:(id)arg1 effectId:(id)arg2 performInterfaceAction:(unsigned long long)arg3 interfaceElement:(unsigned long long)arg4 interfaceData:(id)arg5 ;
-(void)effectComponent:(id)arg1 loadPersistentStoreForEffectWithId:(id)arg2 ;
-(void)effectComponent:(id)arg1 effectId:(id)arg2 savePersistentStore:(id)arg3 ;
-(UIView *)parentView;
-(void)setLensesActive:(BOOL)arg1 ;
-(BOOL)areLensesActive;
-(BOOL)pointInsideAnyLensView:(CGPoint)arg1 ;
-(BOOL)blockTouchesForCurrentLens;
-(BOOL)lensTouchProcessingActive;
-(BOOL)isAnyLensTouchProcessingGestureRecognizer:(id)arg1 ;
-(BOOL)isLensTouchProcessingGestureRecognizer:(id)arg1 ;
-(BOOL)isLensTapGestureRecognizer:(id)arg1 ;
-(BOOL)isLensPinchGestureRecognizer:(id)arg1 ;
-(BOOL)isLensPanGestureRecognizer:(id)arg1 ;
-(BOOL)isLensLongPressGestureRecognizer:(id)arg1 ;
-(BOOL)isLensRotationGestureRecognizer:(id)arg1 ;
-(BOOL)isCurrentLensDownloadingInProgress;
-(UICollectionView *)lensesCollectionView;
-(void)setLensesActive:(BOOL)arg1 appearanceConfiguration:(id)arg2 activationState:(id)arg3 completion:(/*^block*/id)arg4 ;
-(void)selectLensWithIdIfPossible:(id)arg1 ;
-(id)snappablesDataFuture;
-(BOOL)pointInsideAnyLensViewButton:(CGPoint)arg1 ;
-(UIView *)hidableViewContainer;
-(id<SCLensDataProviderProtocol>)lensDataProvider;
-(void)lensCarouselPresenter:(id)arg1 didSelectLens:(id)arg2 index:(unsigned long long)arg3 originalLensIndex:(unsigned long long)arg4 totalLensesCount:(unsigned long long)arg5 ;
-(BOOL)lensCarouselPresenter:(id)arg1 isLensBeingApplied:(id)arg2 ;
-(void)lensCarouselPresenter:(id)arg1 willDisplayLens:(id)arg2 ;
-(void)lensCarouselPresenter:(id)arg1 didEndDisplayingLens:(id)arg2 ;
-(void)lensCarouselPresenter:(id)arg1 didScroll:(id)arg2 selectedCellDistance:(double)arg3 selectedLens:(id)arg4 ;
-(void)lensCarouselPresenter:(id)arg1 didEndScrolling:(id)arg2 atLens:(id)arg3 ;
-(void)lensCarouselPresenter:(id)arg1 didUpdateLensesList:(id)arg2 ;
-(BOOL)lensHintPresenterShouldShowHint:(id)arg1 ;
-(void)lensHintPresenterWillShowHint:(id)arg1 ;
-(UILabel *)lensHintLabel;
-(void)lensHintPresenterDidHideHint:(id)arg1 ;
-(void)_prepareLensDownloadOverlay;
-(id)excludedHintIds;
-(void)initLensesCollectionViewProperties:(id)arg1 ;
-(void)applyCollectionViewConstraints:(id)arg1 ;
-(SCLensCarouselPresenter *)mainCarouselPresenter;
-(void)downloadCurrentLensIfNecessary;
-(void)setDownloadOverlayTapGestureRecognizer:(UITapGestureRecognizer *)arg1 ;
-(UITapGestureRecognizer *)downloadOverlayTapGestureRecognizer;
-(void)setTapToDownloadLabel:(UILabel *)arg1 ;
-(UILabel *)tapToDownloadLabel;
-(BOOL)_pointInsideLensView:(CGPoint)arg1 cellFramesOnly:(BOOL)arg2 ;
-(BOOL)pointInsideLensSubPicker:(CGPoint)arg1 ;
-(id<SCLensCarouselPresenterProtocol>)currentCarouselPresenter;
-(id)presetsComponentForCurrentLens;
-(id)externalComponentForCurrentLens;
-(BOOL)isRegressorNeeded;
-(void)downloadRegressorIfNecessaryWithCompletion:(/*^block*/id)arg1 ;
-(void)showLensesUI:(BOOL)arg1 completion:(/*^block*/id)arg2 ;
-(void)hideLensesUI:(BOOL)arg1 completion:(/*^block*/id)arg2 ;
-(void)showTapToDownloadHint:(BOOL)arg1 downloadInProgress:(BOOL)arg2 animated:(BOOL)arg3 ;
-(void)_hideLensModalCard;
-(id<UIGestureRecognizerDelegate>)gestureRecognizerDelegate;
-(SCLensBitmojiAlertUIController *)lensBitmojiAlertUIController;
-(void)showOrHideSponsoredSlugForLensIfNeeded:(id)arg1 ;
-(void)showDemoLensWarningForLens:(id)arg1 ;
-(void)_saveSubPickerActiveOptionId;
-(void)_hideSubPicker;
-(void)hideDemoLensWarning;
-(void)_showSubPicker;
-(void)_showLensModalCardWithTitleId:(id)arg1 descriptionId:(id)arg2 ;
-(id)lensPersistentStoreKeyWithEffectId:(id)arg1 ;
-(void)showHintView:(BOOL)arg1 withHintView:(id)arg2 animated:(BOOL)arg3 ;
-(SCSponsoredSlugView *)sponsoredSlugView;
-(UILabel *)demoLensWarningLabel;
-(UILabel *)demoLensReleaseDateLabel;
-(void)_updateTapToActivateLoggerForLens:(id)arg1 ;
-(void)applyLens:(id)arg1 launchData:(id)arg2 ;
-(void)clearLens;
-(void)activateLens:(id)arg1 launchData:(id)arg2 completion:(/*^block*/id)arg3 ;
-(void)setSponsoredSlugView:(SCSponsoredSlugView *)arg1 ;
-(void)updateSlugViewWithDefaultMargins:(id)arg1 forPosition:(long long)arg2 ;
-(void)animateSponsoredSlug;
-(void)_createTapToActivateLoggerForLens:(id)arg1 ;
-(id)initWithParentViewContainer:(id)arg1 hidableViewContainer:(id)arg2 userSession:(id)arg3 lensProcessingCore:(id)arg4 lensDataProvider:(id)arg5 lensLayoutProvider:(id)arg6 gestureRecognizerDelegate:(id)arg7 lensBitmojiDelegate:(id)arg8 lensUserInterfaceDelegate:(id)arg9 ;
-(BOOL)canAutoselectLensOnScroll;
-(void)showLensesUI:(BOOL)arg1 ;
-(void)hideLensesUI:(BOOL)arg1 ;
-(void)lensCarouselPresenter:(id)arg1 didScroll:(id)arg2 selectedCellDistance:(double)arg3 ;
-(void)setHidableViewContainer:(UIView *)arg1 ;
-(void)setGestureRecognizerDelegate:(id<UIGestureRecognizerDelegate>)arg1 ;
-(id<SCLensBitmojiDelegate>)lensBitmojiDelegate;
-(void)setLensBitmojiDelegate:(id<SCLensBitmojiDelegate>)arg1 ;
-(id<SCLensUserInterfaceDelegate>)lensUserInterfaceDelegate;
-(void)setLensUserInterfaceDelegate:(id<SCLensUserInterfaceDelegate>)arg1 ;
-(void)setLensHintLabel:(UILabel *)arg1 ;
-(UIView *)lensLoadingIndicatorBackground;
-(void)setLensLoadingIndicatorBackground:(UIView *)arg1 ;
-(SCLoadingIndicatorView *)lensLoadingIndicator;
-(void)setLensLoadingIndicator:(SCLoadingIndicatorView *)arg1 ;
-(void)setDemoLensWarningLabel:(UILabel *)arg1 ;
-(void)setDemoLensReleaseDateLabel:(UILabel *)arg1 ;
-(void)setLensBitmojiAlertUIController:(SCLensBitmojiAlertUIController *)arg1 ;
-(void)dealloc;
-(SCLensesUIControllerState *)state;
-(void)setState:(SCLensesUIControllerState *)arg1 ;
-(void)cleanup;
-(SCUserSession *)userSession;
-(void)setParentView:(UIView *)arg1 ;
@end

