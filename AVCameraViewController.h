/*
* This header is generated by classdump-dyld 1.0
* on Saturday, May 19, 2018 at 4:52:25 PM Eastern Daylight Time
* Operating System: Version 10.2 (Build 14C92)
* Image Source: /var/containers/Bundle/Application/7AB1B6B1-534C-4BF9-A7EB-BE2BD4C13043/Snapchat.app/Snapchat
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <Snapchat/Snapchat-Structs.h>
#import <UIKit/UIViewController.h>
#import <Snapchat/SCOperaSilentlyPresentedProtocol.h>
#import <Snapchat/SCLensSnapcodeARExperienceControllerDelegate.h>
#import <Snapchat/SCLensOperaControllerDelegate.h>
#import <Snapchat/LSASnapRecordingComponentListener.h>
#import <Snapchat/SCManagedLensProcessorStateListener.h>
#import <Snapchat/SCLensRemoverProtocol.h>
#import <Snapchat/SCFeatureLensSideButtonDelegate.h>
#import <Snapchat/SCCameraScreenLensDataProviderSource.h>
#import <Snapchat/SCManagedCapturerListener.h>
#import <UIKit/UINavigationControllerDelegate.h>
#import <Snapchat/SCScanResultViewControllerDelegate.h>
#import <Snapchat/SCShareUsernameControllerDelegate.h>
#import <Snapchat/SCShazamManagerDelegate.h>
#import <Snapchat/SCLagunaEventListener.h>
#import <Snapchat/SCSearchVPControllingDelegate.h>
#import <Snapchat/SCScanPreviewControllerDelegate.h>
#import <Snapchat/SCCameraPreviewEventDelegate.h>
#import <Snapchat/SCSearchSnapZoomLevelProviding.h>
#import <Snapchat/SCShakeToReportDelegate.h>
#import <Snapchat/SCCameraVolumeButtonHandlerDelegate.h>
#import <Snapchat/SCTimeProfilable.h>
#import <Snapchat/SCMiniProfileViewControllerDelegate.h>
#import <Snapchat/SCDeepLinkMiniProfileControllerDelegate.h>
#import <Snapchat/SCFeatureMemoriesDelegate.h>
#import <Snapchat/SwipeView.h>
#import <UIKit/UIGestureRecognizerDelegate.h>
#import <Snapchat/SCCameraOverlayDelegate.h>
#import <Snapchat/SCDeepLinkableViewSource.h>
#import <Snapchat/SCHydraReplySnapDelegate.h>
#import <Snapchat/SCChatQuickCaptionDelegate.h>
#import <Snapchat/SCLensBitmojiDelegate.h>
#import <Snapchat/SendSnapNavigationControllerDelegate.h>
#import <Snapchat/SCCameraTooltipPriorityResolverDelegate.h>

@protocol SCSearchVPControlling, SCChatQuickCaptionDelegate, AVCameraViewControllerDelegate, SCSwipeViewParentDelegate, NavigationDelegate, SCSnapSendPreparer, SendSnapNavigationControllerDelegate, SCStartChatDelegate, SCFeatureProvider, SCLensCameraScreenDataProviderProtocol;
@class UIView, SCManagedCapturerState, NSString, SCCameraVolumeButtonHandler, SCShareUsernameController, SCSnapCraftRealTimeBaseController, SCShazamManager, SCShazamConfiguration, SCShazamAudioCapturer, NSDate, SCCaptionState, SCCaptionManager, SCMultiSnapSegment, SCManagedVideoNoSoundLogger, SCPromise, SCLazy, SCRecordingFileManager, SCScopedAccess, SCPreviewPresenter, SCMicNotificationController, UIImage, SCViewPageOnboardingTooltipManager, SCCameraTooltipPriorityResolver, SCBlackCameraDetector, SCDeepLinkMiniProfileController, SCCameraOverlayView, SCMultiSnapCollectionViewController, SCMultiSnapV2CollectionViewController, SCGradientView, SCFeatureCoordinator, NSTimer, SCLensesUIControllerState, SCLensesUIAppearanceConfiguration, SCLensSnapcodeARExperienceController, SCLensSonicController, SCLensInitLogger, SCManagedLensProcessorState, SCLensOperaController, SCLensDataProviderProxy, SCReplyParameters, SCManagedRecordingInterruptionReporter, SCUserSession;

@interface AVCameraViewController : UIViewController <SCOperaSilentlyPresentedProtocol, SCLensSnapcodeARExperienceControllerDelegate, SCLensOperaControllerDelegate, LSASnapRecordingComponentListener, SCManagedLensProcessorStateListener, SCLensRemoverProtocol, SCFeatureLensSideButtonDelegate, SCCameraScreenLensDataProviderSource, SCManagedCapturerListener, UINavigationControllerDelegate, SCScanResultViewControllerDelegate, SCShareUsernameControllerDelegate, SCShazamManagerDelegate, SCLagunaEventListener, SCSearchVPControllingDelegate, SCScanPreviewControllerDelegate, SCCameraPreviewEventDelegate, SCSearchSnapZoomLevelProviding, SCShakeToReportDelegate, SCCameraVolumeButtonHandlerDelegate, SCTimeProfilable, SCMiniProfileViewControllerDelegate, SCDeepLinkMiniProfileControllerDelegate, SCFeatureMemoriesDelegate, SwipeView, UIGestureRecognizerDelegate, SCCameraOverlayDelegate, SCDeepLinkableViewSource, SCHydraReplySnapDelegate, SCChatQuickCaptionDelegate, SCLensBitmojiDelegate, SendSnapNavigationControllerDelegate, SCCameraTooltipPriorityResolverDelegate> {

	unsigned _recordingSession;
	SCManagedCapturerState* _managedCapturerState;
	NSString* _deviceOrientationToken;
	BOOL _askingVideoCapturePermissions;
	BOOL _askingAudioPermissions;
	BOOL _cameraError;
	BOOL _triedToCaptureImage;
	BOOL _recordedLengthTooShort;
	BOOL _resetCameraView;
	BOOL _warnedMicDisabled;
	BOOL _isResigningActive;
	BOOL _willHideNightModeButtonWithDelay;
	BOOL _shouldBrieflyRedisplayMapTooltip;
	BOOL _showingNeedCameraAccessAlertView;
	SCCameraVolumeButtonHandler* _volumeButtonHandler;
	BOOL _pressingVolumeButton;
	double _cameraStartTime;
	/*^block*/id _deeplinkUnlockDeferredBlock;
	UIView* _cameraViewHolder;
	UIView* _privacyView;
	long long _replyCameraType;
	SCShareUsernameController* _shareUsernameController;
	SCSnapCraftRealTimeBaseController* _snapCraftRealTimeController;
	BOOL _nightModeButtonPressedUsingBackCamera;
	double _beginningScale;
	double _panScale;
	long long _panScaleNumFlips;
	double _pinchScale;
	double _longPressScale;
	double _longPressTotalOffset;
	double _longPressFlipTotalOffset;
	long long _longPressNumFlips;
	CGPoint _longPressOrigin;
	CGPoint _longPressLastPosition;
	BOOL _tookSnapForReset;
	unsigned long long _positionStartRecording;
	double _frontScaleStartRecording;
	double _backScaleStartRecording;
	BOOL _waitingUntilVisibleToBeginRecording;
	BOOL _forceTouchedWhileRecording;
	SCShazamManager* _shazamManager;
	SCShazamConfiguration* _shazamConfigurationDuringLongPress;
	SCShazamAudioCapturer* _audioCapturer;
	id<SCSearchVPControlling> _searchVPController;
	double _lastSuccessfulLensActivationTime;
	NSString* _lastSuccessfulLensActivationActivatorId;
	double _lastSuccessfulScanTime;
	double _longPressStartTime;
	BOOL _duringLongPress;
	NSDate* _startRecordingTimestamp;
	SCCaptionState* _captionState;
	SCCaptionManager* _captionManager;
	id<SCChatQuickCaptionDelegate> _quickCaptionDelegate;
	SCMultiSnapSegment* _currentMultiSnapSegment;
	double _startRecordingAnimationTime;
	SCManagedVideoNoSoundLogger* _videoNoSoundLogger;
	SCPromise* _imageCapturePromise;
	SCLazy* _searchEventAnnouncerCreator;
	SCRecordingFileManager* _recordingFileManager;
	BOOL _hasTriedCapturing;
	NSString* _lockRingingToken;
	SCScopedAccess* _scopedDeepLinkUserActionDelegate;
	SCPreviewPresenter* _previewPresenter;
	SCMicNotificationController* _micNotificationController;
	BOOL _isCreateYourOwnODLFlowPresented;
	UIImage* _quickStickerImage;
	SCViewPageOnboardingTooltipManager* _viewPageOnboardingTooltipManager;
	SCCameraTooltipPriorityResolver* _tooltipPriorityResolver;
	SCBlackCameraDetector* _blackCameraDetector;
	SCDeepLinkMiniProfileController* _deepLinkMiniProfileController;
	BOOL _deprecateNavigationTransitioning;
	BOOL _requestedToTurnOnLenses;
	BOOL _pressingCameraButton;
	id<AVCameraViewControllerDelegate> _delegate;
	id<SCSwipeViewParentDelegate> _parentDelegate;
	id<NavigationDelegate> _navigationDelegate;
	id<SCSnapSendPreparer> _snapSendPreparer;
	UIView* _cameraView;
	unsigned long long _recordingState;
	SCCameraOverlayView* _cameraOverlay;
	id<SendSnapNavigationControllerDelegate> _sendSnapNavigationControllerDelegate;
	id<SCStartChatDelegate> _startChatDelegate;
	SCMultiSnapCollectionViewController* _multiSnapViewController;
	SCMultiSnapV2CollectionViewController* _multiSnapV2ViewController;
	id<SCFeatureProvider> _featureProvider;
	NSString* _captureSessionID;
	SCGradientView* _tabBarGradientView;
	SCGradientView* _navBarGradientView;
	SCFeatureCoordinator* _featureCoordinator;
	NSTimer* _shazamTimer;
	SCLensesUIControllerState* _lensControllerStateToRestore;
	SCLensesUIAppearanceConfiguration* _lensControllerAppearanceConfigurationToRestore;
	SCLensesUIControllerState* _pendingLensControllerState;
	SCLensesUIAppearanceConfiguration* _pendingLensControllerAppearanceConfiguration;
	SCLensSnapcodeARExperienceController* _lensSnapcodeARExperienceController;
	SCLensSonicController* _lensSonicController;
	id<SCLensCameraScreenDataProviderProtocol> _lensDataProvider;
	SCLensInitLogger* _lensInitLogger;
	SCManagedLensProcessorState* _managedLensProcessorState;
	SCLensOperaController* _lensOperaController;
	/*^block*/id _resetLensStateBlock;
	SCLensDataProviderProxy* _lensDataProviderProxy;
	id<SCLensCameraScreenDataProviderProtocol> _innerLensDataProvider;
	unsigned long long _appearanceState;
	SCReplyParameters* _replyParameters;
	SCManagedRecordingInterruptionReporter* _managedRecordingInterruptionReporter;

}

@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (nonatomic,retain) SCGradientView * tabBarGradientView;                                                               //@synthesize tabBarGradientView=_tabBarGradientView - In the implementation block
@property (nonatomic,retain) SCGradientView * navBarGradientView;                                                               //@synthesize navBarGradientView=_navBarGradientView - In the implementation block
@property (nonatomic,retain) SCFeatureCoordinator * featureCoordinator;                                                         //@synthesize featureCoordinator=_featureCoordinator - In the implementation block
@property (nonatomic,retain) NSTimer * shazamTimer;                                                                             //@synthesize shazamTimer=_shazamTimer - In the implementation block
@property (assign,nonatomic) BOOL requestedToTurnOnLenses;                                                                      //@synthesize requestedToTurnOnLenses=_requestedToTurnOnLenses - In the implementation block
@property (nonatomic,retain) SCLensesUIControllerState * lensControllerStateToRestore;                                          //@synthesize lensControllerStateToRestore=_lensControllerStateToRestore - In the implementation block
@property (nonatomic,retain) SCLensesUIAppearanceConfiguration * lensControllerAppearanceConfigurationToRestore;                //@synthesize lensControllerAppearanceConfigurationToRestore=_lensControllerAppearanceConfigurationToRestore - In the implementation block
@property (nonatomic,retain) SCLensesUIControllerState * pendingLensControllerState;                                            //@synthesize pendingLensControllerState=_pendingLensControllerState - In the implementation block
@property (nonatomic,retain) SCLensesUIAppearanceConfiguration * pendingLensControllerAppearanceConfiguration;                  //@synthesize pendingLensControllerAppearanceConfiguration=_pendingLensControllerAppearanceConfiguration - In the implementation block
@property (nonatomic,retain) SCLensSnapcodeARExperienceController * lensSnapcodeARExperienceController;                         //@synthesize lensSnapcodeARExperienceController=_lensSnapcodeARExperienceController - In the implementation block
@property (nonatomic,retain) SCLensSonicController * lensSonicController;                                                       //@synthesize lensSonicController=_lensSonicController - In the implementation block
@property (nonatomic,retain) id<SCLensCameraScreenDataProviderProtocol> lensDataProvider;                                       //@synthesize lensDataProvider=_lensDataProvider - In the implementation block
@property (nonatomic,retain) SCLensInitLogger * lensInitLogger;                                                                 //@synthesize lensInitLogger=_lensInitLogger - In the implementation block
@property (nonatomic,retain) SCManagedLensProcessorState * managedLensProcessorState;                                           //@synthesize managedLensProcessorState=_managedLensProcessorState - In the implementation block
@property (nonatomic,retain) SCLensOperaController * lensOperaController;                                                       //@synthesize lensOperaController=_lensOperaController - In the implementation block
@property (nonatomic,copy) id resetLensStateBlock;                                                                              //@synthesize resetLensStateBlock=_resetLensStateBlock - In the implementation block
@property (nonatomic,retain) SCLensDataProviderProxy * lensDataProviderProxy;                                                   //@synthesize lensDataProviderProxy=_lensDataProviderProxy - In the implementation block
@property (nonatomic,retain) id<SCLensCameraScreenDataProviderProtocol> innerLensDataProvider;                                  //@synthesize innerLensDataProvider=_innerLensDataProvider - In the implementation block
@property (assign,nonatomic) unsigned long long appearanceState;                                                                //@synthesize appearanceState=_appearanceState - In the implementation block
@property (assign,nonatomic) BOOL pressingCameraButton;                                                                         //@synthesize pressingCameraButton=_pressingCameraButton - In the implementation block
@property (nonatomic,retain) SCReplyParameters * replyParameters;                                                               //@synthesize replyParameters=_replyParameters - In the implementation block
@property (nonatomic,retain) SCManagedRecordingInterruptionReporter * managedRecordingInterruptionReporter;                     //@synthesize managedRecordingInterruptionReporter=_managedRecordingInterruptionReporter - In the implementation block
@property (assign,nonatomic,__weak) id<AVCameraViewControllerDelegate> delegate;                                                //@synthesize delegate=_delegate - In the implementation block
@property (assign,nonatomic,__weak) id<SCSwipeViewParentDelegate> parentDelegate;                                               //@synthesize parentDelegate=_parentDelegate - In the implementation block
@property (assign,nonatomic,__weak) id<NavigationDelegate> navigationDelegate;                                                  //@synthesize navigationDelegate=_navigationDelegate - In the implementation block
@property (assign,nonatomic,__weak) id<SCSnapSendPreparer> snapSendPreparer;                                                    //@synthesize snapSendPreparer=_snapSendPreparer - In the implementation block
@property (nonatomic,retain) UIView * cameraView;                                                                               //@synthesize cameraView=_cameraView - In the implementation block
@property (assign,nonatomic) unsigned long long recordingState;                                                                 //@synthesize recordingState=_recordingState - In the implementation block
@property (nonatomic,retain) SCCameraOverlayView * cameraOverlay;                                                               //@synthesize cameraOverlay=_cameraOverlay - In the implementation block
@property (assign,nonatomic,__weak) id<SendSnapNavigationControllerDelegate> sendSnapNavigationControllerDelegate;              //@synthesize sendSnapNavigationControllerDelegate=_sendSnapNavigationControllerDelegate - In the implementation block
@property (assign,nonatomic,__weak) id<SCStartChatDelegate> startChatDelegate;                                                  //@synthesize startChatDelegate=_startChatDelegate - In the implementation block
@property (nonatomic,readonly) SCMultiSnapCollectionViewController * multiSnapViewController;                                   //@synthesize multiSnapViewController=_multiSnapViewController - In the implementation block
@property (nonatomic,readonly) SCMultiSnapV2CollectionViewController * multiSnapV2ViewController;                               //@synthesize multiSnapV2ViewController=_multiSnapV2ViewController - In the implementation block
@property (nonatomic,retain) id<SCFeatureProvider> featureProvider;                                                             //@synthesize featureProvider=_featureProvider - In the implementation block
@property (nonatomic,readonly) SCManagedCapturerState * managedCapturerState;                                                   //@synthesize managedCapturerState=_managedCapturerState - In the implementation block
@property (nonatomic,readonly) SCUserSession * userSession; 
@property (nonatomic,readonly) NSString * captureSessionID;                                                                     //@synthesize captureSessionID=_captureSessionID - In the implementation block
@property (assign,nonatomic) BOOL deprecateNavigationTransitioning;                                                             //@synthesize deprecateNavigationTransitioning=_deprecateNavigationTransitioning - In the implementation block
@property (nonatomic,readonly) UIView * hovaAccessoryView; 
+(id)exceptionalMethodsContexts;
+(id)announcerIdentifier;
+(id)cameraPageViewName;
+(id)galleryPageViewName;
+(int)context;
-(void)startSnapRecording;
-(void)stopSnapRecording;
-(void)captureSnapImage;
-(void)addObservers;
-(BOOL)canShowStatusBarOverlay;
-(void)statusBarTapped;
-(BOOL)shouldDisplayStatusBar;
-(id)allLenses;
-(unsigned long long)preferredScreenEdgesDeferringSystemGestures;
-(double)currentVideoZoomLevel;
-(void)viewDidFullyAppear;
-(void)viewDidPartiallyDisappear;
-(void)viewDidFullyDisappear;
-(BOOL)shouldPopToRootViewController;
-(void)viewDidEnterBackground;
-(void)viewWillEnterForeground;
-(BOOL)shouldBeSilentlyPresentedAndPauseOpera;
-(id)sc_navigationItem;
-(id)sc_tabBarItem;
-(id)initWithFeatureProvider:(id)arg1 ;
-(void)setSendSnapNavigationControllerDelegate:(id<SendSnapNavigationControllerDelegate>)arg1 ;
-(void)setReplyWithParameter:(id)arg1 cameraViewType:(long long)arg2 ;
-(void)scanResultViewControllerDidDismiss:(id)arg1 dismissType:(unsigned long long)arg2 ;
-(id)getPageViewName;
-(void)setStartChatDelegate:(id<SCStartChatDelegate>)arg1 ;
-(SCReplyParameters *)replyParameters;
-(void)didSendSnaps:(id)arg1 ;
-(void)didCancelFromPreview:(id)arg1 ;
-(void)didComeFromCameraWithoutSendingSnap;
-(void)didSendChatMessage;
-(void)didSendToGallery;
-(void)didPostStory;
-(void)didPostNewlyCreatedGroupStories:(id)arg1 ;
-(void)miniProfileController:(id)arg1 wantsToNavigateToChatWithDeepLinkURL:(id)arg2 ;
-(void)miniProfileViewController:(id)arg1 didSendSnap:(id)arg2 ;
-(void)miniProfileViewControllerDidAddFriend:(id)arg1 friend:(id)arg2 ;
-(void)presentActivityViewController:(id)arg1 shareUsernameController:(id)arg2 ;
-(id<SCStartChatDelegate>)startChatDelegate;
-(id<SendSnapNavigationControllerDelegate>)sendSnapNavigationControllerDelegate;
-(void)setReplyParameters:(SCReplyParameters *)arg1 ;
-(id)initWithFeatureProvider:(id)arg1 lensDataProvider:(id)arg2 ;
-(void)setCameraOverlayFrameHeight:(double)arg1 ;
-(void)setDeprecateNavigationTransitioning:(BOOL)arg1 ;
-(void)resetLensState;
-(void)tryToActivateLensAfterUnlockWithActivationState:(id)arg1 ;
-(void)turnLensesOnWithActivationState:(id)arg1 ;
-(id)mainSuperview;
-(void)startHandlingVolumeButtonEvents;
-(void)stopHandlingVolumeButtonEvents;
-(id<SCFeatureProvider>)featureProvider;
-(void)managedCapturer:(id)arg1 didChangeState:(id)arg2 ;
-(void)managedCapturer:(id)arg1 didChangeNightModeActive:(id)arg2 ;
-(void)managedCapturer:(id)arg1 didChangePortraitModeActive:(id)arg2 ;
-(void)managedCapturer:(id)arg1 didChangeLensesActive:(id)arg2 ;
-(void)managedCapturer:(id)arg1 didChangeARSessionActive:(id)arg2 ;
-(void)managedCapturer:(id)arg1 didChangeLowLightCondition:(id)arg2 ;
-(void)managedCapturer:(id)arg1 didChangeCaptureDevicePosition:(id)arg2 ;
-(void)managedCapturer:(id)arg1 willFinishRecording:(id)arg2 session:(SCD_Struct_SC484)arg3 recordedVideoFuture:(id)arg4 videoSize:(CGSize)arg5 placeholderImage:(id)arg6 ;
-(void)managedCapturer:(id)arg1 didFinishRecording:(id)arg2 session:(SCD_Struct_SC484)arg3 recordedVideo:(id)arg4 ;
-(void)managedCapturer:(id)arg1 didFailRecording:(id)arg2 session:(SCD_Struct_SC484)arg3 error:(id)arg4 ;
-(void)managedCapturer:(id)arg1 didCancelRecording:(id)arg2 session:(SCD_Struct_SC484)arg3 ;
-(void)managedCapturer:(id)arg1 didGetError:(id)arg2 forType:(long long)arg3 session:(SCD_Struct_SC484)arg4 ;
-(void)managedCapturerDidCallLenseResume:(id)arg1 session:(SCD_Struct_SC484)arg2 ;
-(void)managedCapturer:(id)arg1 willCapturePhoto:(id)arg2 sampleMetadata:(id)arg3 ;
-(void)managedCapturer:(id)arg1 didCapturePhoto:(id)arg2 ;
-(id)previewPresenter;
-(void)setPressingCameraButton:(BOOL)arg1 ;
-(SCManagedCapturerState *)managedCapturerState;
-(SCCameraOverlayView *)cameraOverlay;
-(void)setCameraOverlay:(SCCameraOverlayView *)arg1 ;
-(void)featureMemoriesWillStartWarmupForLagunaPairing:(id)arg1 ;
-(void)featureMemoriesWillScrollToGallery:(id)arg1 ;
-(void)featureMemoriesWillScrollToCamera:(id)arg1 ;
-(void)featureMemoriesDidScrollToCamera:(id)arg1 ;
-(void)featureMemoriesDidScrollToGallery:(id)arg1 ;
-(id)lensProcessingCore;
-(NSString *)captureSessionID;
-(void)doubleTap:(id)arg1 ;
-(void)handlePinchFrom:(id)arg1 ;
-(void)handlePanFrom:(id)arg1 ;
-(void)longPressOnCameraTimer:(id)arg1 ;
-(void)handleSwipeFrom:(id)arg1 ;
-(void)replyBackButtonLeftPressed;
-(void)replyBackButtonRightPressed;
-(void)cameraOverlayXButtonPressed;
-(id)profileButtonView;
-(id)cameraNavigationItem;
-(void)toggleCameraButtonPressed;
-(void)nightModeButtonPressed;
-(void)portraitModeButtonPressed;
-(void)snapCraftButtonPressed;
-(void)sonicLensToggleButtonPressed;
-(void)cameraOverlayView:(id)arg1 didUpdateCameraViewType:(long long)arg2 ;
-(void)cameraOverlayView:(id)arg1 setAllInterfaceElementsHidden:(BOOL)arg2 animated:(BOOL)arg3 duration:(double)arg4 ;
-(void)abortSnapRecordingFromLensIfNeeded;
-(void)setPanGestureRecognizerEnabled:(BOOL)arg1 ;
-(void)setQuickStickerImage:(id)arg1 ;
-(void)volumeButtonHandlerDidBeginPressingVolumeButton:(id)arg1 ;
-(void)volumeButtonHandlerDidEndPressingVolumeButton:(id)arg1 ;
-(BOOL)setNextImageFromMemoriesForLensWithId:(id)arg1 ;
-(id)captureSessionIDForLog;
-(BOOL)_isShazamSupported;
-(void)setUpLensesWithUserSession:(id)arg1 lensDataProvider:(id)arg2 ;
-(void)_createCameraOverlay;
-(void)_initTooltipPriorityResolver;
-(void)_initFeatureCoordinator;
-(void)_initNavigationBarButtonItems;
-(void)resetEffectiveScale;
-(void)_configureMultiSnapView:(id)arg1 ;
-(CGRect)_multiSnapViewFrame;
-(id)privacyView;
-(void)setNoReply;
-(void)resetButtons;
-(void)abortRecording;
-(void)turnLensesOff;
-(void)startCamera;
-(void)stopCameraSoftly;
-(BOOL)shouldHandleVolumeButtonEvents;
-(void)_activateSonicLensAfterStart;
-(void)_toggleCameraForBrightnessAdjustment;
-(BOOL)_isMainCameraView;
-(void)setAppearanceState:(unsigned long long)arg1 ;
-(BOOL)notifyUserOfCameraAndMicrophoneUsageIfNecessary;
-(BOOL)notifyUserOfDeniedCameraIfNecessary;
-(void)notifyUserOfRestrictedCameraIfNecessary;
-(void)_alertCameraRestrictionOn;
-(void)_logNoCamera:(id)arg1 authorization:(long long)arg2 ;
-(void)_alertNoCamera;
-(void)_alertWithTitle:(id)arg1 description:(id)arg2 ;
-(void)_resetCreateYourOwnFlowFromMainCarousel;
-(void)stopCameraSoftlyAfter:(double)arg1 completionIfStopped:(/*^block*/id)arg2 ;
-(void)nightModeHideWithDelayIfNeeded;
-(void)setNavigationItemsAlpha:(double)arg1 ;
-(void)_preloadPreviewAssetsOnce;
-(void)_tryDisplayLensByDefault;
-(BOOL)restoreLensState;
-(void)_updateOrientation:(long long)arg1 ;
-(void)_warmupPreview;
-(void)setCanFlipCamera:(BOOL)arg1 ;
-(void)resetCameraTimer;
-(void)_resetTrophyMetricsAndLongPressTotalOffset;
-(void)_resetMultiSnapViewIfNeeded;
-(void)displayHelpIfNecessary;
-(BOOL)initiatedRecording;
-(void)_nightModeDidToggle:(id)arg1 ;
-(void)setupCaptureVideoPreviewView;
-(SCGradientView *)tabBarGradientView;
-(SCGradientView *)navBarGradientView;
-(void)_initLaguna;
-(id)captionManager;
-(void)appStartupDidComplete;
-(void)viewWillResignActive;
-(void)viewDidBecomeActive;
-(void)postponedViewDidBecomeActive;
-(void)handleMediaServicesResetNotification:(id)arg1 ;
-(void)handleMediaServicesLostNotification:(id)arg1 ;
-(BOOL)preparingPreview;
-(void)_maybeShowMapTooltip;
-(void)_showViewPageOnboardingTooltipIfNecessary;
-(void)_dismissScanCards;
-(SCLensesUIControllerState *)lensControllerStateToRestore;
-(void)logOnCameraExit:(id)arg1 ;
-(void)dismissLensOperaPresenterWithDidBackground:(BOOL)arg1 ;
-(BOOL)isInReplyingMode;
-(void)updateLensesUIWithVisibilityPercentage:(double)arg1 ;
-(BOOL)inCaptureFlow;
-(BOOL)isARExperienceActive;
-(void)setReplyCameraType:(long long)arg1 ;
-(id<SCLensCameraScreenDataProviderProtocol>)lensDataProvider;
-(void)updateLensDataProviderWithCameraType:(long long)arg1 ;
-(void)nightModeResetIfNeeded;
-(void)stopCameraImmediately;
-(void)hidePrivacyView;
-(void)_popVerticalViewsIfNeeded;
-(void)abortPressingVolumeButtonAndEndRecording;
-(void)endRecordingWithMethod:(unsigned long long)arg1 ;
-(void)showRecordedVideoIfNecessary;
-(void)_presentPreviewForVideoFuture:(id)arg1 ;
-(BOOL)isPresentingPreviewViewController;
-(void)_logPresentPreview;
-(SCLensSnapcodeARExperienceController *)lensSnapcodeARExperienceController;
-(void)_resetPreviewPresenter;
-(SCManagedRecordingInterruptionReporter *)managedRecordingInterruptionReporter;
-(SCMultiSnapCollectionViewController *)multiSnapViewController;
-(SCMultiSnapV2CollectionViewController *)multiSnapV2ViewController;
-(void)setSnapSendPreparer:(id<SCSnapSendPreparer>)arg1 ;
-(SCLensDataProviderProxy *)lensDataProviderProxy;
-(void)_transitionToRecordingStateWithAnimationDuration:(double)arg1 ;
-(void)setRightSwipeGestureRecognizerEnabled;
-(void)_handleFailedRecording:(id)arg1 ;
-(void)setNavigationItemsHidden:(BOOL)arg1 animated:(BOOL)arg2 duration:(double)arg3 ;
-(BOOL)pressingCameraButton;
-(BOOL)takingPicture;
-(double)_beginningScaleFromZoomFactor:(double)arg1 ;
-(void)startSnapCaptureSession;
-(void)logTabBarRecordingFromOtherPage:(BOOL)arg1 ;
-(void)prepareForRecordingWithMethod:(unsigned long long)arg1 ;
-(BOOL)compatibilityZoomingMode;
-(void)toggleCameraWithCompletion:(/*^block*/id)arg1 ;
-(double)getOffsetFromVelocity:(CGPoint)arg1 ;
-(double)_calculateLongPressScaleFromOffset;
-(double)_calculateEffectiveScaleWithChangedScale:(double*)arg1 ;
-(BOOL)_isMainCameraViewAndBackFacing;
-(BOOL)interactingWithCamera;
-(void)_toggleCameraButtonsVisibility:(BOOL)arg1 animated:(BOOL)arg2 ;
-(BOOL)enableScanning;
-(BOOL)isPresentingScanResultsViewController;
-(void)_handleScanResults:(id)arg1 scanSource:(long long)arg2 ;
-(void)_handleLensActivation:(id)arg1 ;
-(BOOL)tryToActivateLensesWithLongPressGestureRecognizer:(id)arg1 originalPoint:(CGPoint)arg2 retryOnFailure:(BOOL)arg3 completion:(/*^block*/id)arg4 ;
-(void)fetchShazamArtistList:(id)arg1 ;
-(void)setShazamTimer:(NSTimer *)arg1 ;
-(NSTimer *)shazamTimer;
-(void)_setupShazamAudioCapturerIfNeeded;
-(void)trackCameraPageActionEventWithStartX:(double)arg1 startY:(double)arg2 endX:(double)arg3 endY:(double)arg4 duration:(double)arg5 module:(long long)arg6 firstUsage:(BOOL)arg7 action:(long long)arg8 lensActivator:(id)arg9 ;
-(void)_setScreenAutoLockDisabledIfNeeded:(BOOL)arg1 ;
-(void)_hideOnboardingTooltipsWhenPrepareForRecording;
-(void)_recordCurrentZoomStateForReset;
-(BOOL)preparingRecording;
-(void)_setupRecordLifecyleEventsAndStartWithMethod:(unsigned long long)arg1 ;
-(void)_markCameraHelpTooltipAsCompletedIfNecessary;
-(void)_addMultiSnapViewIfNeeded;
-(void)_sampleMultiSnapFrame;
-(void)endRecording:(BOOL)arg1 withMethod:(unsigned long long)arg2 ;
-(void)startRecordingWithMethod:(unsigned long long)arg1 ;
-(BOOL)tryCapturingStillImage;
-(void)cancelSnapCaptureSession;
-(BOOL)_asynchronousImageCaptureEnabled;
-(void)_presentPreviewForImageFuture:(id)arg1 async:(BOOL)arg2 ;
-(void)finishSnapCaptureSession;
-(void)_presentCreateYourOwnFlowFromMainCarousel;
-(void)showLensesActivationTooltipIfNecessary;
-(void)activateSonicLens;
-(void)turnLensesOffWithCompletion:(/*^block*/id)arg1 ;
-(void)turnLensesOn;
-(void)showScanCardForThirdPartyLens:(id)arg1 ;
-(void)showCallToActionViewForLens:(id)arg1 ;
-(void)_flipNightModeActiveness;
-(void)_togglePortraitMode;
-(BOOL)shouldRecognizeButtonActions;
-(void)toggleSonicLens;
-(BOOL)isPressingCameraButtonOrVolumeButton;
-(BOOL)isSonicLensInteractive;
-(BOOL)isFlashOnWithCurrentConfiguration;
-(double)_finalEffectiveScale;
-(double)scaleChangeForOffset:(double)arg1 ;
-(void)processTapInSonicLens:(id)arg1 originalPoint:(CGPoint)arg2 completion:(/*^block*/id)arg3 ;
-(BOOL)tryToActivateLensesWithTapGestureRecognizer:(id)arg1 originalPoint:(CGPoint)arg2 completion:(/*^block*/id)arg3 ;
-(void)logOnPageExit:(id)arg1 ;
-(void)recentFriendsButtonPressed;
-(void)notifyUserAfterStartCameraIfNecessary;
-(void)cameraSetupAfterStart;
-(void)notifyUserOfMicrophoneUsageIfNecessary;
-(double)disableCameraDelayWithLowPowerMode;
-(BOOL)updateLensCarouselVisibilityForState:(id)arg1 showBirthdayReplyLens:(BOOL)arg2 animated:(BOOL)arg3 ;
-(void)setUpLensProcessorDependants;
-(void)prepareForARSessionRunningStateChange:(id)arg1 ;
-(BOOL)_tryCapturingWhenRecordingTooShort;
-(BOOL)_cleanupRecording;
-(void)updateSnapCountBeforeShowLensesActivationTooltip;
-(void)didSendDiscoverSharedMessageparameters:(id)arg1 ;
-(void)didSaveSnapparameters:(id)arg1 ;
-(void)_handleDeepLinkUsingMiniProfile:(BOOL)arg1 miniProfileController:(id)arg2 deepLinkURL:(id)arg3 deepLinkFriend:(id)arg4 pageToOpen:(long long)arg5 ;
-(id)deepLinkableViewController:(id)arg1 additionalInfo:(id)arg2 ;
-(void)_presentOnDemandGeofilterViewControllers:(id)arg1 ;
-(id)getScanResultViewController;
-(void)_handleScanResults:(id)arg1 withSuccess:(BOOL)arg2 scanSource:(long long)arg3 ;
-(void)presentScanResultView:(id)arg1 ;
-(void)_dismissCameraCardViewControllerWithDismissType:(unsigned long long)arg1 viewController:(id)arg2 completion:(/*^block*/id)arg3 ;
-(BOOL)tryToActivateLensesWithActivationState:(id)arg1 completion:(/*^block*/id)arg2 ;
-(BOOL)isCreateYourOwnODLFlowPresented;
-(id)_s2CellIdFromCoordinate:(CLLocationCoordinate2D)arg1 ;
-(void)captionUpdatedWithText:(id)arg1 ;
-(BOOL)_isLensDisplayable;
-(void)_displayOpenLensTooltip;
-(id)turnLensesOnAndSelectFirstApplicableLens;
-(BOOL)isCameraViewFullyVisible;
-(BOOL)_areLensesActiveWithCurrentConfiguration;
-(void)_turnOnFrontFacingCameraAndActivateLens;
-(void)hideCameraTimer;
-(void)showCameraTimer;
-(void)shazamManagerDidFinish:(id)arg1 ;
-(void)shazamManagerDidSubmitSearchRequest;
-(void)searchVPControllerHandleScanResults:(id)arg1 ;
-(void)didScanFromPreview:(id)arg1 withResult:(id)arg2 ;
-(void)previewViewController:(id)arg1 didRenderFirstFrameForVideoURL:(id)arg2 ;
-(BOOL)shouldDisableShakeToReportOnCurrentPage;
-(void)willStartCensoringScreenshot;
-(void)willEndCensoringScreenshot;
-(void)didPresentMiniProfile:(id)arg1 ;
-(void)didDismissMiniProfile:(id)arg1 ;
-(void)viewDidSwipeIn;
-(void)viewDidSwipeOut;
-(void)viewCanAppear;
-(void)viewDidPartiallyAppear;
-(void)viewDidAppearAtOffset:(double)arg1 ;
-(BOOL)canEnterSearch;
-(BOOL)canPullDownToSearch;
-(BOOL)canPullDownToProfile;
-(void)toggleLensesButtonPressed;
-(void)thirdPartyLensInformationButtonPressed:(id)arg1 ;
-(void)lensCallToActionButtonPressed:(id)arg1 ;
-(void)createYourOwnLensPressed;
-(void)openLensFeedPressed;
-(id)currentRemoteUser;
-(BOOL)isLensesActiveOnCamera;
-(BOOL)isOnMainCamera;
-(BOOL)hasTakenPicture;
-(CGRect)convertCameraTimerRectToView:(id)arg1 ;
-(void)pushQuickAddView;
-(void)pushAddedMeView;
-(void)presentScanResultViewControllerWithActionsInfo:(id)arg1 scanSource:(long long)arg2 ;
-(void)presentInformationIconCardView:(id)arg1 ;
-(void)miniProfileController:(id)arg1 wantsToNavigateToDiscoverWithDeepLinkURL:(id)arg2 ;
-(void)profileViewDidFullyAppear;
-(void)profileViewDidFullyDisappear;
-(void)scrollingToProfileView;
-(void)cancelledScrollingToProfileView;
-(void)setQuickCaptionState:(id)arg1 withDelegate:(id)arg2 ;
-(void)tryToActivateLensFromPushNotification;
-(void)onDetectCameraViewVisible:(BOOL)arg1 ;
-(id<SCSnapSendPreparer>)snapSendPreparer;
-(void)setFeatureProvider:(id<SCFeatureProvider>)arg1 ;
-(BOOL)deprecateNavigationTransitioning;
-(void)setTabBarGradientView:(SCGradientView *)arg1 ;
-(void)setNavBarGradientView:(SCGradientView *)arg1 ;
-(SCFeatureCoordinator *)featureCoordinator;
-(void)setFeatureCoordinator:(SCFeatureCoordinator *)arg1 ;
-(BOOL)requestedToTurnOnLenses;
-(void)setRequestedToTurnOnLenses:(BOOL)arg1 ;
-(void)setLensControllerStateToRestore:(SCLensesUIControllerState *)arg1 ;
-(SCLensesUIAppearanceConfiguration *)lensControllerAppearanceConfigurationToRestore;
-(void)setLensControllerAppearanceConfigurationToRestore:(SCLensesUIAppearanceConfiguration *)arg1 ;
-(SCLensesUIControllerState *)pendingLensControllerState;
-(void)setPendingLensControllerState:(SCLensesUIControllerState *)arg1 ;
-(SCLensesUIAppearanceConfiguration *)pendingLensControllerAppearanceConfiguration;
-(void)setPendingLensControllerAppearanceConfiguration:(SCLensesUIAppearanceConfiguration *)arg1 ;
-(void)setLensSnapcodeARExperienceController:(SCLensSnapcodeARExperienceController *)arg1 ;
-(SCLensSonicController *)lensSonicController;
-(void)setLensSonicController:(SCLensSonicController *)arg1 ;
-(void)setLensDataProvider:(id<SCLensCameraScreenDataProviderProtocol>)arg1 ;
-(SCLensInitLogger *)lensInitLogger;
-(void)setLensInitLogger:(SCLensInitLogger *)arg1 ;
-(SCManagedLensProcessorState *)managedLensProcessorState;
-(void)setManagedLensProcessorState:(SCManagedLensProcessorState *)arg1 ;
-(SCLensOperaController *)lensOperaController;
-(void)setLensOperaController:(SCLensOperaController *)arg1 ;
-(id)resetLensStateBlock;
-(void)setResetLensStateBlock:(id)arg1 ;
-(void)setLensDataProviderProxy:(SCLensDataProviderProxy *)arg1 ;
-(id<SCLensCameraScreenDataProviderProtocol>)innerLensDataProvider;
-(void)setInnerLensDataProvider:(id<SCLensCameraScreenDataProviderProtocol>)arg1 ;
-(void)setManagedRecordingInterruptionReporter:(SCManagedRecordingInterruptionReporter *)arg1 ;
-(void)useLiveCameraLensDataProvider;
-(void)_studioPreviewLensShouldActivate:(id)arg1 ;
-(void)_studioPreviewLensShouldReloadIfNeeded:(id)arg1 ;
-(void)useReplyCameraLensDataProvider;
-(void)_createLensInitLogger;
-(void)_logSuccessLensInitDelay;
-(id)_lensIdToRestoreWithShowBirthdayReplyLens:(BOOL)arg1 ;
-(void)_clearLensState;
-(void)_prepareLensOperaController;
-(void)_resetLensStateForce:(BOOL)arg1 ;
-(void)_turnLensesOn:(BOOL)arg1 completionHandler:(/*^block*/id)arg2 ;
-(void)turnLensesOnWithActivationParameters:(id)arg1 activationState:(id)arg2 ;
-(void)turnLensesOnWithActivationParameters:(id)arg1 activationState:(id)arg2 completion:(/*^block*/id)arg3 ;
-(id)firstApplicableLens;
-(void)deactivateSonicLens;
-(void)setupSonicController;
-(long long)_snapSourceForPageSource;
-(void)_saveLensState;
-(void)_cancelResetLensStateBlockIfNeeded;
-(void)_resetLensStateIfNeded;
-(BOOL)_isAnyLensDetectionAllowed;
-(BOOL)_isSnapcodeLensDetectionAllowed;
-(BOOL)tryToActivateLensesWithActivationParameters:(id)arg1 activationState:(id)arg2 completion:(/*^block*/id)arg3 ;
-(BOOL)_isAnyLensActivationAllowed;
-(void)_logFailedLensInitDelay;
-(void)_processLensesActivationFromGestureType:(unsigned long long)arg1 gestureCount:(long long)arg2 point:(CGPoint)arg3 lenses:(id)arg4 success:(/*^block*/id)arg5 failure:(/*^block*/id)arg6 ;
-(id)_snapcodeARLenses;
-(void)_processLensesActivationForSnapcodeCategory:(id)arg1 ;
-(void)_processLensesActivationForForUICategory:(id)arg1 ;
-(void)lensSnapcodeARExperienceControllerDidAskToPerformAction:(id)arg1 ;
-(void)openLensCarouselSideButtonPressed:(id)arg1 ;
-(void)lensOperaController:(id)arg1 didOpenPresenter:(id)arg2 ;
-(void)lensOperaController:(id)arg1 didClosePresenter:(id)arg2 ;
-(void)lensOperaController:(id)arg1 didClosePresenter:(id)arg2 lensUnlocked:(id)arg3 ;
-(void)lensSnapcodeARExperienceController:(id)arg1 didAskToStopWithCompletion:(/*^block*/id)arg2 ;
-(void)managedLensProcessor:(id)arg1 didChangeState:(id)arg2 ;
-(void)removeLens:(id)arg1 ;
-(void)featureLensSideButton:(id)arg1 didPressLensButton:(id)arg2 ;
-(id)currentLensDataProvider;
-(void)startDeviceMotionUpdates;
-(void)setDelegate:(id<AVCameraViewControllerDelegate>)arg1 ;
-(void)dealloc;
-(id<AVCameraViewControllerDelegate>)delegate;
-(BOOL)gestureRecognizerShouldBegin:(id)arg1 ;
-(BOOL)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2 ;
-(BOOL)gestureRecognizer:(id)arg1 shouldBeRequiredToFailByGestureRecognizer:(id)arg2 ;
-(BOOL)gestureRecognizer:(id)arg1 shouldReceiveTouch:(id)arg2 ;
-(long long)preferredStatusBarStyle;
-(BOOL)prefersStatusBarHidden;
-(unsigned long long)supportedInterfaceOrientations;
-(void)didReceiveMemoryWarning;
-(void)loadView;
-(void)viewWillAppear:(BOOL)arg1 ;
-(void)viewDidAppear:(BOOL)arg1 ;
-(void)viewWillDisappear:(BOOL)arg1 ;
-(void)viewDidDisappear:(BOOL)arg1 ;
-(void)viewDidLayoutSubviews;
-(void)longPress:(id)arg1 ;
-(void)viewDidLoad;
-(id)navigationController:(id)arg1 animationControllerForOperation:(long long)arg2 fromViewController:(id)arg3 toViewController:(id)arg4 ;
-(id)accessibilityElements;
-(void)resetView;
-(SCUserSession *)userSession;
-(unsigned long long)recordingState;
-(void)setRecordingState:(unsigned long long)arg1 ;
-(void)setParentDelegate:(id<SCSwipeViewParentDelegate>)arg1 ;
-(id<SCSwipeViewParentDelegate>)parentDelegate;
-(id<NavigationDelegate>)navigationDelegate;
-(UIView *)cameraView;
-(void)setCameraView:(UIView *)arg1 ;
-(void)handleTapFrom:(id)arg1 ;
-(unsigned long long)appearanceState;
-(BOOL)recording;
-(void)showPrivacyView;
-(void)stopDeviceMotionUpdates;
-(void)resetAll;
-(void)setNavigationDelegate:(id<NavigationDelegate>)arg1 ;
@end

