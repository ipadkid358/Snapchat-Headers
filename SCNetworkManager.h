/*
* This header is generated by classdump-dyld 1.0
* on Saturday, May 19, 2018 at 4:52:07 PM Eastern Daylight Time
* Operating System: Version 10.2 (Build 14C92)
* Image Source: /var/containers/Bundle/Application/7AB1B6B1-534C-4BF9-A7EB-BE2BD4C13043/Snapchat.app/Snapchat
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <Snapchat/SCRequestTaskRunDelegate.h>
#import <Snapchat/SCRequestSchedulerDelegate.h>

@protocol SCNetworkManagerDelegate, SCPerforming;
@class SCConnectionManager, SCNetworkRequestRankingLogger, SCRequestScheduler, SCRequestManagerLogger, SCDownloadConsumptionRecorder, NSString;

@interface SCNetworkManager : NSObject <SCRequestTaskRunDelegate, SCRequestSchedulerDelegate> {

	SCConnectionManager* _connectionManager;
	SCNetworkRequestRankingLogger* _networkRequestRankingLogger;
	SCRequestScheduler* _requestScheduler;
	id<SCNetworkManagerDelegate> _delegate;
	SCRequestManagerLogger* _networkManagerLogger;
	SCDownloadConsumptionRecorder* _downloadConsumptionRecorder;
	id<SCPerforming> _queuePerformer;

}

@property (nonatomic,retain) SCRequestManagerLogger * networkManagerLogger;                            //@synthesize networkManagerLogger=_networkManagerLogger - In the implementation block
@property (nonatomic,retain) SCDownloadConsumptionRecorder * downloadConsumptionRecorder;              //@synthesize downloadConsumptionRecorder=_downloadConsumptionRecorder - In the implementation block
@property (nonatomic,retain) id<SCPerforming> queuePerformer;                                          //@synthesize queuePerformer=_queuePerformer - In the implementation block
@property (assign,nonatomic,__weak) id<SCNetworkManagerDelegate> delegate;                             //@synthesize delegate=_delegate - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(id)shared;
-(id<SCPerforming>)queuePerformer;
-(unsigned long long)numOfUploadTasks;
-(unsigned long long)numOfLargeDLTasks;
-(BOOL)criticalModeEnabled;
-(void)submitRequest:(id)arg1 authenticator:(id)arg2 completionQueue:(id)arg3 completionBlock:(/*^block*/id)arg4 ;
-(void)submitRequest:(id)arg1 authenticator:(id)arg2 successQueue:(id)arg3 failureQueue:(id)arg4 successBlock:(/*^block*/id)arg5 failureBlock:(/*^block*/id)arg6 ;
-(void)_networkReachabilityStatusDidChangeWithNotification:(id)arg1 ;
-(id)networkInterceptors;
-(void)submitRequest:(id)arg1 authenticator:(id)arg2 progressiveUpdateQueue:(id)arg3 progressiveUpdateBlock:(/*^block*/id)arg4 ;
-(void)cancelRequestWithKey:(id)arg1 ;
-(void)cancelQueuedRequestWithKey:(id)arg1 ;
-(void)cancelRequestWithKey:(id)arg1 queue:(id)arg2 byProducingResumeData:(/*^block*/id)arg3 ;
-(void)cancelRequestsWithContext:(id)arg1 ;
-(void)boostRequestWithKey:(id)arg1 toHigherPriority:(long long)arg2 ;
-(void)boostRequestWithKey:(id)arg1 toHigherConnectivity:(long long)arg2 ;
-(void)addContext:(id)arg1 toRequestWithKey:(id)arg2 ;
-(void)enableCriticalMode;
-(void)disableCriticalMode;
-(SCDownloadConsumptionRecorder *)downloadConsumptionRecorder;
-(void)setNetworkInterceptors:(id)arg1 ;
-(void)contextsWithBlock:(/*^block*/id)arg1 ;
-(void)setContexts:(id)arg1 withRequestManagerMode:(long long)arg2 ;
-(void)addContext:(id)arg1 ;
-(void)removeContexts:(id)arg1 ;
-(void)removeContext:(id)arg1 disableContextOnlyModeIfRemoved:(BOOL)arg2 ;
-(void)pauseBackgroundDownloads;
-(void)resumeBackgroundDownloads;
-(void)downloadStateForRequestWithKey:(id)arg1 completionQueue:(id)arg2 completion:(/*^block*/id)arg3 ;
-(unsigned long long)totalRequestConcurrency;
-(unsigned long long)downloadRequestConcurrency;
-(unsigned long long)metadataRequestConcurrency;
-(void)consumeContentWithKey:(id)arg1 ;
-(void)setDownloadConsumptionRecorder:(SCDownloadConsumptionRecorder *)arg1 ;
-(void)setQueuePerformer:(id<SCPerforming>)arg1 ;
-(void)runTask:(id)arg1 withCompletionQueue:(id)arg2 completionBlock:(/*^block*/id)arg3 ;
-(void)contextsDidChangeForRequestScheduler:(id)arg1 ;
-(SCRequestManagerLogger *)networkManagerLogger;
-(void)setNetworkManagerLogger:(SCRequestManagerLogger *)arg1 ;
-(id)init;
-(void)setDelegate:(id<SCNetworkManagerDelegate>)arg1 ;
-(id<SCNetworkManagerDelegate>)delegate;
-(void)reset;
-(void)_addObservers;
-(void)removeContext:(id)arg1 ;
-(void)setContexts:(id)arg1 ;
@end

