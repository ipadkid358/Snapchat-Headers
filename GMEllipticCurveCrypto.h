/*
* This header is generated by classdump-dyld 1.0
* on Saturday, May 19, 2018 at 4:52:08 PM Eastern Daylight Time
* Operating System: Version 10.2 (Build 14C92)
* Image Source: /var/containers/Bundle/Application/7AB1B6B1-534C-4BF9-A7EB-BE2BD4C13043/Snapchat.app/Snapchat
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@class NSData, NSString;

@interface GMEllipticCurveCrypto : NSObject {

	int _bytes;
	int _numDigits;
	unsigned long long* _curve_p;
	unsigned long long* _curve_b;
	unsigned long long* _curve_Gx;
	unsigned long long* _curve_Gy;
	unsigned long long* _curve_n;
	NSData* _publicKey;
	BOOL _compressedPublicKey;
	int _bits;
	NSString* _name;
	NSData* _privateKey;

}

@property (nonatomic,readonly) int bits;                               //@synthesize bits=_bits - In the implementation block
@property (nonatomic,readonly) NSString * name;                        //@synthesize name=_name - In the implementation block
@property (assign,nonatomic) BOOL compressedPublicKey;                 //@synthesize compressedPublicKey=_compressedPublicKey - In the implementation block
@property (nonatomic,retain) NSData * publicKey; 
@property (nonatomic,retain) NSString * publicKeyBase64; 
@property (nonatomic,retain) NSData * privateKey;                      //@synthesize privateKey=_privateKey - In the implementation block
@property (nonatomic,retain) NSString * privateKeyBase64; 
@property (nonatomic,readonly) int sharedSecretLength; 
@property (nonatomic,readonly) int hashLength; 
@property (nonatomic,readonly) int signatureLength; 
+(int)curveForKey:(id)arg1 ;
+(id)cryptoForKey:(id)arg1 ;
+(id)generateKeyPairForCurve:(int)arg1 ;
+(int)curveForKeyBase64:(id)arg1 ;
+(id)cryptoForKeyBase64:(id)arg1 ;
+(id)cryptoForCurve:(int)arg1 ;
-(id)hashSHA1AndSignData:(id)arg1 ;
-(id)hashSHA256AndSignData:(id)arg1 ;
-(id)hashSHA384AndSignData:(id)arg1 ;
-(BOOL)hashSHA1AndVerifySignature:(id)arg1 forData:(id)arg2 ;
-(BOOL)hashSHA256AndVerifySignature:(id)arg1 forData:(id)arg2 ;
-(BOOL)hashSHA384AndVerifySignature:(id)arg1 forData:(id)arg2 ;
-(id)encodedSignatureForHash:(id)arg1 ;
-(id)hashSHA1AndSignDataEncoded:(id)arg1 ;
-(id)hashSHA256AndSignDataEncoded:(id)arg1 ;
-(id)hashSHA384AndSignDataEncoded:(id)arg1 ;
-(BOOL)verifyEncodedSignature:(id)arg1 forHash:(id)arg2 ;
-(BOOL)hashSHA1AndVerifyEncodedSignature:(id)arg1 forData:(id)arg2 ;
-(BOOL)hashSHA256AndVerifyEncodedSignature:(id)arg1 forData:(id)arg2 ;
-(BOOL)hashSHA384AndVerifyEncodedSignature:(id)arg1 forData:(id)arg2 ;
-(BOOL)generateNewKeyPair;
-(id)sharedSecretForPublicKey:(id)arg1 ;
-(id)publicKeyForPrivateKey:(id)arg1 ;
-(id)decompressPublicKey:(id)arg1 ;
-(id)compressPublicKey:(id)arg1 ;
-(NSString *)publicKeyBase64;
-(NSString *)privateKeyBase64;
-(id)sharedSecretForPublicKeyBase64:(id)arg1 ;
-(id)signatureForHash:(id)arg1 ;
-(BOOL)verifySignature:(id)arg1 forHash:(id)arg2 ;
-(int)hashLength;
-(int)sharedSecretLength;
-(int)signatureLength;
-(void)setPrivateKeyBase64:(NSString *)arg1 ;
-(void)setPublicKeyBase64:(NSString *)arg1 ;
-(int)bits;
-(BOOL)compressedPublicKey;
-(void)setCompressedPublicKey:(BOOL)arg1 ;
-(id)description;
-(NSString *)name;
-(NSData *)publicKey;
-(void)setPublicKey:(NSData *)arg1 ;
-(NSData *)privateKey;
-(void)setPrivateKey:(NSData *)arg1 ;
-(id)initWithCurve:(int)arg1 ;
@end

