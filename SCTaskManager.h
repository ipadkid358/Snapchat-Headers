/*
* This header is generated by classdump-dyld 1.0
* on Saturday, May 19, 2018 at 4:51:47 PM Eastern Daylight Time
* Operating System: Version 10.2 (Build 14C92)
* Image Source: /var/containers/Bundle/Application/7AB1B6B1-534C-4BF9-A7EB-BE2BD4C13043/Snapchat.app/Snapchat
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <Snapchat/SCCriticalTaskExecutorDelegate.h>

@class SCQueuePerformer, SCMainThreadIdleTaskExecutor, SCCriticalTaskExecutor, SCTaskManagerTrigger, SCTaskManagerNotificationHandler, SCMainViewControllerScrollLocker;

@interface SCTaskManager : NSObject <SCCriticalTaskExecutorDelegate> {

	SCQueuePerformer* _highPriorityConcurrentPerformer;
	SCQueuePerformer* _defaultPriorityConcurrentPerformer;
	SCQueuePerformer* _lowPriorityConcurrentPerformer;
	SCQueuePerformer* _priorityBackgroundConcurrentPerformer;
	SCMainThreadIdleTaskExecutor* _idleTaskExecutor;
	SCCriticalTaskExecutor* _criticalTaskExecutor;
	SCTaskManagerTrigger* _trigger;
	SCTaskManagerNotificationHandler* _notificationHandler;
	SCMainViewControllerScrollLocker* _mainViewControllerLocker;

}

@property (nonatomic,readonly) SCTaskManagerTrigger * trigger;                                           //@synthesize trigger=_trigger - In the implementation block
@property (nonatomic,readonly) SCTaskManagerNotificationHandler * notificationHandler;                   //@synthesize notificationHandler=_notificationHandler - In the implementation block
@property (nonatomic,readonly) SCMainViewControllerScrollLocker * mainViewControllerLocker;              //@synthesize mainViewControllerLocker=_mainViewControllerLocker - In the implementation block
+(id)sharedManager;
-(id)_generateTask:(const char*)arg1 callbackQueue:(unsigned long long)arg2 block:(/*^block*/id)arg3 ;
-(id)_manageTask:(id)arg1 idleExecutorPriority:(unsigned long long)arg2 ;
-(void)criticalTaskExecutorDidFinishExecution;
-(id)addTaskToRunWhenAppIdle:(const char*)arg1 callbackQueue:(unsigned long long)arg2 block:(/*^block*/id)arg3 ;
-(id)addTaskToRunWhenAppIdle:(const char*)arg1 performer:(id)arg2 block:(/*^block*/id)arg3 ;
-(void)addAfterStartupCriticalTaskToRun:(const char*)arg1 block:(/*^block*/id)arg2 ;
-(id)addTaskToRunWhenStartupComplete:(const char*)arg1 callbackQueue:(unsigned long long)arg2 block:(/*^block*/id)arg3 ;
-(id)addTaskToRunWhenStartupComplete:(const char*)arg1 callbackQueue:(unsigned long long)arg2 urgentReason:(id)arg3 block:(/*^block*/id)arg4 ;
-(id)addTaskToRunWhenStartupComplete:(const char*)arg1 performer:(id)arg2 block:(/*^block*/id)arg3 ;
-(void)markAppStartUpComplete;
-(void)markAppEnterBackground;
-(SCTaskManagerNotificationHandler *)notificationHandler;
-(SCMainViewControllerScrollLocker *)mainViewControllerLocker;
-(id)init;
-(SCTaskManagerTrigger *)trigger;
@end

