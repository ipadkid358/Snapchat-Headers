/*
* This header is generated by classdump-dyld 1.0
* on Saturday, May 19, 2018 at 4:52:07 PM Eastern Daylight Time
* Operating System: Version 10.2 (Build 14C92)
* Image Source: /var/containers/Bundle/Application/7AB1B6B1-534C-4BF9-A7EB-BE2BD4C13043/Snapchat.app/Snapchat
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


#import <Snapchat/Snapchat-Structs.h>
@class NSString, NSMutableDictionary, SCQueuePerformer;

@interface SCSnapTokenTokenStorage : NSObject {

	BOOL _invalidated;
	BOOL _keychainFetchNeeded;
	NSString* _refreshToken;
	NSMutableDictionary* _accessTokens;
	SCQueuePerformer* _performer;

}

@property (nonatomic,retain) NSString * refreshToken;                           //@synthesize refreshToken=_refreshToken - In the implementation block
@property (nonatomic,readonly) NSMutableDictionary * accessTokens;              //@synthesize accessTokens=_accessTokens - In the implementation block
@property (assign,nonatomic) BOOL invalidated;                                  //@synthesize invalidated=_invalidated - In the implementation block
@property (assign,nonatomic) BOOL keychainFetchNeeded;                          //@synthesize keychainFetchNeeded=_keychainFetchNeeded - In the implementation block
@property (nonatomic,readonly) SCQueuePerformer * performer;                    //@synthesize performer=_performer - In the implementation block
+(id)refreshTokenKeychainEntryForUserId:(id)arg1 ;
+(id)accessTokenKeychainEntryForUserId:(id)arg1 accessType:(unsigned long long)arg2 ;
-(SCQueuePerformer *)performer;
-(void)setSnapSessionSyncWithRefreshToken:(id)arg1 accessTokens:(NSDictionary*)arg2 userId:(id)arg3 ;
-(void)clearInvalidAccessTokenAsyncWithUserId:(id)arg1 token:(id)arg2 accessType:(unsigned long long)arg3 ;
-(void)handleInvalidationSyncForUserId:(id)arg1 ;
-(void)getAccessTokenAsyncForAccessType:(unsigned long long)arg1 userId:(id)arg2 completionPerformer:(id)arg3 completion:(/*^block*/id)arg4 ;
-(void)getRefreshTokenAsyncWithCompletionPerformer:(id)arg1 userId:(id)arg2 completion:(/*^block*/id)arg3 ;
-(void)setAccessTokensSyncWithUserId:(id)arg1 accessTokens:(NSDictionary*)arg2 ;
-(id)_getRefreshTokenForUserId:(id)arg1 ;
-(void)_writeMemAndKeychainWithRefreshToken:(id)arg1 accessTokens:(NSDictionary*)arg2 userId:(id)arg3 ;
-(id)_getAccessTokenForUserId:(id)arg1 accessType:(unsigned long long)arg2 ;
-(void)_writeMemAndKeychainAccessTokens:(NSDictionary*)arg1 userId:(id)arg2 ;
-(void)_clearMemAndKeychainAccessTokenWithUserId:(id)arg1 token:(id)arg2 accessType:(unsigned long long)arg3 ;
-(void)_handleInvalidationForUserId:(id)arg1 ;
-(BOOL)keychainFetchNeeded;
-(void)_loadTokensFromKeychainForUserId:(id)arg1 ;
-(NSMutableDictionary *)accessTokens;
-(BOOL)_isValidAccessToken:(id)arg1 accessType:(unsigned long long)arg2 ;
-(void)_writeMemAndKeychainAccessToken:(id)arg1 accessType:(unsigned long long)arg2 userId:(id)arg3 ;
-(void)setKeychainFetchNeeded:(BOOL)arg1 ;
-(void)_writeMemAndKeychainRefreshToken:(id)arg1 userId:(id)arg2 ;
-(void)_loadAccessTokenFromKeyChainForUserId:(id)arg1 accessType:(unsigned long long)arg2 ;
-(id)init;
-(BOOL)invalidated;
-(void)setInvalidated:(BOOL)arg1 ;
-(void)setRefreshToken:(NSString *)arg1 ;
-(NSString *)refreshToken;
@end

