/*
* This header is generated by classdump-dyld 1.0
* on Saturday, May 19, 2018 at 4:52:16 PM Eastern Daylight Time
* Operating System: Version 10.2 (Build 14C92)
* Image Source: /var/containers/Bundle/Application/7AB1B6B1-534C-4BF9-A7EB-BE2BD4C13043/Snapchat.app/Snapchat
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <Snapchat/SCSpectaclesBluetoothMonitorDelegate.h>
#import <Snapchat/SCSpectaclesPairingResponseHandler.h>

@protocol SCSpectaclesPairingBTConnectorDelegate;
@class NSString, SCQueuePerformer, SCSpectaclesBluetoothMonitor;

@interface SCSpectaclesPairingBTConnector : NSObject <SCSpectaclesBluetoothMonitorDelegate, SCSpectaclesPairingResponseHandler> {

	NSString* _serialNumber;
	NSString* _displayName;
	SCQueuePerformer* _performer;
	id<SCSpectaclesPairingBTConnectorDelegate> _delegate;
	SCSpectaclesBluetoothMonitor* _monitor;

}

@property (nonatomic,retain) NSString * serialNumber;                                                 //@synthesize serialNumber=_serialNumber - In the implementation block
@property (nonatomic,retain) NSString * displayName;                                                  //@synthesize displayName=_displayName - In the implementation block
@property (nonatomic,retain) SCQueuePerformer * performer;                                            //@synthesize performer=_performer - In the implementation block
@property (assign,nonatomic,__weak) id<SCSpectaclesPairingBTConnectorDelegate> delegate;              //@synthesize delegate=_delegate - In the implementation block
@property (nonatomic,retain) SCSpectaclesBluetoothMonitor * monitor;                                  //@synthesize monitor=_monitor - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(id)_myUUID;
+(id)_shuffle:(char*)arg1 ;
+(id)_notifType1;
+(id)_notifType2;
-(SCQueuePerformer *)performer;
-(void)setPerformer:(SCQueuePerformer *)arg1 ;
-(void)bluetoothDidConnect:(id)arg1 ;
-(void)bluetoothDidDisconnect:(id)arg1 ;
-(void)bluetoothNeedsPicker;
-(void)bluetoothDetectedOverload;
-(void)_handleBluetoothCompletionWithError:(id)arg1 ;
-(void)_forwardNotifications:(id)arg1 ;
-(void)_showBluetoothPicker;
-(void)startConnecting;
-(id)initWithSerialNumber:(id)arg1 displayName:(id)arg2 performer:(id)arg3 delegate:(id)arg4 ;
-(void)setDelegate:(id<SCSpectaclesPairingBTConnectorDelegate>)arg1 ;
-(void)dealloc;
-(id<SCSpectaclesPairingBTConnectorDelegate>)delegate;
-(NSString *)displayName;
-(void)setDisplayName:(NSString *)arg1 ;
-(SCSpectaclesBluetoothMonitor *)monitor;
-(void)handleResponse:(id)arg1 ;
-(NSString *)serialNumber;
-(void)setSerialNumber:(NSString *)arg1 ;
-(void)setMonitor:(SCSpectaclesBluetoothMonitor *)arg1 ;
@end

