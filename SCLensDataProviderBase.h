/*
* This header is generated by classdump-dyld 1.0
* on Saturday, May 19, 2018 at 4:52:38 PM Eastern Daylight Time
* Operating System: Version 10.2 (Build 14C92)
* Image Source: /var/containers/Bundle/Application/7AB1B6B1-534C-4BF9-A7EB-BE2BD4C13043/Snapchat.app/Snapchat
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <Snapchat/SCLensDataFetcherListenerV2.h>
#import <Snapchat/SCTimeProfilable.h>
#import <Snapchat/SCLensDataProviderProtocol.h>

@class SCUserSession, SCLensMemoryMapStorage, SCLens, NSMutableSet, SCLensDataProviderListenerAnnouncer, NSArray, NSString;

@interface SCLensDataProviderBase : NSObject <SCLensDataFetcherListenerV2, SCTimeProfilable, SCLensDataProviderProtocol> {

	SCUserSession* _userSession;
	SCLensMemoryMapStorage* _lensMemoryStorage;
	SCLens* _selectedLens;
	NSMutableSet* _tokens;
	NSMutableSet* _lensIdsWithInvalidContent;
	NSMutableSet* _lensIdsForLoadingImages;
	NSMutableSet* _lensIdsForLoadingContent;
	NSMutableSet* _lensIdsForLoadingFilterOverlays;
	NSMutableSet* _lensIdsForLoadingAssets;
	NSMutableSet* _lensIdsForLoadedAssets;
	SCLensDataProviderListenerAnnouncer* _announcer;
	NSArray* _downloadableLenses;

}

@property (nonatomic,readonly) BOOL updating; 
@property (nonatomic,readonly) SCLensDataProviderListenerAnnouncer * announcer;              //@synthesize announcer=_announcer - In the implementation block
@property (nonatomic,retain) NSArray * downloadableLenses;                                   //@synthesize downloadableLenses=_downloadableLenses - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(int)context;
-(SCLensDataProviderListenerAnnouncer *)announcer;
-(id)initWithUserSession:(id)arg1 ;
-(void)lensDataFetcher:(id)arg1 willStartLoadingContentForLens:(id)arg2 ;
-(void)lensDataFetcher:(id)arg1 didFinishLoadingContentForLens:(id)arg2 contentPath:(id)arg3 error:(id)arg4 ;
-(void)lensDataFetcher:(id)arg1 willStartLoadingImageForLens:(id)arg2 ;
-(void)lensDataFetcher:(id)arg1 didFinishLoadingImageForLens:(id)arg2 image:(id)arg3 error:(id)arg4 ;
-(void)lensDataFetcher:(id)arg1 willStartLoadingAsset:(id)arg2 ;
-(void)lensDataFetcher:(id)arg1 didFinishLoadingContentForAsset:(id)arg2 content:(id)arg3 error:(id)arg4 ;
-(void)lensDataFetcher:(id)arg1 willStartLoadingFilterOverlayImagePathForLens:(id)arg2 ;
-(void)lensDataFetcher:(id)arg1 didFinishLoadingFilterOverlayImageForLens:(id)arg2 imagePath:(id)arg3 error:(id)arg4 ;
-(id)applicableContext;
-(id)originalLens;
-(id)selectedLens;
-(void)fetchLensesIfNeeded;
-(BOOL)isFetchingLens:(id)arg1 ;
-(void)fetchLens:(id)arg1 ;
-(void)setSelectedLens:(id)arg1 ;
-(id)startUpdatingLensData;
-(BOOL)isRegressorNeeded;
-(void)stopUpdatingLensDataWithToken:(id)arg1 ;
-(void)updateLenses;
-(void)setDownloadableLenses:(NSArray *)arg1 ;
-(NSArray *)downloadableLenses;
-(void)fetchDownloadableLenses;
-(void)updateDownloadableData;
-(void)didStopUpdatingLensData;
-(void)reachabilityStatusChangedNotification:(id)arg1 ;
-(void)addToken:(id)arg1 ;
-(void)removeToken:(id)arg1 ;
-(BOOL)isLensWithInvalidContent:(id)arg1 ;
-(void)didUpdateContentForLens:(id)arg1 ;
-(BOOL)isNewLens:(id)arg1 ;
-(void)dealloc;
-(void)addListener:(id)arg1 ;
-(void)removeListener:(id)arg1 ;
-(BOOL)updating;
@end

