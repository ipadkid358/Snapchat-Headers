/*
* This header is generated by classdump-dyld 1.0
* on Saturday, May 19, 2018 at 4:52:47 PM Eastern Daylight Time
* Operating System: Version 10.2 (Build 14C92)
* Image Source: /var/containers/Bundle/Application/7AB1B6B1-534C-4BF9-A7EB-BE2BD4C13043/Snapchat.app/Snapchat
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <Snapchat/Snapchat-Structs.h>
#import <Snapchat/SCSmartSwipeFilterView.h>
#import <Snapchat/SCImageProcessVideoPlaybackSessionListener.h>
#import <Snapchat/SCVideoTrackerDelegate.h>
#import <Snapchat/SCMultiSnapV2PlayerHandler.h>

@class SCMediaFilterView, AVAsset, AVPlayer, SCImageProcessVideoPlaybackSession, SCImageProcessVideoPlaybackSessionListenerAnnouncer, NSArray, SCAudioProcessor, NSString, NSMutableIndexSet, NSData, SCImageProcessCommand, SCPreviewLogger, SCVideoTracker;

@interface SCSmartVideoSwipeFilterView : SCSmartSwipeFilterView <SCImageProcessVideoPlaybackSessionListener, SCVideoTrackerDelegate, SCMultiSnapV2PlayerHandler> {

	SCMediaFilterView* _videoMediaView;
	AVAsset* _videoAsset;
	AVPlayer* _videoPlayer;
	AVPlayer* _reverseAudioPlayer;
	SCImageProcessVideoPlaybackSession* _videoPlaybackSession;
	SCImageProcessVideoPlaybackSessionListenerAnnouncer* _videoPlaybackSessionAnnouncer;
	double _videoPlaybackTimeScale;
	BOOL _rewindingToBegining;
	/*^block*/id _rewindingToBeginningCompletion;
	BOOL _fastForwardingToEnd;
	/*^block*/id _fastForwardingToEndCompletion;
	BOOL _didProcessFirstFrame;
	NSArray* _mediaFilterCommands;
	NSArray* _mediaEditingCommands;
	SCAudioProcessor* _audioProcessor;
	NSString* _audioProcessorFilterStyleId;
	BOOL _audioProcessorApplied;
	BOOL _isMultiSnapPlayback;
	long long _currentlyPlayingSnap;
	BOOL _didDeleteTimeRange;
	BOOL _shouldScaleThumbnails;
	NSArray* _multiSnapTimeRanges;
	NSMutableIndexSet* _selectedSnaps;
	double _multiSnapSeekingStartTime;
	NSData* _pixelationMaskData;
	long long _pixelType;
	CGSize _maskSize;
	BOOL _isDancingGhostAnimating;
	SCImageProcessCommand* _unfilteredCommand;
	SCPreviewLogger* _previewLogger;
	SCVideoTracker* _videoTracker;
	NSData* _reversedAudioData;
	AVAsset* _backgroundAudioAsset;
	SCD_Struct_LS191 _lastFrameTime;

}

@property (assign,nonatomic,__weak) id<SCSmartVideoSwipeFilterViewDelegate> delegate; 
@property (nonatomic,readonly) SCVideoTracker * videoTracker;                                      //@synthesize videoTracker=_videoTracker - In the implementation block
@property (nonatomic,readonly) SCD_Struct_LS191 lastFrameTime;                                     //@synthesize lastFrameTime=_lastFrameTime - In the implementation block
@property (nonatomic,retain) NSData * reversedAudioData;                                           //@synthesize reversedAudioData=_reversedAudioData - In the implementation block
@property (nonatomic,retain) AVAsset * backgroundAudioAsset;                                       //@synthesize backgroundAudioAsset=_backgroundAudioAsset - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
-(void)setViewportTransform:(CGAffineTransform)arg1 ;
-(void)setBackgroundBlackValue:(double)arg1 duration:(double)arg2 ;
-(void)videoPlaybackSessionWillLoopVideo:(id)arg1 currentPlayerTime:(SCD_Struct_LS191)arg2 ;
-(void)videoPlaybackSession:(id)arg1 willRenderFrame:(CVBufferRef)arg2 atTime:(SCD_Struct_LS191)arg3 ;
-(void)videoPlaybackSession:(id)arg1 didRenderFrameAtTime:(SCD_Struct_LS191)arg2 ;
-(void)setBackgroundAudioAsset:(AVAsset *)arg1 ;
-(AVAsset *)backgroundAudioAsset;
-(id)thumbnailFuturesAtTimes:(id)arg1 ;
-(void)updateMultiSnapTimeRanges:(id)arg1 includesDeletion:(BOOL)arg2 ;
-(void)stopPlayingAndSeekSmoothlyToSeconds:(double)arg1 ;
-(void)resumeVideo;
-(void)setSnapAtIndex:(long long)arg1 enabled:(BOOL)arg2 ;
-(void)videoTracker:(id)arg1 rewindingTargetNeedToStopRewinding:(long long)arg2 ;
-(id)selectedSnaps;
-(void)takeScreenshotWithCompletionHandler:(/*^block*/id)arg1 ;
-(SCVideoTracker *)videoTracker;
-(void)addVideoPlaybackSessionListener:(id)arg1 ;
-(long long)currentSnapIndex;
-(long long)currentFilterSpeedForType:(long long)arg1 ;
-(double)currentVideoPlaybackRate;
-(void)enableMultiSnapWithTimeRanges:(id)arg1 shouldScaleThumbnails:(BOOL)arg2 ;
-(void)showVideo;
-(void)clearStackedFilters;
-(void)replaceFiltersWithState:(id)arg1 lastState:(id)arg2 ;
-(void)resetLayoutWithOrientation:(long long)arg1 ;
-(void)updatePlaybackSessionMediaEditingCommandsWithPixelationMaskData:(id)arg1 pixelType:(long long)arg2 maskSize:(CGSize)arg3 ;
-(void)cancelRewinding;
-(void)rewindToBeginningAndResume:(/*^block*/id)arg1 ;
-(void)fastForwardToEndAndResume:(/*^block*/id)arg1 ;
-(void)setDancingGhostAnimating:(BOOL)arg1 ;
-(id)initWithFrame:(CGRect)arg1 filterArranger:(id)arg2 commonLoggingParameters:(id)arg3 previewLogger:(id)arg4 geofilterLogger:(id)arg5 videoPlaybackQuality:(unsigned long long)arg6 isLagunaMedia:(BOOL)arg7 userSession:(id)arg8 ;
-(void)addVideoOverlayView:(id)arg1 ;
-(void)removeStackedFilterForType:(long long)arg1 ;
-(void)setReversedAudioData:(NSData *)arg1 ;
-(BOOL)isReverseMotionFilterSelected;
-(void)setAudioProcessorFilterStyleId:(id)arg1 ;
-(void)updateLensProcessingCommandWithLens:(id)arg1 recordingMetadata:(id)arg2 lensCommandDelegate:(id)arg3 ;
-(void)seekToStartOfSnapAtIndex:(long long)arg1 ;
-(void)updateMediaFiltersAndCommands;
-(void)updateMediaFilterMaskForItem:(id)arg1 relativeOffset:(double)arg2 ;
-(void)_updateMediaEditingCommands;
-(void)_resetOverlayLookAndPlaybackSessionSpeed;
-(void)_updateVideoLoopStartTimestamp;
-(long long)_nextSnapIndexForSnapAtIndex:(long long)arg1 ;
-(void)_finishRewindingToBeginning;
-(BOOL)_shouldUpdateFilterAlphaStatusForType:(long long)arg1 ;
-(void)_setupReverseAudioPlayer;
-(NSData *)reversedAudioData;
-(void)dealloc;
-(void)scrollViewWillBeginDragging:(id)arg1 ;
-(void)scrollViewDidEndDecelerating:(id)arg1 ;
-(double)duration;
-(void)setVolume:(double)arg1 ;
-(void)setVideoAsset:(id)arg1 ;
-(void)stopVideo;
-(SCD_Struct_LS191)lastFrameTime;
-(void)pauseVideo;
@end

