/*
* This header is generated by classdump-dyld 1.0
* on Saturday, May 19, 2018 at 4:52:54 PM Eastern Daylight Time
* Operating System: Version 10.2 (Build 14C92)
* Image Source: /var/containers/Bundle/Application/7AB1B6B1-534C-4BF9-A7EB-BE2BD4C13043/Snapchat.app/Snapchat
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@class NSOutputStream, NSData, NSString, GPBMessage, GPBEnumDescriptor;

typedef struct scoped_refptr<net::HttpProtocolHandlerCore> {
	HttpProtocolHandlerCore ptr_;
} scoped_refptr<net::HttpProtocolHandlerCore>;

typedef struct Time {
	long long us_;
} Time;

typedef struct {
	unsigned field1;
	unsigned field2;
	unsigned field3;
} SCD_Struct_CL2;

typedef struct {
	void field1;
	unsigned long long field2;
	void field3;
	void field4;
	void field5;
} SCD_Struct_CL3;

typedef struct {
	char field1[33];
	BOOL field2;
	SCD_Struct_CL2 field3;
	SCD_Struct_CL2 field4;
	SCD_Struct_CL3 field5;
	unsigned char field6;
	unsigned long field7;
	unsigned short field8;
	M field9;
	a field10;
	char field11;
	h field12;
	O field13;
	unsigned short field14;
	long field15;
	int field16;
	char field17;
	e field18;
	long long field19;
} SCD_Struct_CL4;

typedef struct {
	char* field1;
	void field2;
	BOOL field3;
	void field4;
	char* field5;
	char* field6;
	char* field7;
	char* field8;
	char* field9;
	unsigned field10;
	BOOL field11;
	BOOL field12;
	unsigned field13;
	unsigned field14;
	unsigned field15;
	unsigned field16;
} SCD_Struct_CL5;

typedef struct {
	char* field1;
	char* field2;
	unsigned field3;
	unsigned field4;
} SCD_Struct_CL6;

typedef struct CGSize {
	double width;
	double height;
} CGSize;

typedef struct __SecCertificate* SecCertificateRef;

typedef struct __SecTrust* SecTrustRef;

typedef struct {
	unsigned major;
	unsigned minor;
	unsigned bugfix;
} SCD_Struct_FA10;

typedef struct CLSMachOFile {
	int fd;
	unsigned long long mappedSize;
	void mappedFile;
} CLSMachOFile;

typedef struct CLSMachOSlice {
	void startAddress;
	int cputype;
	int cpusubtype;
} CLSMachOSlice;

typedef struct _NSZone* NSZoneRef;

typedef struct _compressed_pair<rtc::FileRotatingLogSink *, std::__1::default_delete<rtc::FileRotatingLogSink> > {
	FileRotatingLogSink __first_;
} compressed_pair<rtc::FileRotatingLogSink *, std::__1::default_delete<rtc::FileRotatingLogSink> >;

typedef struct unique_ptr<rtc::FileRotatingLogSink, std::__1::default_delete<rtc::FileRotatingLogSink> > {
	compressed_pair<rtc::FileRotatingLogSink *, std::__1::default_delete<rtc::FileRotatingLogSink> > __ptr_;
} unique_ptr<rtc::FileRotatingLogSink, std::__1::default_delete<rtc::FileRotatingLogSink> >;

typedef struct shared_ptr<talkcorev3::AsyncTask> {
	AsyncTask __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<talkcorev3::AsyncTask>;

typedef struct shared_ptr<djinni::ProxyCache<djinni::CppProxyCacheTraits>::Pimpl> {
	Pimpl __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<djinni::ProxyCache<djinni::CppProxyCacheTraits>::Pimpl>;

typedef struct Handle<std::__1::shared_ptr<talkcorev3::AsyncTask>, std::__1::shared_ptr<talkcorev3::AsyncTask> > {
	shared_ptr<djinni::ProxyCache<djinni::CppProxyCacheTraits>::Pimpl> m_cache;
	shared_ptr<talkcorev3::AsyncTask> m_obj;
} Handle<std::__1::shared_ptr<talkcorev3::AsyncTask>, std::__1::shared_ptr<talkcorev3::AsyncTask> >;

typedef struct shared_ptr<talkcorev3::CallingManager> {
	CallingManager __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<talkcorev3::CallingManager>;

typedef struct Handle<std::__1::shared_ptr<talkcorev3::CallingManager>, std::__1::shared_ptr<talkcorev3::CallingManager> > {
	shared_ptr<djinni::ProxyCache<djinni::CppProxyCacheTraits>::Pimpl> m_cache;
	shared_ptr<talkcorev3::CallingManager> m_obj;
} Handle<std::__1::shared_ptr<talkcorev3::CallingManager>, std::__1::shared_ptr<talkcorev3::CallingManager> >;

typedef struct shared_ptr<talkcorev3::CompletionHandler> {
	CompletionHandler __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<talkcorev3::CompletionHandler>;

typedef struct Handle<std::__1::shared_ptr<talkcorev3::CompletionHandler>, std::__1::shared_ptr<talkcorev3::CompletionHandler> > {
	shared_ptr<djinni::ProxyCache<djinni::CppProxyCacheTraits>::Pimpl> m_cache;
	shared_ptr<talkcorev3::CompletionHandler> m_obj;
} Handle<std::__1::shared_ptr<talkcorev3::CompletionHandler>, std::__1::shared_ptr<talkcorev3::CompletionHandler> >;

typedef struct shared_ptr<talkcorev3::Logger> {
	Logger __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<talkcorev3::Logger>;

typedef struct Handle<std::__1::shared_ptr<talkcorev3::Logger>, std::__1::shared_ptr<talkcorev3::Logger> > {
	shared_ptr<djinni::ProxyCache<djinni::CppProxyCacheTraits>::Pimpl> m_cache;
	shared_ptr<talkcorev3::Logger> m_obj;
} Handle<std::__1::shared_ptr<talkcorev3::Logger>, std::__1::shared_ptr<talkcorev3::Logger> >;

typedef struct shared_ptr<talkcorev3::MetricsMetadataContainer> {
	MetricsMetadataContainer __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<talkcorev3::MetricsMetadataContainer>;

typedef struct Handle<std::__1::shared_ptr<talkcorev3::MetricsMetadataContainer>, std::__1::shared_ptr<talkcorev3::MetricsMetadataContainer> > {
	shared_ptr<djinni::ProxyCache<djinni::CppProxyCacheTraits>::Pimpl> m_cache;
	shared_ptr<talkcorev3::MetricsMetadataContainer> m_obj;
} Handle<std::__1::shared_ptr<talkcorev3::MetricsMetadataContainer>, std::__1::shared_ptr<talkcorev3::MetricsMetadataContainer> >;

typedef struct shared_ptr<talkcorev3::MetricsReporter> {
	MetricsReporter __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<talkcorev3::MetricsReporter>;

typedef struct Handle<std::__1::shared_ptr<talkcorev3::MetricsReporter>, std::__1::shared_ptr<talkcorev3::MetricsReporter> > {
	shared_ptr<djinni::ProxyCache<djinni::CppProxyCacheTraits>::Pimpl> m_cache;
	shared_ptr<talkcorev3::MetricsReporter> m_obj;
} Handle<std::__1::shared_ptr<talkcorev3::MetricsReporter>, std::__1::shared_ptr<talkcorev3::MetricsReporter> >;

typedef struct shared_ptr<talkcorev3::Session> {
	Session __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<talkcorev3::Session>;

typedef struct Handle<std::__1::shared_ptr<talkcorev3::Session>, std::__1::shared_ptr<talkcorev3::Session> > {
	shared_ptr<djinni::ProxyCache<djinni::CppProxyCacheTraits>::Pimpl> m_cache;
	shared_ptr<talkcorev3::Session> m_obj;
} Handle<std::__1::shared_ptr<talkcorev3::Session>, std::__1::shared_ptr<talkcorev3::Session> >;

typedef struct shared_ptr<talkcorev3::SessionDelegate> {
	SessionDelegate __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<talkcorev3::SessionDelegate>;

typedef struct Handle<std::__1::shared_ptr<talkcorev3::SessionDelegate>, std::__1::shared_ptr<talkcorev3::SessionDelegate> > {
	shared_ptr<djinni::ProxyCache<djinni::CppProxyCacheTraits>::Pimpl> m_cache;
	shared_ptr<talkcorev3::SessionDelegate> m_obj;
} Handle<std::__1::shared_ptr<talkcorev3::SessionDelegate>, std::__1::shared_ptr<talkcorev3::SessionDelegate> >;

typedef struct shared_ptr<talkcorev3::TalkCore> {
	TalkCore __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<talkcorev3::TalkCore>;

typedef struct Handle<std::__1::shared_ptr<talkcorev3::TalkCore>, std::__1::shared_ptr<talkcorev3::TalkCore> > {
	shared_ptr<djinni::ProxyCache<djinni::CppProxyCacheTraits>::Pimpl> m_cache;
	shared_ptr<talkcorev3::TalkCore> m_obj;
} Handle<std::__1::shared_ptr<talkcorev3::TalkCore>, std::__1::shared_ptr<talkcorev3::TalkCore> >;

typedef struct shared_ptr<talkcorev3::TalkCoreDelegate> {
	TalkCoreDelegate __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<talkcorev3::TalkCoreDelegate>;

typedef struct Handle<std::__1::shared_ptr<talkcorev3::TalkCoreDelegate>, std::__1::shared_ptr<talkcorev3::TalkCoreDelegate> > {
	shared_ptr<djinni::ProxyCache<djinni::CppProxyCacheTraits>::Pimpl> m_cache;
	shared_ptr<talkcorev3::TalkCoreDelegate> m_obj;
} Handle<std::__1::shared_ptr<talkcorev3::TalkCoreDelegate>, std::__1::shared_ptr<talkcorev3::TalkCoreDelegate> >;

typedef struct shared_ptr<addlive::DecoderCallback> {
	DecoderCallback __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<addlive::DecoderCallback>;

typedef struct Handle<std::__1::shared_ptr<addlive::DecoderCallback>, std::__1::shared_ptr<addlive::DecoderCallback> > {
	shared_ptr<djinni::ProxyCache<djinni::CppProxyCacheTraits>::Pimpl> m_cache;
	shared_ptr<addlive::DecoderCallback> m_obj;
} Handle<std::__1::shared_ptr<addlive::DecoderCallback>, std::__1::shared_ptr<addlive::DecoderCallback> >;

typedef struct shared_ptr<addlive::DirectRendererCallback> {
	DirectRendererCallback __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<addlive::DirectRendererCallback>;

typedef struct Handle<std::__1::shared_ptr<addlive::DirectRendererCallback>, std::__1::shared_ptr<addlive::DirectRendererCallback> > {
	shared_ptr<djinni::ProxyCache<djinni::CppProxyCacheTraits>::Pimpl> m_cache;
	shared_ptr<addlive::DirectRendererCallback> m_obj;
} Handle<std::__1::shared_ptr<addlive::DirectRendererCallback>, std::__1::shared_ptr<addlive::DirectRendererCallback> >;

typedef struct shared_ptr<addlive::EncoderCallback> {
	EncoderCallback __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<addlive::EncoderCallback>;

typedef struct Handle<std::__1::shared_ptr<addlive::EncoderCallback>, std::__1::shared_ptr<addlive::EncoderCallback> > {
	shared_ptr<djinni::ProxyCache<djinni::CppProxyCacheTraits>::Pimpl> m_cache;
	shared_ptr<addlive::EncoderCallback> m_obj;
} Handle<std::__1::shared_ptr<addlive::EncoderCallback>, std::__1::shared_ptr<addlive::EncoderCallback> >;

typedef struct shared_ptr<addlive::NumberResponder> {
	NumberResponder __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<addlive::NumberResponder>;

typedef struct Handle<std::__1::shared_ptr<addlive::NumberResponder>, std::__1::shared_ptr<addlive::NumberResponder> > {
	shared_ptr<djinni::ProxyCache<djinni::CppProxyCacheTraits>::Pimpl> m_cache;
	shared_ptr<addlive::NumberResponder> m_obj;
} Handle<std::__1::shared_ptr<addlive::NumberResponder>, std::__1::shared_ptr<addlive::NumberResponder> >;

typedef struct shared_ptr<addlive::Service> {
	Service __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<addlive::Service>;

typedef struct Handle<std::__1::shared_ptr<addlive::Service>, std::__1::shared_ptr<addlive::Service> > {
	shared_ptr<djinni::ProxyCache<djinni::CppProxyCacheTraits>::Pimpl> m_cache;
	shared_ptr<addlive::Service> m_obj;
} Handle<std::__1::shared_ptr<addlive::Service>, std::__1::shared_ptr<addlive::Service> >;

typedef struct shared_ptr<addlive::ServiceListener> {
	ServiceListener __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<addlive::ServiceListener>;

typedef struct Handle<std::__1::shared_ptr<addlive::ServiceListener>, std::__1::shared_ptr<addlive::ServiceListener> > {
	shared_ptr<djinni::ProxyCache<djinni::CppProxyCacheTraits>::Pimpl> m_cache;
	shared_ptr<addlive::ServiceListener> m_obj;
} Handle<std::__1::shared_ptr<addlive::ServiceListener>, std::__1::shared_ptr<addlive::ServiceListener> >;

typedef struct shared_ptr<addlive::StringDictResponder> {
	StringDictResponder __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<addlive::StringDictResponder>;

typedef struct Handle<std::__1::shared_ptr<addlive::StringDictResponder>, std::__1::shared_ptr<addlive::StringDictResponder> > {
	shared_ptr<djinni::ProxyCache<djinni::CppProxyCacheTraits>::Pimpl> m_cache;
	shared_ptr<addlive::StringDictResponder> m_obj;
} Handle<std::__1::shared_ptr<addlive::StringDictResponder>, std::__1::shared_ptr<addlive::StringDictResponder> >;

typedef struct shared_ptr<addlive::StringListResponder> {
	StringListResponder __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<addlive::StringListResponder>;

typedef struct Handle<std::__1::shared_ptr<addlive::StringListResponder>, std::__1::shared_ptr<addlive::StringListResponder> > {
	shared_ptr<djinni::ProxyCache<djinni::CppProxyCacheTraits>::Pimpl> m_cache;
	shared_ptr<addlive::StringListResponder> m_obj;
} Handle<std::__1::shared_ptr<addlive::StringListResponder>, std::__1::shared_ptr<addlive::StringListResponder> >;

typedef struct shared_ptr<addlive::StringResponder> {
	StringResponder __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<addlive::StringResponder>;

typedef struct Handle<std::__1::shared_ptr<addlive::StringResponder>, std::__1::shared_ptr<addlive::StringResponder> > {
	shared_ptr<djinni::ProxyCache<djinni::CppProxyCacheTraits>::Pimpl> m_cache;
	shared_ptr<addlive::StringResponder> m_obj;
} Handle<std::__1::shared_ptr<addlive::StringResponder>, std::__1::shared_ptr<addlive::StringResponder> >;

typedef struct shared_ptr<addlive::VoidResponder> {
	VoidResponder __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<addlive::VoidResponder>;

typedef struct Handle<std::__1::shared_ptr<addlive::VoidResponder>, std::__1::shared_ptr<addlive::VoidResponder> > {
	shared_ptr<djinni::ProxyCache<djinni::CppProxyCacheTraits>::Pimpl> m_cache;
	shared_ptr<addlive::VoidResponder> m_obj;
} Handle<std::__1::shared_ptr<addlive::VoidResponder>, std::__1::shared_ptr<addlive::VoidResponder> >;

typedef struct __CVOpenGLESTextureCache* CVOpenGLESTextureCacheRef;

typedef struct TextureSet {
	3I textures;
	unsigned ytex;
	unsigned utex;
	unsigned vtex;
	unsigned ychn;
	unsigned uchn;
	unsigned vchn;
	unsigned width;
	unsigned height;
	float yscale;
	float uscale;
	float vscale;
	BOOL texcreated;
} TextureSet;

typedef struct opaqueCMSampleBuffer* opaqueCMSampleBufferRef;

typedef struct type {
	unsigned char __lx[24];
} type;

typedef struct function<void (const adl::netio::HttpResult &)> {
	type __buf_;
	__base<void (const adl::netio::HttpResult &)> __f_;
} function<void (const adl::netio::HttpResult &)>;

typedef struct _long {
	char* __data_;
	unsigned long long __size_;
	unsigned long long __cap_;
} long;

typedef struct {
	unsigned char __size_;
} SCD_Struct_As63;

typedef struct _raw {
	unsigned long long __words[3];
} raw;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::less<std::__1::basic_string<char> >, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::less<std::__1::basic_string<char> >, true> >;

typedef struct _tree_end_node<std::__1::__tree_node_base<void *> *> {
	__tree_node_base<void *> __left_;
} tree_end_node<std::__1::__tree_node_base<void *> *>;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> > >;

typedef struct _tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> > > > {
	__tree_end_node<std::__1::__tree_node_base<void *> *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::less<std::__1::basic_string<char> >, true> > __pair3_;
} tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> > > >;

typedef struct map<std::__1::basic_string<char>, std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char> > > > {
	tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> > > > __tree_;
} map<std::__1::basic_string<char>, std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char> > > >;

typedef struct _short {
	char __data_[23];
	SCD_Struct_As63 ;
} short;

typedef struct _rep {
	/*function pointer*/void* ;
	long __l;
	short __s;
	const aw) __r;
} rep;

typedef struct _compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > {
	const ep __first_;
} compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >;

typedef struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {
	compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > __r_;
} basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >;

typedef struct HttpResult {
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > body;
	int resultCode;
	map<std::__1::basic_string<char>, std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char> > > > headers;
} HttpResult;

typedef struct CLLocationCoordinate2D {
	double latitude;
	double longitude;
} CLLocationCoordinate2D;

typedef struct MGLOfflinePackProgress {
	unsigned long long countOfResourcesCompleted;
	unsigned long long countOfBytesCompleted;
	unsigned long long countOfTilesCompleted;
	unsigned long long countOfTileBytesCompleted;
	unsigned long long countOfResourcesExpected;
	unsigned long long maximumResourcesExpected;
} MGLOfflinePackProgress;

typedef struct CGColor* CGColorRef;

typedef struct CGPath* CGPathRef;

typedef struct MGLCoordinateBounds {
	CLLocationCoordinate2D sw;
	CLLocationCoordinate2D ne;
} MGLCoordinateBounds;

typedef struct function<mapbox::geometry::point<double> (const mbgl::LatLng &)> {
	type __buf_;
	__base<mapbox::geometry::point<double> (const mbgl::LatLng &)> __f_;
} function<mapbox::geometry::point<double> (const mbgl::LatLng &)>;

typedef struct shared_ptr<mbgl::ThreadPool> {
	ThreadPool __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<mbgl::ThreadPool>;

typedef struct _compressed_pair<mbgl::MapSnapshotter *, std::__1::default_delete<mbgl::MapSnapshotter> > {
	MapSnapshotter __first_;
} compressed_pair<mbgl::MapSnapshotter *, std::__1::default_delete<mbgl::MapSnapshotter> >;

typedef struct unique_ptr<mbgl::MapSnapshotter, std::__1::default_delete<mbgl::MapSnapshotter> > {
	compressed_pair<mbgl::MapSnapshotter *, std::__1::default_delete<mbgl::MapSnapshotter> > __ptr_;
} unique_ptr<mbgl::MapSnapshotter, std::__1::default_delete<mbgl::MapSnapshotter> >;

typedef struct _compressed_pair<mbgl::Actor<std::__1::function<void (std::exception_ptr, mbgl::Image<mbgl::ImageAlphaMode::Premultiplied>, std::__1::vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > >, std::__1::function<mapbox::geometry::point<double> (const mbgl::LatLng &)>)> > *, std::__1::default_delete<mbgl::Actor<std::__1::function<void (std::exception_ptr, mbgl::Image<mbgl::ImageAlphaMode::Premultiplied>, std::__1::vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > >, std::__1::function<mapbox::geometry::point<double> (const mbgl::LatLng &)>)> > > > {
	Actor<std::__1::function<void (std::exception_ptr, mbgl::Image<mbgl::ImageAlphaMode::Premultiplied>, std::__1::vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > >, std::__1::function<mapbox::geometry::point<double> (const mbgl::LatLng &)>)> > __first_;
} compressed_pair<mbgl::Actor<std::__1::function<void (std::exception_ptr, mbgl::Image<mbgl::ImageAlphaMode::Premultiplied>, std::__1::vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > >, std::__1::function<mapbox::geometry::point<double> (const mbgl::LatLng &)>)> > *, std::__1::default_delete<mbgl::Actor<std::__1::function<void (std::exception_ptr, mbgl::Image<mbgl::ImageAlphaMode::Premultiplied>, std::__1::vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > >, std::__1::function<mapbox::geometry::point<double> (const mbgl::LatLng &)>)> > > >;

typedef struct unique_ptr<mbgl::Actor<std::__1::function<void (std::exception_ptr, mbgl::Image<mbgl::ImageAlphaMode::Premultiplied>, std::__1::vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > >, std::__1::function<mapbox::geometry::point<double> (const mbgl::LatLng &)>)> >, std::__1::default_delete<mbgl::Actor<std::__1::function<void (std::exception_ptr, mbgl::Image<mbgl::ImageAlphaMode::Premultiplied>, std::__1::vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > >, std::__1::function<mapbox::geometry::point<double> (const mbgl::LatLng &)>)> > > > {
	compressed_pair<mbgl::Actor<std::__1::function<void (std::exception_ptr, mbgl::Image<mbgl::ImageAlphaMode::Premultiplied>, std::__1::vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > >, std::__1::function<mapbox::geometry::point<double> (const mbgl::LatLng &)>)> > *, std::__1::default_delete<mbgl::Actor<std::__1::function<void (std::exception_ptr, mbgl::Image<mbgl::ImageAlphaMode::Premultiplied>, std::__1::vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > >, std::__1::function<mapbox::geometry::point<double> (const mbgl::LatLng &)>)> > > > __ptr_;
} unique_ptr<mbgl::Actor<std::__1::function<void (std::exception_ptr, mbgl::Image<mbgl::ImageAlphaMode::Premultiplied>, std::__1::vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > >, std::__1::function<mapbox::geometry::point<double> (const mbgl::LatLng &)>)> >, std::__1::default_delete<mbgl::Actor<std::__1::function<void (std::exception_ptr, mbgl::Image<mbgl::ImageAlphaMode::Premultiplied>, std::__1::vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > >, std::__1::function<mapbox::geometry::point<double> (const mbgl::LatLng &)>)> > > >;

typedef struct CGPoint {
	double x;
	double y;
} CGPoint;

typedef struct UIEdgeInsets {
	double top;
	double left;
	double bottom;
	double right;
} UIEdgeInsets;

typedef struct _compressed_pair<mbgl::style::Source *, std::__1::default_delete<mbgl::style::Source> > {
	Source __first_;
} compressed_pair<mbgl::style::Source *, std::__1::default_delete<mbgl::style::Source> >;

typedef struct unique_ptr<mbgl::style::Source, std::__1::default_delete<mbgl::style::Source> > {
	compressed_pair<mbgl::style::Source *, std::__1::default_delete<mbgl::style::Source> > __ptr_;
} unique_ptr<mbgl::style::Source, std::__1::default_delete<mbgl::style::Source> >;

typedef struct LatLng {
	double lat;
	double lon;
} LatLng;

typedef struct LatLngBounds {
	LatLng sw;
	LatLng ne;
} LatLngBounds;

typedef struct optional<mbgl::LatLngBounds> {
	/*function pointer*/void* ;
	char __null_state_;
	LatLngBounds) __val_;
	BOOL __engaged_;
} optional<mbgl::LatLngBounds>;

typedef struct _compressed_pair<CLLocationCoordinate2D *, std::__1::allocator<CLLocationCoordinate2D> > {
	CLLocationCoordinate2D __first_;
} compressed_pair<CLLocationCoordinate2D *, std::__1::allocator<CLLocationCoordinate2D> >;

typedef struct vector<CLLocationCoordinate2D, std::__1::allocator<CLLocationCoordinate2D> > {
	CLLocationCoordinate2D __begin_;
	CLLocationCoordinate2D __end_;
	compressed_pair<CLLocationCoordinate2D *, std::__1::allocator<CLLocationCoordinate2D> > __end_cap_;
} vector<CLLocationCoordinate2D, std::__1::allocator<CLLocationCoordinate2D> >;

typedef struct _compressed_pair<mbgl::style::Layer *, std::__1::default_delete<mbgl::style::Layer> > {
	Layer __first_;
} compressed_pair<mbgl::style::Layer *, std::__1::default_delete<mbgl::style::Layer> >;

typedef struct unique_ptr<mbgl::style::Layer, std::__1::default_delete<mbgl::style::Layer> > {
	compressed_pair<mbgl::style::Layer *, std::__1::default_delete<mbgl::style::Layer> > __ptr_;
} unique_ptr<mbgl::style::Layer, std::__1::default_delete<mbgl::style::Layer> >;

typedef struct _compressed_pair<MGLRenderFrontend *, std::__1::default_delete<MGLRenderFrontend> > {
	MGLRenderFrontend __first_;
} compressed_pair<MGLRenderFrontend *, std::__1::default_delete<MGLRenderFrontend> >;

typedef struct unique_ptr<MGLRenderFrontend, std::__1::default_delete<MGLRenderFrontend> > {
	compressed_pair<MGLRenderFrontend *, std::__1::default_delete<MGLRenderFrontend> > __ptr_;
} unique_ptr<MGLRenderFrontend, std::__1::default_delete<MGLRenderFrontend> >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, MGLAnnotationContext>, void *> *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, MGLAnnotationContext>, void *> *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, MGLAnnotationContext>, std::__1::hash<unsigned int>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, MGLAnnotationContext>, std::__1::hash<unsigned int>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, MGLAnnotationContext>, std::__1::equal_to<unsigned int>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, MGLAnnotationContext>, std::__1::equal_to<unsigned int>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, MGLAnnotationContext>, void *> *> {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, MGLAnnotationContext>, void *> *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, MGLAnnotationContext>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, MGLAnnotationContext>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, MGLAnnotationContext>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, MGLAnnotationContext>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, MGLAnnotationContext>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, MGLAnnotationContext>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, MGLAnnotationContext>, void *> *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, MGLAnnotationContext>, void *> *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, MGLAnnotationContext>, void *> *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, MGLAnnotationContext>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, MGLAnnotationContext>, void *> *> *> > > {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, MGLAnnotationContext>, void *> *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, MGLAnnotationContext>, void *> *> *> > __second_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, MGLAnnotationContext>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, MGLAnnotationContext>, void *> *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, MGLAnnotationContext>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, MGLAnnotationContext>, void *> *> *> > > {
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, MGLAnnotationContext>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, MGLAnnotationContext>, void *> *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, MGLAnnotationContext>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, MGLAnnotationContext>, void *> *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<unsigned int, MGLAnnotationContext>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, MGLAnnotationContext>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, MGLAnnotationContext>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, MGLAnnotationContext> > > {
	unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, MGLAnnotationContext>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, MGLAnnotationContext>, void *> *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, MGLAnnotationContext>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, MGLAnnotationContext>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, MGLAnnotationContext>, std::__1::hash<unsigned int>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, MGLAnnotationContext>, std::__1::equal_to<unsigned int>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<unsigned int, MGLAnnotationContext>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, MGLAnnotationContext>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, MGLAnnotationContext>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, MGLAnnotationContext> > >;

typedef struct unordered_map<unsigned int, MGLAnnotationContext, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, MGLAnnotationContext> > > {
	hash_table<std::__1::__hash_value_type<unsigned int, MGLAnnotationContext>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, MGLAnnotationContext>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, MGLAnnotationContext>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, MGLAnnotationContext> > > __table_;
} unordered_map<unsigned int, MGLAnnotationContext, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, MGLAnnotationContext> > >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<id<MGLAnnotation>, std::__1::__value_type<id<MGLAnnotation>, unsigned int>, std::__1::less<id<MGLAnnotation> >, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<id<MGLAnnotation>, std::__1::__value_type<id<MGLAnnotation>, unsigned int>, std::__1::less<id<MGLAnnotation> >, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id<MGLAnnotation>, unsigned int>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id<MGLAnnotation>, unsigned int>, void *> > >;

typedef struct _tree<std::__1::__value_type<id<MGLAnnotation>, unsigned int>, std::__1::__map_value_compare<id<MGLAnnotation>, std::__1::__value_type<id<MGLAnnotation>, unsigned int>, std::__1::less<id<MGLAnnotation> >, true>, std::__1::allocator<std::__1::__value_type<id<MGLAnnotation>, unsigned int> > > {
	__tree_end_node<std::__1::__tree_node_base<void *> *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id<MGLAnnotation>, unsigned int>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<id<MGLAnnotation>, std::__1::__value_type<id<MGLAnnotation>, unsigned int>, std::__1::less<id<MGLAnnotation> >, true> > __pair3_;
} tree<std::__1::__value_type<id<MGLAnnotation>, unsigned int>, std::__1::__map_value_compare<id<MGLAnnotation>, std::__1::__value_type<id<MGLAnnotation>, unsigned int>, std::__1::less<id<MGLAnnotation> >, true>, std::__1::allocator<std::__1::__value_type<id<MGLAnnotation>, unsigned int> > >;

typedef struct map<id<MGLAnnotation>, unsigned int, std::__1::less<id<MGLAnnotation> >, std::__1::allocator<std::__1::pair<const id<MGLAnnotation>, unsigned int> > > {
	tree<std::__1::__value_type<id<MGLAnnotation>, unsigned int>, std::__1::__map_value_compare<id<MGLAnnotation>, std::__1::__value_type<id<MGLAnnotation>, unsigned int>, std::__1::less<id<MGLAnnotation> >, true>, std::__1::allocator<std::__1::__value_type<id<MGLAnnotation>, unsigned int> > > __tree_;
} map<id<MGLAnnotation>, unsigned int, std::__1::less<id<MGLAnnotation> >, std::__1::allocator<std::__1::pair<const id<MGLAnnotation>, unsigned int> > >;

typedef struct _compressed_pair<unsigned int *, std::__1::allocator<unsigned int> > {
	unsigned __first_;
} compressed_pair<unsigned int *, std::__1::allocator<unsigned int> >;

typedef struct vector<unsigned int, std::__1::allocator<unsigned int> > {
	unsigned __begin_;
	unsigned __end_;
	compressed_pair<unsigned int *, std::__1::allocator<unsigned int> > __end_cap_;
} vector<unsigned int, std::__1::allocator<unsigned int> >;

typedef struct MGLTransition {
	double duration;
	double delay;
} MGLTransition;

typedef struct MGLRow {
	double distance;
	unsigned long long numberOfBars;
} MGLRow;

typedef struct CGVector {
	double dx;
	double dy;
} CGVector;

typedef struct CATransform3D {
	double m11;
	double m12;
	double m13;
	double m14;
	double m21;
	double m22;
	double m23;
	double m24;
	double m31;
	double m32;
	double m33;
	double m34;
	double m41;
	double m42;
	double m43;
	double m44;
} CATransform3D;

typedef struct CGImage* CGImageRef;

typedef struct _compressed_pair<mbgl::Actor<mbgl::ResourceTransform> *, std::__1::default_delete<mbgl::Actor<mbgl::ResourceTransform> > > {
	Actor<mbgl::ResourceTransform> __first_;
} compressed_pair<mbgl::Actor<mbgl::ResourceTransform> *, std::__1::default_delete<mbgl::Actor<mbgl::ResourceTransform> > >;

typedef struct unique_ptr<mbgl::Actor<mbgl::ResourceTransform>, std::__1::default_delete<mbgl::Actor<mbgl::ResourceTransform> > > {
	compressed_pair<mbgl::Actor<mbgl::ResourceTransform> *, std::__1::default_delete<mbgl::Actor<mbgl::ResourceTransform> > > __ptr_;
} unique_ptr<mbgl::Actor<mbgl::ResourceTransform>, std::__1::default_delete<mbgl::Actor<mbgl::ResourceTransform> > >;

typedef struct __SCNetworkReachability* SCNetworkReachabilityRef;

typedef struct shared_ptr<LSAUriDelegateWrapper> {
	LSAUriDelegateWrapper __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<LSAUriDelegateWrapper>;

typedef struct shared_ptr<LSALocalizationDelegateWrapper> {
	LSALocalizationDelegateWrapper __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<LSALocalizationDelegateWrapper>;

typedef struct opaque_pthread_mutex_t {
	long long __sig;
	char __opaque[56];
} opaque_pthread_mutex_t;

typedef struct mutex {
	opaque_pthread_mutex_t __m_;
} mutex;

typedef struct shared_ptr<std::__1::vector<__weak id<LSABitmoji3DComponentListener>, std::__1::allocator<__weak id<LSABitmoji3DComponentListener> > > > {
	vector<__weak id<LSABitmoji3DComponentListener>, std::__1::allocator<__weak id<LSABitmoji3DComponentListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<LSABitmoji3DComponentListener>, std::__1::allocator<__weak id<LSABitmoji3DComponentListener> > > >;

typedef struct shared_ptr<LS::TextureBase> {
	TextureBase __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<LS::TextureBase>;

typedef struct shared_ptr<std::__1::vector<__weak id<LSAGeoDataComponentListener>, std::__1::allocator<__weak id<LSAGeoDataComponentListener> > > > {
	vector<__weak id<LSAGeoDataComponentListener>, std::__1::allocator<__weak id<LSAGeoDataComponentListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<LSAGeoDataComponentListener>, std::__1::allocator<__weak id<LSAGeoDataComponentListener> > > >;

typedef struct _compressed_pair<std::__1::pair<LS::Rect<float>, LS::TouchType> *, std::__1::allocator<std::__1::pair<LS::Rect<float>, LS::TouchType> > > {
	pair<LS::Rect<float>, LS::TouchType> __first_;
} compressed_pair<std::__1::pair<LS::Rect<float>, LS::TouchType> *, std::__1::allocator<std::__1::pair<LS::Rect<float>, LS::TouchType> > >;

typedef struct vector<std::__1::pair<LS::Rect<float>, LS::TouchType>, std::__1::allocator<std::__1::pair<LS::Rect<float>, LS::TouchType> > > {
	pair<LS::Rect<float>, LS::TouchType> __begin_;
	pair<LS::Rect<float>, LS::TouchType> __end_;
	compressed_pair<std::__1::pair<LS::Rect<float>, LS::TouchType> *, std::__1::allocator<std::__1::pair<LS::Rect<float>, LS::TouchType> > > __end_cap_;
} vector<std::__1::pair<LS::Rect<float>, LS::TouchType>, std::__1::allocator<std::__1::pair<LS::Rect<float>, LS::TouchType> > >;

typedef struct TouchHandlingPromise {
	vector<std::__1::pair<LS::Rect<float>, LS::TouchType>, std::__1::allocator<std::__1::pair<LS::Rect<float>, LS::TouchType> > > touchableRects;
} TouchHandlingPromise;

typedef struct shared_ptr<std::__1::vector<__weak id<LSADebugComponentListener>, std::__1::allocator<__weak id<LSADebugComponentListener> > > > {
	vector<__weak id<LSADebugComponentListener>, std::__1::allocator<__weak id<LSADebugComponentListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<LSADebugComponentListener>, std::__1::allocator<__weak id<LSADebugComponentListener> > > >;

typedef struct shared_ptr<LSASnapRecordingDelegateWrapper> {
	LSASnapRecordingDelegateWrapper __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<LSASnapRecordingDelegateWrapper>;

typedef struct shared_ptr<std::__1::vector<__weak id<LSAUserDataComponentListener>, std::__1::allocator<__weak id<LSAUserDataComponentListener> > > > {
	vector<__weak id<LSAUserDataComponentListener>, std::__1::allocator<__weak id<LSAUserDataComponentListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<LSAUserDataComponentListener>, std::__1::allocator<__weak id<LSAUserDataComponentListener> > > >;

typedef struct shared_ptr<LS::SnapcodeAnalyzer> {
	SnapcodeAnalyzer __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<LS::SnapcodeAnalyzer>;

typedef struct shared_ptr<LSASnapcodeDelegateWrapper> {
	LSASnapcodeDelegateWrapper __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<LSASnapcodeDelegateWrapper>;

typedef struct shared_ptr<LSACompassTrackerDelegate> {
	LSACompassTrackerDelegate __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<LSACompassTrackerDelegate>;

typedef struct shared_ptr<LS::TrackingSerializer> {
	TrackingSerializer __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<LS::TrackingSerializer>;

typedef struct shared_ptr<LSADebugDelegateWrapper> {
	LSADebugDelegateWrapper __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<LSADebugDelegateWrapper>;

typedef struct shared_ptr<LSAAnalyticsDelegateWrapper> {
	LSAAnalyticsDelegateWrapper __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<LSAAnalyticsDelegateWrapper>;

typedef struct shared_ptr<std::__1::vector<__weak id<LSASnapRecordingComponentListener>, std::__1::allocator<__weak id<LSASnapRecordingComponentListener> > > > {
	vector<__weak id<LSASnapRecordingComponentListener>, std::__1::allocator<__weak id<LSASnapRecordingComponentListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<LSASnapRecordingComponentListener>, std::__1::allocator<__weak id<LSASnapRecordingComponentListener> > > >;

typedef struct shared_ptr<LSADeviceMotionTrackerDelegate> {
	LSADeviceMotionTrackerDelegate __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<LSADeviceMotionTrackerDelegate>;

typedef struct shared_ptr<std::__1::vector<__weak id<LSATrackingComponentListener>, std::__1::allocator<__weak id<LSATrackingComponentListener> > > > {
	vector<__weak id<LSATrackingComponentListener>, std::__1::allocator<__weak id<LSATrackingComponentListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<LSATrackingComponentListener>, std::__1::allocator<__weak id<LSATrackingComponentListener> > > >;

typedef struct shared_ptr<LSABitmoji3DDelegateWrapper> {
	LSABitmoji3DDelegateWrapper __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<LSABitmoji3DDelegateWrapper>;

typedef struct shared_ptr<LS::CoreManager> {
	CoreManager __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<LS::CoreManager>;

typedef struct shared_ptr<LSALocationTrackerDelegate> {
	LSALocationTrackerDelegate __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<LSALocationTrackerDelegate>;

typedef struct shared_ptr<LSAExpressionsDelegateWrapper> {
	LSAExpressionsDelegateWrapper __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<LSAExpressionsDelegateWrapper>;

typedef struct shared_ptr<LSAPlatformTrackingDelegateWrapper> {
	LSAPlatformTrackingDelegateWrapper __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<LSAPlatformTrackingDelegateWrapper>;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<LS::TrackingRequirement, void *> *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<LS::TrackingRequirement, void *> *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::hash<LS::TrackingRequirement> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::hash<LS::TrackingRequirement> >;

typedef struct _compressed_pair<float, std::__1::equal_to<LS::TrackingRequirement> > {
	float __first_;
} compressed_pair<float, std::__1::equal_to<LS::TrackingRequirement> >;

typedef struct _hash_node_base<std::__1::__hash_node<LS::TrackingRequirement, void *> *> {
	__hash_node_base<std::__1::__hash_node<LS::TrackingRequirement, void *> *> __next_;
} hash_node_base<std::__1::__hash_node<LS::TrackingRequirement, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<LS::TrackingRequirement, void *> *>, std::__1::allocator<std::__1::__hash_node<LS::TrackingRequirement, void *> > > {
	hash_node_base<std::__1::__hash_node<LS::TrackingRequirement, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<LS::TrackingRequirement, void *> *>, std::__1::allocator<std::__1::__hash_node<LS::TrackingRequirement, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<LS::TrackingRequirement, void *> *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<LS::TrackingRequirement, void *> *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<LS::TrackingRequirement, void *> *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<LS::TrackingRequirement, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<LS::TrackingRequirement, void *> *> *> > > {
	__hash_node_base<std::__1::__hash_node<LS::TrackingRequirement, void *> *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<LS::TrackingRequirement, void *> *> *> > __second_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<LS::TrackingRequirement, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<LS::TrackingRequirement, void *> *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<LS::TrackingRequirement, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<LS::TrackingRequirement, void *> *> *> > > {
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<LS::TrackingRequirement, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<LS::TrackingRequirement, void *> *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<LS::TrackingRequirement, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<LS::TrackingRequirement, void *> *> *> > >;

typedef struct _hash_table<LS::TrackingRequirement, std::__1::hash<LS::TrackingRequirement>, std::__1::equal_to<LS::TrackingRequirement>, std::__1::allocator<LS::TrackingRequirement> > {
	unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<LS::TrackingRequirement, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<LS::TrackingRequirement, void *> *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<LS::TrackingRequirement, void *> *>, std::__1::allocator<std::__1::__hash_node<LS::TrackingRequirement, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::hash<LS::TrackingRequirement> > __p2_;
	compressed_pair<float, std::__1::equal_to<LS::TrackingRequirement> > __p3_;
} hash_table<LS::TrackingRequirement, std::__1::hash<LS::TrackingRequirement>, std::__1::equal_to<LS::TrackingRequirement>, std::__1::allocator<LS::TrackingRequirement> >;

typedef struct unordered_set<LS::TrackingRequirement, std::__1::hash<LS::TrackingRequirement>, std::__1::equal_to<LS::TrackingRequirement>, std::__1::allocator<LS::TrackingRequirement> > {
	hash_table<LS::TrackingRequirement, std::__1::hash<LS::TrackingRequirement>, std::__1::equal_to<LS::TrackingRequirement>, std::__1::allocator<LS::TrackingRequirement> > __table_;
} unordered_set<LS::TrackingRequirement, std::__1::hash<LS::TrackingRequirement>, std::__1::equal_to<LS::TrackingRequirement>, std::__1::allocator<LS::TrackingRequirement> >;

typedef struct {
	[4 field1];
} SCD_Struct_LS160;

typedef struct function<void (LS::FrameBuffer *)> {
	type __buf_;
	__base<void (LS::FrameBuffer *)> __f_;
} function<void (LS::FrameBuffer *)>;

typedef struct _compressed_pair<LS::FrameBuffer *, std::__1::function<void (LS::FrameBuffer *)> > {
	FrameBuffer __first_;
	function<void (LS::FrameBuffer *)> __second_;
} compressed_pair<LS::FrameBuffer *, std::__1::function<void (LS::FrameBuffer *)> >;

typedef struct unique_ptr<LS::FrameBuffer, std::__1::function<void (LS::FrameBuffer *)> > {
	compressed_pair<LS::FrameBuffer *, std::__1::function<void (LS::FrameBuffer *)> > __ptr_;
} unique_ptr<LS::FrameBuffer, std::__1::function<void (LS::FrameBuffer *)> >;

typedef struct _compressed_pair<LS::RGB2NV21Convertor *, std::__1::default_delete<LS::RGB2NV21Convertor> > {
	RGB2NV21Convertor __first_;
} compressed_pair<LS::RGB2NV21Convertor *, std::__1::default_delete<LS::RGB2NV21Convertor> >;

typedef struct unique_ptr<LS::RGB2NV21Convertor, std::__1::default_delete<LS::RGB2NV21Convertor> > {
	compressed_pair<LS::RGB2NV21Convertor *, std::__1::default_delete<LS::RGB2NV21Convertor> > __ptr_;
} unique_ptr<LS::RGB2NV21Convertor, std::__1::default_delete<LS::RGB2NV21Convertor> >;

typedef struct RectTransform {
	int transformMask_;
} RectTransform;

typedef struct Size<int> {
	int _width;
	int _height;
} Size<int>;

typedef struct __CVBuffer* CVBufferRef;

typedef struct {
	long long field1;
	int field2;
	unsigned field3;
	long long field4;
} SCD_Struct_LS169;

typedef struct {
	unsigned long long field1;
	long long field2;
	SCD_Struct_LS169 field3;
	double field4;
	BOOL field5;
	BOOL field6;
} SCD_Struct_LS170;

typedef struct CGContext* CGContextRef;

typedef struct shared_ptr<std::__1::vector<__weak id<LSAComponentListener>, std::__1::allocator<__weak id<LSAComponentListener> > > > {
	vector<__weak id<LSAComponentListener>, std::__1::allocator<__weak id<LSAComponentListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<LSAComponentListener>, std::__1::allocator<__weak id<LSAComponentListener> > > >;

typedef struct shared_ptr<LSAGeoDataDelegateWrapper> {
	LSAGeoDataDelegateWrapper __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<LSAGeoDataDelegateWrapper>;

typedef struct shared_ptr<std::__1::vector<__weak id<LSABitmojiEffectComponentListener>, std::__1::allocator<__weak id<LSABitmojiEffectComponentListener> > > > {
	vector<__weak id<LSABitmojiEffectComponentListener>, std::__1::allocator<__weak id<LSABitmojiEffectComponentListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<LSABitmojiEffectComponentListener>, std::__1::allocator<__weak id<LSABitmojiEffectComponentListener> > > >;

typedef struct shared_ptr<LSARemoteAssetsDelegateWrapper> {
	LSARemoteAssetsDelegateWrapper __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<LSARemoteAssetsDelegateWrapper>;

typedef struct shared_ptr<LSAVideoCodecFactory> {
	LSAVideoCodecFactory __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<LSAVideoCodecFactory>;

typedef struct shared_ptr<std::__1::vector<__weak id<LSASnapcodeComponentListener>, std::__1::allocator<__weak id<LSASnapcodeComponentListener> > > > {
	vector<__weak id<LSASnapcodeComponentListener>, std::__1::allocator<__weak id<LSASnapcodeComponentListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<LSASnapcodeComponentListener>, std::__1::allocator<__weak id<LSASnapcodeComponentListener> > > >;

typedef struct shared_ptr<LSALifeCycleDelegateWrapper> {
	LSALifeCycleDelegateWrapper __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<LSALifeCycleDelegateWrapper>;

typedef struct shared_ptr<LSAHintsDelegateWrapper> {
	LSAHintsDelegateWrapper __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<LSAHintsDelegateWrapper>;

typedef struct shared_ptr<LSAHapticFeedbackDelegateWrapper> {
	LSAHapticFeedbackDelegateWrapper __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<LSAHapticFeedbackDelegateWrapper>;

typedef struct shared_ptr<LSAAudioDelegateWrapper> {
	LSAAudioDelegateWrapper __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<LSAAudioDelegateWrapper>;

typedef struct shared_ptr<LSAScenariumAudioDelegateWrapper> {
	LSAScenariumAudioDelegateWrapper __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<LSAScenariumAudioDelegateWrapper>;

typedef struct shared_ptr<LSAClientInterfaceDelegateWrapper> {
	LSAClientInterfaceDelegateWrapper __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<LSAClientInterfaceDelegateWrapper>;

typedef struct shared_ptr<LSAPersistenceDelegateWrapper> {
	LSAPersistenceDelegateWrapper __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<LSAPersistenceDelegateWrapper>;

typedef struct shared_ptr<std::__1::vector<__weak id<LSAAnalyticsComponentListener>, std::__1::allocator<__weak id<LSAAnalyticsComponentListener> > > > {
	vector<__weak id<LSAAnalyticsComponentListener>, std::__1::allocator<__weak id<LSAAnalyticsComponentListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<LSAAnalyticsComponentListener>, std::__1::allocator<__weak id<LSAAnalyticsComponentListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<LSAEffectComponentListener>, std::__1::allocator<__weak id<LSAEffectComponentListener> > > > {
	vector<__weak id<LSAEffectComponentListener>, std::__1::allocator<__weak id<LSAEffectComponentListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<LSAEffectComponentListener>, std::__1::allocator<__weak id<LSAEffectComponentListener> > > >;

typedef struct shared_ptr<LSABitmojiEffectDelegateWrapper> {
	LSABitmojiEffectDelegateWrapper __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<LSABitmojiEffectDelegateWrapper>;

typedef struct shared_ptr<LSAUserDataDelegateWrapper> {
	LSAUserDataDelegateWrapper __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<LSAUserDataDelegateWrapper>;

typedef struct shared_ptr<std::__1::vector<__weak id<LSARemoteAssetsComponentListener>, std::__1::allocator<__weak id<LSARemoteAssetsComponentListener> > > > {
	vector<__weak id<LSARemoteAssetsComponentListener>, std::__1::allocator<__weak id<LSARemoteAssetsComponentListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<LSARemoteAssetsComponentListener>, std::__1::allocator<__weak id<LSARemoteAssetsComponentListener> > > >;

typedef struct shared_ptr<LSALensAnalyticsDataDelegateWrapper> {
	LSALensAnalyticsDataDelegateWrapper __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<LSALensAnalyticsDataDelegateWrapper>;

typedef struct {
	long long value;
	int timescale;
	unsigned flags;
	long long epoch;
} SCD_Struct_LS191;

typedef struct CGAffineTransform {
	double a;
	double b;
	double c;
	double d;
	double tx;
	double ty;
} CGAffineTransform;

typedef struct MatSize {
	int p;
} MatSize;

typedef struct MatStep {
	unsigned long long p;
	unsigned long long buf[2];
} MatStep;

typedef struct Mat_<float> {
	int flags;
	int dims;
	int rows;
	int cols;
	char* data;
	char* datastart;
	char* dataend;
	char* datalimit;
	MatAllocator allocator;
	UMatData u;
	MatSize size;
	MatStep step;
} Mat_<float>;

typedef struct TrackerData {
	Mat_<float> depthMap;
	shared_ptr<LS::TextureBase> depthMapTexture;
} TrackerData;

typedef struct {
	SCD_Struct_LS191 start;
	SCD_Struct_LS191 duration;
} SCD_Struct_BC197;

typedef struct {
	unsigned long long field1;
	id field2;
	unsigned long long field3;
	unsigned long long field4[5];
} SCD_Struct_BC198;

typedef struct CGRect {
	CGPoint origin;
	CGSize size;
} CGRect;

typedef struct {
	double x;
	double y;
	double z;
} SCD_Struct_BC200;

typedef struct {
	float field1;
	float field2;
	float field3;
} SCD_Struct_BC201;

typedef struct {
	float field1;
	float field2;
} SCD_Struct_BC202;

typedef struct __CFArray* CFArrayRef;

typedef struct __CFBinaryHeap* CFBinaryHeapRef;

typedef struct {
	long long field1;
	void field2;
	/*function pointer*/void* field3;
	/*function pointer*/void* field4;
	/*function pointer*/void* field5;
} SCD_Struct_A9205;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, std::__1::hash<unsigned long long>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, std::__1::hash<unsigned long long>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, std::__1::equal_to<unsigned long long>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, std::__1::equal_to<unsigned long long>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *> {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *> *> > > {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *> *> > __second_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *> *> > > {
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > > > > {
	unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, std::__1::hash<unsigned long long>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, std::__1::equal_to<unsigned long long>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > > > >;

typedef struct unordered_map<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> >, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > > > > {
	hash_table<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > > > > __table_;
} unordered_map<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> >, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > > > >;

typedef struct {
	SCD_Struct_BC197 field1;
	SCD_Struct_BC197 field2;
} SCD_Struct_FC216;

typedef struct shared_ptr<std::__1::vector<__weak id<SCNetworkConnectivityListener>, std::__1::allocator<__weak id<SCNetworkConnectivityListener> > > > {
	vector<__weak id<SCNetworkConnectivityListener>, std::__1::allocator<__weak id<SCNetworkConnectivityListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCNetworkConnectivityListener>, std::__1::allocator<__weak id<SCNetworkConnectivityListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCSecretFeatureCheckerListener>, std::__1::allocator<__weak id<SCSecretFeatureCheckerListener> > > > {
	vector<__weak id<SCSecretFeatureCheckerListener>, std::__1::allocator<__weak id<SCSecretFeatureCheckerListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCSecretFeatureCheckerListener>, std::__1::allocator<__weak id<SCSecretFeatureCheckerListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCMotionManagerListener>, std::__1::allocator<__weak id<SCMotionManagerListener> > > > {
	vector<__weak id<SCMotionManagerListener>, std::__1::allocator<__weak id<SCMotionManagerListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCMotionManagerListener>, std::__1::allocator<__weak id<SCMotionManagerListener> > > >;

typedef struct {
	BOOL touchEventEnded;
	BOOL pendingIdleOps;
	BOOL startWillEnd;
	BOOL startEnded;
} SCD_Struct_SC220;

typedef struct __CFRunLoopObserver* CFRunLoopObserverRef;

typedef struct __CFString* CFStringRef;

typedef struct __CTFramesetter* CTFramesetterRef;

typedef struct __CTFrame* CTFrameRef;

typedef struct {
	long long field1;
	long long field2;
} SCD_Struct_TT225;

typedef struct UIOffset {
	double horizontal;
	double vertical;
} UIOffset;

typedef struct shared_ptr<std::__1::vector<__weak id<SCFreeDiskSpaceMonitorListener>, std::__1::allocator<__weak id<SCFreeDiskSpaceMonitorListener> > > > {
	vector<__weak id<SCFreeDiskSpaceMonitorListener>, std::__1::allocator<__weak id<SCFreeDiskSpaceMonitorListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCFreeDiskSpaceMonitorListener>, std::__1::allocator<__weak id<SCFreeDiskSpaceMonitorListener> > > >;

typedef struct _compressed_pair<SCDocObject *__strong *, std::__1::allocator<SCDocObject *> > {
	id __first_;
} compressed_pair<SCDocObject *__strong *, std::__1::allocator<SCDocObject *> >;

typedef struct vector<SCDocObject *, std::__1::allocator<SCDocObject *> > {
	id __begin_;
	id __end_;
	compressed_pair<SCDocObject *__strong *, std::__1::allocator<SCDocObject *> > __end_cap_;
} vector<SCDocObject *, std::__1::allocator<SCDocObject *> >;

typedef struct Error {
	int mQueryType;
	int mOperation;
	int mCode;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > mDescription;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > mQuery;
} Error;

typedef struct shared_ptr<SC::Query::BaseExpr<bool> > {
	BaseExpr<bool> __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<SC::Query::BaseExpr<bool> >;

typedef struct _compressed_pair<SC::Query::Order *, std::__1::allocator<SC::Query::Order> > {
	bycopy const der __first_;
} compressed_pair<SC::Query::Order *, std::__1::allocator<SC::Query::Order> >;

typedef struct vector<SC::Query::Order, std::__1::allocator<SC::Query::Order> > {
	bycopy const der __begin_;
	bycopy const der __end_;
	compressed_pair<SC::Query::Order *, std::__1::allocator<SC::Query::Order> > __end_cap_;
} vector<SC::Query::Order, std::__1::allocator<SC::Query::Order> >;

typedef struct OrderBy {
	vector<SC::Query::Order, std::__1::allocator<SC::Query::Order> > mOrders;
} OrderBy;

typedef struct Limit {
	int mLimit;
} Limit;

typedef struct Borrowed {
	SQLiteConnection mObjectPtr;
	ObjectPool<SQLiteConnection, 63> mConnectionPoolPtr;
} Borrowed;

typedef struct _compressed_pair<SQLiteConnection *, std::__1::default_delete<SQLiteConnection> > {
	SQLiteConnection __first_;
} compressed_pair<SQLiteConnection *, std::__1::default_delete<SQLiteConnection> >;

typedef struct unique_ptr<SQLiteConnection, std::__1::default_delete<SQLiteConnection> > {
	compressed_pair<SQLiteConnection *, std::__1::default_delete<SQLiteConnection> > __ptr_;
} unique_ptr<SQLiteConnection, std::__1::default_delete<SQLiteConnection> >;

typedef struct _compressed_pair<SC::ObjectPool<SQLiteConnection, 63> *, std::__1::default_delete<SC::ObjectPool<SQLiteConnection, 63> > > {
	ObjectPool<SQLiteConnection, 63> __first_;
} compressed_pair<SC::ObjectPool<SQLiteConnection, 63> *, std::__1::default_delete<SC::ObjectPool<SQLiteConnection, 63> > >;

typedef struct unique_ptr<SC::ObjectPool<SQLiteConnection, 63>, std::__1::default_delete<SC::ObjectPool<SQLiteConnection, 63> > > {
	compressed_pair<SC::ObjectPool<SQLiteConnection, 63> *, std::__1::default_delete<SC::ObjectPool<SQLiteConnection, 63> > > __ptr_;
} unique_ptr<SC::ObjectPool<SQLiteConnection, 63>, std::__1::default_delete<SC::ObjectPool<SQLiteConnection, 63> > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, SCDocObjectClassFunctionPointer>, void *> *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, SCDocObjectClassFunctionPointer>, void *> *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long, std::__1::__hash_value_type<long, SCDocObjectClassFunctionPointer>, std::__1::hash<long>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long, std::__1::__hash_value_type<long, SCDocObjectClassFunctionPointer>, std::__1::hash<long>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<long, std::__1::__hash_value_type<long, SCDocObjectClassFunctionPointer>, std::__1::equal_to<long>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<long, std::__1::__hash_value_type<long, SCDocObjectClassFunctionPointer>, std::__1::equal_to<long>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, SCDocObjectClassFunctionPointer>, void *> *> {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, SCDocObjectClassFunctionPointer>, void *> *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, SCDocObjectClassFunctionPointer>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, SCDocObjectClassFunctionPointer>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, SCDocObjectClassFunctionPointer>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, SCDocObjectClassFunctionPointer>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, SCDocObjectClassFunctionPointer>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, SCDocObjectClassFunctionPointer>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, SCDocObjectClassFunctionPointer>, void *> *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, SCDocObjectClassFunctionPointer>, void *> *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, SCDocObjectClassFunctionPointer>, void *> *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, SCDocObjectClassFunctionPointer>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, SCDocObjectClassFunctionPointer>, void *> *> *> > > {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, SCDocObjectClassFunctionPointer>, void *> *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, SCDocObjectClassFunctionPointer>, void *> *> *> > __second_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, SCDocObjectClassFunctionPointer>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, SCDocObjectClassFunctionPointer>, void *> *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, SCDocObjectClassFunctionPointer>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, SCDocObjectClassFunctionPointer>, void *> *> *> > > {
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, SCDocObjectClassFunctionPointer>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, SCDocObjectClassFunctionPointer>, void *> *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, SCDocObjectClassFunctionPointer>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, SCDocObjectClassFunctionPointer>, void *> *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<long, SCDocObjectClassFunctionPointer>, std::__1::__unordered_map_hasher<long, std::__1::__hash_value_type<long, SCDocObjectClassFunctionPointer>, std::__1::hash<long>, true>, std::__1::__unordered_map_equal<long, std::__1::__hash_value_type<long, SCDocObjectClassFunctionPointer>, std::__1::equal_to<long>, true>, std::__1::allocator<std::__1::__hash_value_type<long, SCDocObjectClassFunctionPointer> > > {
	unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, SCDocObjectClassFunctionPointer>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, SCDocObjectClassFunctionPointer>, void *> *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, SCDocObjectClassFunctionPointer>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, SCDocObjectClassFunctionPointer>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long, std::__1::__hash_value_type<long, SCDocObjectClassFunctionPointer>, std::__1::hash<long>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<long, std::__1::__hash_value_type<long, SCDocObjectClassFunctionPointer>, std::__1::equal_to<long>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<long, SCDocObjectClassFunctionPointer>, std::__1::__unordered_map_hasher<long, std::__1::__hash_value_type<long, SCDocObjectClassFunctionPointer>, std::__1::hash<long>, true>, std::__1::__unordered_map_equal<long, std::__1::__hash_value_type<long, SCDocObjectClassFunctionPointer>, std::__1::equal_to<long>, true>, std::__1::allocator<std::__1::__hash_value_type<long, SCDocObjectClassFunctionPointer> > >;

typedef struct unordered_map<long, SCDocObjectClassFunctionPointer, std::__1::hash<long>, std::__1::equal_to<long>, std::__1::allocator<std::__1::pair<const long, SCDocObjectClassFunctionPointer> > > {
	hash_table<std::__1::__hash_value_type<long, SCDocObjectClassFunctionPointer>, std::__1::__unordered_map_hasher<long, std::__1::__hash_value_type<long, SCDocObjectClassFunctionPointer>, std::__1::hash<long>, true>, std::__1::__unordered_map_equal<long, std::__1::__hash_value_type<long, SCDocObjectClassFunctionPointer>, std::__1::equal_to<long>, true>, std::__1::allocator<std::__1::__hash_value_type<long, SCDocObjectClassFunctionPointer> > > __table_;
} unordered_map<long, SCDocObjectClassFunctionPointer, std::__1::hash<long>, std::__1::equal_to<long>, std::__1::allocator<std::__1::pair<const long, SCDocObjectClassFunctionPointer> > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<long long, SCDocObject *, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, SCDocObject *> > > >, void *> *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<long long, SCDocObject *, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, SCDocObject *> > > >, void *> *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long, std::__1::__hash_value_type<long, std::__1::unordered_map<long long, SCDocObject *, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, SCDocObject *> > > >, std::__1::hash<long>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long, std::__1::__hash_value_type<long, std::__1::unordered_map<long long, SCDocObject *, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, SCDocObject *> > > >, std::__1::hash<long>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<long, std::__1::__hash_value_type<long, std::__1::unordered_map<long long, SCDocObject *, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, SCDocObject *> > > >, std::__1::equal_to<long>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<long, std::__1::__hash_value_type<long, std::__1::unordered_map<long long, SCDocObject *, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, SCDocObject *> > > >, std::__1::equal_to<long>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<long long, SCDocObject *, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, SCDocObject *> > > >, void *> *> {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<long long, SCDocObject *, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, SCDocObject *> > > >, void *> *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<long long, SCDocObject *, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, SCDocObject *> > > >, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<long long, SCDocObject *, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, SCDocObject *> > > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<long long, SCDocObject *, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, SCDocObject *> > > >, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<long long, SCDocObject *, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, SCDocObject *> > > >, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<long long, SCDocObject *, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, SCDocObject *> > > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<long long, SCDocObject *, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, SCDocObject *> > > >, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<long long, SCDocObject *, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, SCDocObject *> > > >, void *> *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<long long, SCDocObject *, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, SCDocObject *> > > >, void *> *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<long long, SCDocObject *, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, SCDocObject *> > > >, void *> *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<long long, SCDocObject *, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, SCDocObject *> > > >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<long long, SCDocObject *, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, SCDocObject *> > > >, void *> *> *> > > {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<long long, SCDocObject *, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, SCDocObject *> > > >, void *> *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<long long, SCDocObject *, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, SCDocObject *> > > >, void *> *> *> > __second_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<long long, SCDocObject *, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, SCDocObject *> > > >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<long long, SCDocObject *, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, SCDocObject *> > > >, void *> *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<long long, SCDocObject *, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, SCDocObject *> > > >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<long long, SCDocObject *, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, SCDocObject *> > > >, void *> *> *> > > {
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<long long, SCDocObject *, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, SCDocObject *> > > >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<long long, SCDocObject *, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, SCDocObject *> > > >, void *> *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<long long, SCDocObject *, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, SCDocObject *> > > >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<long long, SCDocObject *, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, SCDocObject *> > > >, void *> *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<long, std::__1::unordered_map<long long, SCDocObject *, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, SCDocObject *> > > >, std::__1::__unordered_map_hasher<long, std::__1::__hash_value_type<long, std::__1::unordered_map<long long, SCDocObject *, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, SCDocObject *> > > >, std::__1::hash<long>, true>, std::__1::__unordered_map_equal<long, std::__1::__hash_value_type<long, std::__1::unordered_map<long long, SCDocObject *, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, SCDocObject *> > > >, std::__1::equal_to<long>, true>, std::__1::allocator<std::__1::__hash_value_type<long, std::__1::unordered_map<long long, SCDocObject *, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, SCDocObject *> > > > > > {
	unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<long long, SCDocObject *, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, SCDocObject *> > > >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<long long, SCDocObject *, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, SCDocObject *> > > >, void *> *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<long long, SCDocObject *, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, SCDocObject *> > > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<long long, SCDocObject *, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, SCDocObject *> > > >, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long, std::__1::__hash_value_type<long, std::__1::unordered_map<long long, SCDocObject *, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, SCDocObject *> > > >, std::__1::hash<long>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<long, std::__1::__hash_value_type<long, std::__1::unordered_map<long long, SCDocObject *, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, SCDocObject *> > > >, std::__1::equal_to<long>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<long, std::__1::unordered_map<long long, SCDocObject *, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, SCDocObject *> > > >, std::__1::__unordered_map_hasher<long, std::__1::__hash_value_type<long, std::__1::unordered_map<long long, SCDocObject *, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, SCDocObject *> > > >, std::__1::hash<long>, true>, std::__1::__unordered_map_equal<long, std::__1::__hash_value_type<long, std::__1::unordered_map<long long, SCDocObject *, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, SCDocObject *> > > >, std::__1::equal_to<long>, true>, std::__1::allocator<std::__1::__hash_value_type<long, std::__1::unordered_map<long long, SCDocObject *, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, SCDocObject *> > > > > >;

typedef struct unordered_map<long, std::__1::unordered_map<long long, SCDocObject *, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, SCDocObject *> > >, std::__1::hash<long>, std::__1::equal_to<long>, std::__1::allocator<std::__1::pair<const long, std::__1::unordered_map<long long, SCDocObject *, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, SCDocObject *> > > > > > {
	hash_table<std::__1::__hash_value_type<long, std::__1::unordered_map<long long, SCDocObject *, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, SCDocObject *> > > >, std::__1::__unordered_map_hasher<long, std::__1::__hash_value_type<long, std::__1::unordered_map<long long, SCDocObject *, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, SCDocObject *> > > >, std::__1::hash<long>, true>, std::__1::__unordered_map_equal<long, std::__1::__hash_value_type<long, std::__1::unordered_map<long long, SCDocObject *, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, SCDocObject *> > > >, std::__1::equal_to<long>, true>, std::__1::allocator<std::__1::__hash_value_type<long, std::__1::unordered_map<long long, SCDocObject *, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, SCDocObject *> > > > > > __table_;
} unordered_map<long, std::__1::unordered_map<long long, SCDocObject *, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, SCDocObject *> > >, std::__1::hash<long>, std::__1::equal_to<long>, std::__1::allocator<std::__1::pair<const long, std::__1::unordered_map<long long, SCDocObject *, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, SCDocObject *> > > > > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<long, void *> *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<long, void *> *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::hash<long> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::hash<long> >;

typedef struct _compressed_pair<float, std::__1::equal_to<long> > {
	float __first_;
} compressed_pair<float, std::__1::equal_to<long> >;

typedef struct _hash_node_base<std::__1::__hash_node<long, void *> *> {
	__hash_node_base<std::__1::__hash_node<long, void *> *> __next_;
} hash_node_base<std::__1::__hash_node<long, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<long, void *> *>, std::__1::allocator<std::__1::__hash_node<long, void *> > > {
	hash_node_base<std::__1::__hash_node<long, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<long, void *> *>, std::__1::allocator<std::__1::__hash_node<long, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<long, void *> *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<long, void *> *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<long, void *> *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<long, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<long, void *> *> *> > > {
	__hash_node_base<std::__1::__hash_node<long, void *> *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<long, void *> *> *> > __second_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<long, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<long, void *> *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<long, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<long, void *> *> *> > > {
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<long, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<long, void *> *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<long, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<long, void *> *> *> > >;

typedef struct _hash_table<long, std::__1::hash<long>, std::__1::equal_to<long>, std::__1::allocator<long> > {
	unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<long, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<long, void *> *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<long, void *> *>, std::__1::allocator<std::__1::__hash_node<long, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::hash<long> > __p2_;
	compressed_pair<float, std::__1::equal_to<long> > __p3_;
} hash_table<long, std::__1::hash<long>, std::__1::equal_to<long>, std::__1::allocator<long> >;

typedef struct unordered_set<long, std::__1::hash<long>, std::__1::equal_to<long>, std::__1::allocator<long> > {
	hash_table<long, std::__1::hash<long>, std::__1::equal_to<long>, std::__1::allocator<long> > __table_;
} unordered_set<long, std::__1::hash<long>, std::__1::equal_to<long>, std::__1::allocator<long> >;

typedef struct atomic<unsigned long long> {
	AQ __a_;
} atomic<unsigned long long>;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, unsigned long long>, void *> *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, unsigned long long>, void *> *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long, std::__1::__hash_value_type<long, unsigned long long>, std::__1::hash<long>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long, std::__1::__hash_value_type<long, unsigned long long>, std::__1::hash<long>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<long, std::__1::__hash_value_type<long, unsigned long long>, std::__1::equal_to<long>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<long, std::__1::__hash_value_type<long, unsigned long long>, std::__1::equal_to<long>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, unsigned long long>, void *> *> {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, unsigned long long>, void *> *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, unsigned long long>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, unsigned long long>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, unsigned long long>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, unsigned long long>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, unsigned long long>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, unsigned long long>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, unsigned long long>, void *> *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, unsigned long long>, void *> *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, unsigned long long>, void *> *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, unsigned long long>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, unsigned long long>, void *> *> *> > > {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, unsigned long long>, void *> *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, unsigned long long>, void *> *> *> > __second_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, unsigned long long>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, unsigned long long>, void *> *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, unsigned long long>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, unsigned long long>, void *> *> *> > > {
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, unsigned long long>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, unsigned long long>, void *> *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, unsigned long long>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, unsigned long long>, void *> *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<long, unsigned long long>, std::__1::__unordered_map_hasher<long, std::__1::__hash_value_type<long, unsigned long long>, std::__1::hash<long>, true>, std::__1::__unordered_map_equal<long, std::__1::__hash_value_type<long, unsigned long long>, std::__1::equal_to<long>, true>, std::__1::allocator<std::__1::__hash_value_type<long, unsigned long long> > > {
	unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, unsigned long long>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, unsigned long long>, void *> *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, unsigned long long>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, unsigned long long>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long, std::__1::__hash_value_type<long, unsigned long long>, std::__1::hash<long>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<long, std::__1::__hash_value_type<long, unsigned long long>, std::__1::equal_to<long>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<long, unsigned long long>, std::__1::__unordered_map_hasher<long, std::__1::__hash_value_type<long, unsigned long long>, std::__1::hash<long>, true>, std::__1::__unordered_map_equal<long, std::__1::__hash_value_type<long, unsigned long long>, std::__1::equal_to<long>, true>, std::__1::allocator<std::__1::__hash_value_type<long, unsigned long long> > >;

typedef struct unordered_map<long, unsigned long long, std::__1::hash<long>, std::__1::equal_to<long>, std::__1::allocator<std::__1::pair<const long, unsigned long long> > > {
	hash_table<std::__1::__hash_value_type<long, unsigned long long>, std::__1::__unordered_map_hasher<long, std::__1::__hash_value_type<long, unsigned long long>, std::__1::hash<long>, true>, std::__1::__unordered_map_equal<long, std::__1::__hash_value_type<long, unsigned long long>, std::__1::equal_to<long>, true>, std::__1::allocator<std::__1::__hash_value_type<long, unsigned long long> > > __table_;
} unordered_map<long, unsigned long long, std::__1::hash<long>, std::__1::equal_to<long>, std::__1::allocator<std::__1::pair<const long, unsigned long long> > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > >, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > > > > > >, void *> *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > >, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > > > > > >, void *> *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long, std::__1::__hash_value_type<long, std::__1::unordered_map<long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > >, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > > > > > >, std::__1::hash<long>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long, std::__1::__hash_value_type<long, std::__1::unordered_map<long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > >, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > > > > > >, std::__1::hash<long>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<long, std::__1::__hash_value_type<long, std::__1::unordered_map<long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > >, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > > > > > >, std::__1::equal_to<long>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<long, std::__1::__hash_value_type<long, std::__1::unordered_map<long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > >, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > > > > > >, std::__1::equal_to<long>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > >, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > > > > > >, void *> *> {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > >, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > > > > > >, void *> *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > >, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > > > > > >, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > >, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > > > > > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > >, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > > > > > >, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > >, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > > > > > >, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > >, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > > > > > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > >, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > > > > > >, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > >, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > > > > > >, void *> *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > >, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > > > > > >, void *> *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > >, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > > > > > >, void *> *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > >, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > > > > > >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > >, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > > > > > >, void *> *> *> > > {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > >, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > > > > > >, void *> *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > >, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > > > > > >, void *> *> *> > __second_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > >, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > > > > > >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > >, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > > > > > >, void *> *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > >, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > > > > > >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > >, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > > > > > >, void *> *> *> > > {
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > >, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > > > > > >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > >, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > > > > > >, void *> *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > >, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > > > > > >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > >, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > > > > > >, void *> *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<long, std::__1::unordered_map<long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > >, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > > > > > >, std::__1::__unordered_map_hasher<long, std::__1::__hash_value_type<long, std::__1::unordered_map<long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > >, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > > > > > >, std::__1::hash<long>, true>, std::__1::__unordered_map_equal<long, std::__1::__hash_value_type<long, std::__1::unordered_map<long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > >, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > > > > > >, std::__1::equal_to<long>, true>, std::__1::allocator<std::__1::__hash_value_type<long, std::__1::unordered_map<long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > >, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > > > > > > > > {
	unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > >, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > > > > > >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > >, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > > > > > >, void *> *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > >, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > > > > > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > >, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > > > > > >, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long, std::__1::__hash_value_type<long, std::__1::unordered_map<long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > >, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > > > > > >, std::__1::hash<long>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<long, std::__1::__hash_value_type<long, std::__1::unordered_map<long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > >, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > > > > > >, std::__1::equal_to<long>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<long, std::__1::unordered_map<long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > >, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > > > > > >, std::__1::__unordered_map_hasher<long, std::__1::__hash_value_type<long, std::__1::unordered_map<long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > >, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > > > > > >, std::__1::hash<long>, true>, std::__1::__unordered_map_equal<long, std::__1::__hash_value_type<long, std::__1::unordered_map<long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > >, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > > > > > >, std::__1::equal_to<long>, true>, std::__1::allocator<std::__1::__hash_value_type<long, std::__1::unordered_map<long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > >, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > > > > > > > >;

typedef struct unordered_map<long, std::__1::unordered_map<long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > >, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > > > > >, std::__1::hash<long>, std::__1::equal_to<long>, std::__1::allocator<std::__1::pair<const long, std::__1::unordered_map<long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > >, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > > > > > > > > {
	hash_table<std::__1::__hash_value_type<long, std::__1::unordered_map<long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > >, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > > > > > >, std::__1::__unordered_map_hasher<long, std::__1::__hash_value_type<long, std::__1::unordered_map<long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > >, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > > > > > >, std::__1::hash<long>, true>, std::__1::__unordered_map_equal<long, std::__1::__hash_value_type<long, std::__1::unordered_map<long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > >, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > > > > > >, std::__1::equal_to<long>, true>, std::__1::allocator<std::__1::__hash_value_type<long, std::__1::unordered_map<long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > >, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > > > > > > > > __table_;
} unordered_map<long, std::__1::unordered_map<long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > >, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > > > > >, std::__1::hash<long>, std::__1::equal_to<long>, std::__1::allocator<std::__1::pair<const long, std::__1::unordered_map<long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > >, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, std::__1::unordered_map<unsigned long long, SCObjectObservation, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCObjectObservation> > > > > > > > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<unsigned long long, SCFetchedResultObserver, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCFetchedResultObserver> > > >, void *> *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<unsigned long long, SCFetchedResultObserver, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCFetchedResultObserver> > > >, void *> *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long, std::__1::__hash_value_type<long, std::__1::unordered_map<unsigned long long, SCFetchedResultObserver, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCFetchedResultObserver> > > >, std::__1::hash<long>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long, std::__1::__hash_value_type<long, std::__1::unordered_map<unsigned long long, SCFetchedResultObserver, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCFetchedResultObserver> > > >, std::__1::hash<long>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<long, std::__1::__hash_value_type<long, std::__1::unordered_map<unsigned long long, SCFetchedResultObserver, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCFetchedResultObserver> > > >, std::__1::equal_to<long>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<long, std::__1::__hash_value_type<long, std::__1::unordered_map<unsigned long long, SCFetchedResultObserver, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCFetchedResultObserver> > > >, std::__1::equal_to<long>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<unsigned long long, SCFetchedResultObserver, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCFetchedResultObserver> > > >, void *> *> {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<unsigned long long, SCFetchedResultObserver, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCFetchedResultObserver> > > >, void *> *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<unsigned long long, SCFetchedResultObserver, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCFetchedResultObserver> > > >, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<unsigned long long, SCFetchedResultObserver, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCFetchedResultObserver> > > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<unsigned long long, SCFetchedResultObserver, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCFetchedResultObserver> > > >, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<unsigned long long, SCFetchedResultObserver, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCFetchedResultObserver> > > >, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<unsigned long long, SCFetchedResultObserver, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCFetchedResultObserver> > > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<unsigned long long, SCFetchedResultObserver, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCFetchedResultObserver> > > >, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<unsigned long long, SCFetchedResultObserver, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCFetchedResultObserver> > > >, void *> *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<unsigned long long, SCFetchedResultObserver, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCFetchedResultObserver> > > >, void *> *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<unsigned long long, SCFetchedResultObserver, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCFetchedResultObserver> > > >, void *> *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<unsigned long long, SCFetchedResultObserver, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCFetchedResultObserver> > > >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<unsigned long long, SCFetchedResultObserver, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCFetchedResultObserver> > > >, void *> *> *> > > {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<unsigned long long, SCFetchedResultObserver, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCFetchedResultObserver> > > >, void *> *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<unsigned long long, SCFetchedResultObserver, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCFetchedResultObserver> > > >, void *> *> *> > __second_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<unsigned long long, SCFetchedResultObserver, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCFetchedResultObserver> > > >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<unsigned long long, SCFetchedResultObserver, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCFetchedResultObserver> > > >, void *> *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<unsigned long long, SCFetchedResultObserver, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCFetchedResultObserver> > > >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<unsigned long long, SCFetchedResultObserver, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCFetchedResultObserver> > > >, void *> *> *> > > {
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<unsigned long long, SCFetchedResultObserver, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCFetchedResultObserver> > > >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<unsigned long long, SCFetchedResultObserver, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCFetchedResultObserver> > > >, void *> *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<unsigned long long, SCFetchedResultObserver, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCFetchedResultObserver> > > >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<unsigned long long, SCFetchedResultObserver, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCFetchedResultObserver> > > >, void *> *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<long, std::__1::unordered_map<unsigned long long, SCFetchedResultObserver, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCFetchedResultObserver> > > >, std::__1::__unordered_map_hasher<long, std::__1::__hash_value_type<long, std::__1::unordered_map<unsigned long long, SCFetchedResultObserver, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCFetchedResultObserver> > > >, std::__1::hash<long>, true>, std::__1::__unordered_map_equal<long, std::__1::__hash_value_type<long, std::__1::unordered_map<unsigned long long, SCFetchedResultObserver, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCFetchedResultObserver> > > >, std::__1::equal_to<long>, true>, std::__1::allocator<std::__1::__hash_value_type<long, std::__1::unordered_map<unsigned long long, SCFetchedResultObserver, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCFetchedResultObserver> > > > > > {
	unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<unsigned long long, SCFetchedResultObserver, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCFetchedResultObserver> > > >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<unsigned long long, SCFetchedResultObserver, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCFetchedResultObserver> > > >, void *> *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<unsigned long long, SCFetchedResultObserver, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCFetchedResultObserver> > > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<unsigned long long, SCFetchedResultObserver, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCFetchedResultObserver> > > >, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long, std::__1::__hash_value_type<long, std::__1::unordered_map<unsigned long long, SCFetchedResultObserver, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCFetchedResultObserver> > > >, std::__1::hash<long>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<long, std::__1::__hash_value_type<long, std::__1::unordered_map<unsigned long long, SCFetchedResultObserver, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCFetchedResultObserver> > > >, std::__1::equal_to<long>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<long, std::__1::unordered_map<unsigned long long, SCFetchedResultObserver, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCFetchedResultObserver> > > >, std::__1::__unordered_map_hasher<long, std::__1::__hash_value_type<long, std::__1::unordered_map<unsigned long long, SCFetchedResultObserver, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCFetchedResultObserver> > > >, std::__1::hash<long>, true>, std::__1::__unordered_map_equal<long, std::__1::__hash_value_type<long, std::__1::unordered_map<unsigned long long, SCFetchedResultObserver, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCFetchedResultObserver> > > >, std::__1::equal_to<long>, true>, std::__1::allocator<std::__1::__hash_value_type<long, std::__1::unordered_map<unsigned long long, SCFetchedResultObserver, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCFetchedResultObserver> > > > > >;

typedef struct unordered_map<long, std::__1::unordered_map<unsigned long long, SCFetchedResultObserver, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCFetchedResultObserver> > >, std::__1::hash<long>, std::__1::equal_to<long>, std::__1::allocator<std::__1::pair<const long, std::__1::unordered_map<unsigned long long, SCFetchedResultObserver, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCFetchedResultObserver> > > > > > {
	hash_table<std::__1::__hash_value_type<long, std::__1::unordered_map<unsigned long long, SCFetchedResultObserver, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCFetchedResultObserver> > > >, std::__1::__unordered_map_hasher<long, std::__1::__hash_value_type<long, std::__1::unordered_map<unsigned long long, SCFetchedResultObserver, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCFetchedResultObserver> > > >, std::__1::hash<long>, true>, std::__1::__unordered_map_equal<long, std::__1::__hash_value_type<long, std::__1::unordered_map<unsigned long long, SCFetchedResultObserver, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCFetchedResultObserver> > > >, std::__1::equal_to<long>, true>, std::__1::allocator<std::__1::__hash_value_type<long, std::__1::unordered_map<unsigned long long, SCFetchedResultObserver, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCFetchedResultObserver> > > > > > __table_;
} unordered_map<long, std::__1::unordered_map<unsigned long long, SCFetchedResultObserver, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCFetchedResultObserver> > >, std::__1::hash<long>, std::__1::equal_to<long>, std::__1::allocator<std::__1::pair<const long, std::__1::unordered_map<unsigned long long, SCFetchedResultObserver, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCFetchedResultObserver> > > > > >;

typedef struct _compressed_pair<flatbuffers::FlatBufferBuilder::FieldLoc *, std::__1::allocator<flatbuffers::FlatBufferBuilder::FieldLoc> > {
	FieldLoc __first_;
} compressed_pair<flatbuffers::FlatBufferBuilder::FieldLoc *, std::__1::allocator<flatbuffers::FlatBufferBuilder::FieldLoc> >;

typedef struct vector<flatbuffers::FlatBufferBuilder::FieldLoc, std::__1::allocator<flatbuffers::FlatBufferBuilder::FieldLoc> > {
	FieldLoc __begin_;
	FieldLoc __end_;
	compressed_pair<flatbuffers::FlatBufferBuilder::FieldLoc *, std::__1::allocator<flatbuffers::FlatBufferBuilder::FieldLoc> > __end_cap_;
} vector<flatbuffers::FlatBufferBuilder::FieldLoc, std::__1::allocator<flatbuffers::FlatBufferBuilder::FieldLoc> >;

typedef struct vector_downward {
	Allocator allocator_;
	BOOL own_allocator_;
	unsigned long long initial_size_;
	unsigned long long reserved_;
	char* buf_;
	char* cur_;
} vector_downward;

typedef struct FlatBufferBuilder {
	vector_downward buf_;
	vector<flatbuffers::FlatBufferBuilder::FieldLoc, std::__1::allocator<flatbuffers::FlatBufferBuilder::FieldLoc> > offsetbuf_;
	unsigned short max_voffset_;
	BOOL nested;
	BOOL finished;
	vector<unsigned int, std::__1::allocator<unsigned int> > vtables_;
	unsigned long long minalign_;
	BOOL force_defaults_;
	BOOL dedup_vtables_;
	set<flatbuffers::Offset<flatbuffers::String>, flatbuffers::FlatBufferBuilder::StringOffsetCompare, std::__1::allocator<flatbuffers::Offset<flatbuffers::String> > > string_pool;
} FlatBufferBuilder;

typedef struct GPBCodedInputStreamState {
	char* bytes;
	unsigned long long bufferSize;
	unsigned long long bufferPos;
	unsigned long long currentLimit;
	int lastTag;
	unsigned long long recursionDepth;
} GPBCodedInputStreamState;

typedef struct GPBOutputBufferState {
	char* bytes;
	unsigned long long size;
	unsigned long long position;
	NSOutputStream* output;
} GPBOutputBufferState;

typedef union {
	BOOL valueBool;
	int valueInt32;
	long long valueInt64;
	unsigned valueUInt32;
	unsigned long long valueUInt64;
	float valueFloat;
	double valueDouble;
	NSData* valueData;
	NSString* valueString;
	GPBMessage* valueMessage;
	int valueEnum;
} SCD_Union_GP308;

typedef union {
	GPBEnumDescriptor* enumDescriptor_;
	/*function pointer*/void* enumVerifier_;
} SCD_Union_GP309;

typedef struct __CFDictionary* CFDictionaryRef;

typedef struct sqlite3* sqlite3Ref;

typedef struct shared_ptr<std::__1::vector<__weak id<SCSearchEventListener>, std::__1::allocator<__weak id<SCSearchEventListener> > > > {
	vector<__weak id<SCSearchEventListener>, std::__1::allocator<__weak id<SCSearchEventListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCSearchEventListener>, std::__1::allocator<__weak id<SCSearchEventListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCSearchUpdateListener>, std::__1::allocator<__weak id<SCSearchUpdateListener> > > > {
	vector<__weak id<SCSearchUpdateListener>, std::__1::allocator<__weak id<SCSearchUpdateListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCSearchUpdateListener>, std::__1::allocator<__weak id<SCSearchUpdateListener> > > >;

typedef struct sqlite3_stmt* sqlite3_stmtRef;

typedef struct shared_ptr<std::__1::vector<__weak id<SCDataCoordinatorListener>, std::__1::allocator<__weak id<SCDataCoordinatorListener> > > > {
	vector<__weak id<SCDataCoordinatorListener>, std::__1::allocator<__weak id<SCDataCoordinatorListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCDataCoordinatorListener>, std::__1::allocator<__weak id<SCDataCoordinatorListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCServerConfigListener>, std::__1::allocator<__weak id<SCServerConfigListener> > > > {
	vector<__weak id<SCServerConfigListener>, std::__1::allocator<__weak id<SCServerConfigListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCServerConfigListener>, std::__1::allocator<__weak id<SCServerConfigListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCStudySettingsListener>, std::__1::allocator<__weak id<SCStudySettingsListener> > > > {
	vector<__weak id<SCStudySettingsListener>, std::__1::allocator<__weak id<SCStudySettingsListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCStudySettingsListener>, std::__1::allocator<__weak id<SCStudySettingsListener> > > >;

typedef struct __CFRunLoop* CFRunLoopRef;

typedef struct SCNetworkTraceFileStruct* SCNetworkTraceFileStructRef;

typedef struct shared_ptr<std::__1::vector<__weak id<SCRequestSchedulingStateListener>, std::__1::allocator<__weak id<SCRequestSchedulingStateListener> > > > {
	vector<__weak id<SCRequestSchedulingStateListener>, std::__1::allocator<__weak id<SCRequestSchedulingStateListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCRequestSchedulingStateListener>, std::__1::allocator<__weak id<SCRequestSchedulingStateListener> > > >;

typedef struct in_addr {
	unsigned s_addr;
} in_addr;

typedef struct shared_ptr<std::__1::vector<__weak id<SCAPIClientListener>, std::__1::allocator<__weak id<SCAPIClientListener> > > > {
	vector<__weak id<SCAPIClientListener>, std::__1::allocator<__weak id<SCAPIClientListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCAPIClientListener>, std::__1::allocator<__weak id<SCAPIClientListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCConnectionClassManagerListener>, std::__1::allocator<__weak id<SCConnectionClassManagerListener> > > > {
	vector<__weak id<SCConnectionClassManagerListener>, std::__1::allocator<__weak id<SCConnectionClassManagerListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCConnectionClassManagerListener>, std::__1::allocator<__weak id<SCConnectionClassManagerListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCNetworkActivityListener>, std::__1::allocator<__weak id<SCNetworkActivityListener> > > > {
	vector<__weak id<SCNetworkActivityListener>, std::__1::allocator<__weak id<SCNetworkActivityListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCNetworkActivityListener>, std::__1::allocator<__weak id<SCNetworkActivityListener> > > >;

typedef struct __CFHTTPMessage* CFHTTPMessageRef;

typedef struct z_stream_s {
	char* next_in;
	unsigned avail_in;
	unsigned long long total_in;
	char* next_out;
	unsigned avail_out;
	unsigned long long total_out;
	char* msg;
	internal_state state;
	/*function pointer*/void* zalloc;
	/*function pointer*/void* zfree;
	void opaque;
	int data_type;
	unsigned long long adler;
	unsigned long long reserved;
} z_stream_s;

typedef struct NSRange {
	unsigned long long location;
	unsigned long long length;
} NSRange;

typedef struct CGImageSource* CGImageSourceRef;

typedef struct {
	unsigned reserved : 3;
	unsigned x : 20;
	unsigned y : 20;
	unsigned z : 20;
	unsigned g : 1;
} SCD_Struct_SC329;

typedef struct _CCCryptor* CCCryptorRef;

typedef struct CGDataProvider* CGDataProviderRef;

typedef struct ZZStandardCryptoEngine {
	int keys[3];
} ZZStandardCryptoEngine;

typedef struct {
	unsigned short field1[7];
} SCD_Struct_SC333;

typedef struct {
	unsigned short field1[2];
	short field2;
	float field3[2];
} SCD_Struct_SC334;

typedef struct {
	unsigned short( field1;
	/*function pointer*/void* field2;
	= field3;
	SCD_Struct_SC333 field4;
	SCD_Struct_SC333 field5;
	SCD_Struct_SC334) field6;
} SCD_Struct_SC335;

typedef struct {
	unsigned short field1[8];
} SCD_Struct_SC336;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, NSString *>, void *> *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, NSString *>, void *> *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long, std::__1::__hash_value_type<long, NSString *>, std::__1::hash<long>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long, std::__1::__hash_value_type<long, NSString *>, std::__1::hash<long>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<long, std::__1::__hash_value_type<long, NSString *>, std::__1::equal_to<long>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<long, std::__1::__hash_value_type<long, NSString *>, std::__1::equal_to<long>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, NSString *>, void *> *> {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, NSString *>, void *> *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, NSString *>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, NSString *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, NSString *>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, NSString *>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, NSString *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, NSString *>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, NSString *>, void *> *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, NSString *>, void *> *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, NSString *>, void *> *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, NSString *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, NSString *>, void *> *> *> > > {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, NSString *>, void *> *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, NSString *>, void *> *> *> > __second_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, NSString *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, NSString *>, void *> *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, NSString *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, NSString *>, void *> *> *> > > {
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, NSString *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, NSString *>, void *> *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, NSString *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, NSString *>, void *> *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<long, NSString *>, std::__1::__unordered_map_hasher<long, std::__1::__hash_value_type<long, NSString *>, std::__1::hash<long>, true>, std::__1::__unordered_map_equal<long, std::__1::__hash_value_type<long, NSString *>, std::__1::equal_to<long>, true>, std::__1::allocator<std::__1::__hash_value_type<long, NSString *> > > {
	unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, NSString *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, NSString *>, void *> *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, NSString *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, NSString *>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long, std::__1::__hash_value_type<long, NSString *>, std::__1::hash<long>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<long, std::__1::__hash_value_type<long, NSString *>, std::__1::equal_to<long>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<long, NSString *>, std::__1::__unordered_map_hasher<long, std::__1::__hash_value_type<long, NSString *>, std::__1::hash<long>, true>, std::__1::__unordered_map_equal<long, std::__1::__hash_value_type<long, NSString *>, std::__1::equal_to<long>, true>, std::__1::allocator<std::__1::__hash_value_type<long, NSString *> > >;

typedef struct unordered_map<long, NSString *, std::__1::hash<long>, std::__1::equal_to<long>, std::__1::allocator<std::__1::pair<const long, NSString *> > > {
	hash_table<std::__1::__hash_value_type<long, NSString *>, std::__1::__unordered_map_hasher<long, std::__1::__hash_value_type<long, NSString *>, std::__1::hash<long>, true>, std::__1::__unordered_map_equal<long, std::__1::__hash_value_type<long, NSString *>, std::__1::equal_to<long>, true>, std::__1::allocator<std::__1::__hash_value_type<long, NSString *> > > __table_;
} unordered_map<long, NSString *, std::__1::hash<long>, std::__1::equal_to<long>, std::__1::allocator<std::__1::pair<const long, NSString *> > >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<__weak Class, std::__1::__value_type<__weak Class, __weak id>, std::__1::less<__weak Class>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<__weak Class, std::__1::__value_type<__weak Class, __weak id>, std::__1::less<__weak Class>, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<__weak Class, __weak id>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<__weak Class, __weak id>, void *> > >;

typedef struct _tree<std::__1::__value_type<__weak Class, __weak id>, std::__1::__map_value_compare<__weak Class, std::__1::__value_type<__weak Class, __weak id>, std::__1::less<__weak Class>, true>, std::__1::allocator<std::__1::__value_type<__weak Class, __weak id> > > {
	__tree_end_node<std::__1::__tree_node_base<void *> *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<__weak Class, __weak id>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<__weak Class, std::__1::__value_type<__weak Class, __weak id>, std::__1::less<__weak Class>, true> > __pair3_;
} tree<std::__1::__value_type<__weak Class, __weak id>, std::__1::__map_value_compare<__weak Class, std::__1::__value_type<__weak Class, __weak id>, std::__1::less<__weak Class>, true>, std::__1::allocator<std::__1::__value_type<__weak Class, __weak id> > >;

typedef struct map<__weak Class, __weak id, std::__1::less<__weak Class>, std::__1::allocator<std::__1::pair<const __weak Class, __weak id> > > {
	tree<std::__1::__value_type<__weak Class, __weak id>, std::__1::__map_value_compare<__weak Class, std::__1::__value_type<__weak Class, __weak id>, std::__1::less<__weak Class>, true>, std::__1::allocator<std::__1::__value_type<__weak Class, __weak id> > > __tree_;
} map<__weak Class, __weak id, std::__1::less<__weak Class>, std::__1::allocator<std::__1::pair<const __weak Class, __weak id> > >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<__weak Class, std::__1::__value_type<__weak Class, std::__1::set<SCScopedAccess *__weak, std::__1::less<SCScopedAccess *__weak>, std::__1::allocator<SCScopedAccess *__weak> > >, std::__1::less<__weak Class>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<__weak Class, std::__1::__value_type<__weak Class, std::__1::set<SCScopedAccess *__weak, std::__1::less<SCScopedAccess *__weak>, std::__1::allocator<SCScopedAccess *__weak> > >, std::__1::less<__weak Class>, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<__weak Class, std::__1::set<SCScopedAccess *__weak, std::__1::less<SCScopedAccess *__weak>, std::__1::allocator<SCScopedAccess *__weak> > >, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<__weak Class, std::__1::set<SCScopedAccess *__weak, std::__1::less<SCScopedAccess *__weak>, std::__1::allocator<SCScopedAccess *__weak> > >, void *> > >;

typedef struct _tree<std::__1::__value_type<__weak Class, std::__1::set<SCScopedAccess *__weak, std::__1::less<SCScopedAccess *__weak>, std::__1::allocator<SCScopedAccess *__weak> > >, std::__1::__map_value_compare<__weak Class, std::__1::__value_type<__weak Class, std::__1::set<SCScopedAccess *__weak, std::__1::less<SCScopedAccess *__weak>, std::__1::allocator<SCScopedAccess *__weak> > >, std::__1::less<__weak Class>, true>, std::__1::allocator<std::__1::__value_type<__weak Class, std::__1::set<SCScopedAccess *__weak, std::__1::less<SCScopedAccess *__weak>, std::__1::allocator<SCScopedAccess *__weak> > > > > {
	__tree_end_node<std::__1::__tree_node_base<void *> *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<__weak Class, std::__1::set<SCScopedAccess *__weak, std::__1::less<SCScopedAccess *__weak>, std::__1::allocator<SCScopedAccess *__weak> > >, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<__weak Class, std::__1::__value_type<__weak Class, std::__1::set<SCScopedAccess *__weak, std::__1::less<SCScopedAccess *__weak>, std::__1::allocator<SCScopedAccess *__weak> > >, std::__1::less<__weak Class>, true> > __pair3_;
} tree<std::__1::__value_type<__weak Class, std::__1::set<SCScopedAccess *__weak, std::__1::less<SCScopedAccess *__weak>, std::__1::allocator<SCScopedAccess *__weak> > >, std::__1::__map_value_compare<__weak Class, std::__1::__value_type<__weak Class, std::__1::set<SCScopedAccess *__weak, std::__1::less<SCScopedAccess *__weak>, std::__1::allocator<SCScopedAccess *__weak> > >, std::__1::less<__weak Class>, true>, std::__1::allocator<std::__1::__value_type<__weak Class, std::__1::set<SCScopedAccess *__weak, std::__1::less<SCScopedAccess *__weak>, std::__1::allocator<SCScopedAccess *__weak> > > > >;

typedef struct map<__weak Class, std::__1::set<SCScopedAccess *__weak, std::__1::less<SCScopedAccess *__weak>, std::__1::allocator<SCScopedAccess *__weak> >, std::__1::less<__weak Class>, std::__1::allocator<std::__1::pair<const __weak Class, std::__1::set<SCScopedAccess *__weak, std::__1::less<SCScopedAccess *__weak>, std::__1::allocator<SCScopedAccess *__weak> > > > > {
	tree<std::__1::__value_type<__weak Class, std::__1::set<SCScopedAccess *__weak, std::__1::less<SCScopedAccess *__weak>, std::__1::allocator<SCScopedAccess *__weak> > >, std::__1::__map_value_compare<__weak Class, std::__1::__value_type<__weak Class, std::__1::set<SCScopedAccess *__weak, std::__1::less<SCScopedAccess *__weak>, std::__1::allocator<SCScopedAccess *__weak> > >, std::__1::less<__weak Class>, true>, std::__1::allocator<std::__1::__value_type<__weak Class, std::__1::set<SCScopedAccess *__weak, std::__1::less<SCScopedAccess *__weak>, std::__1::allocator<SCScopedAccess *__weak> > > > > __tree_;
} map<__weak Class, std::__1::set<SCScopedAccess *__weak, std::__1::less<SCScopedAccess *__weak>, std::__1::allocator<SCScopedAccess *__weak> >, std::__1::less<__weak Class>, std::__1::allocator<std::__1::pair<const __weak Class, std::__1::set<SCScopedAccess *__weak, std::__1::less<SCScopedAccess *__weak>, std::__1::allocator<SCScopedAccess *__weak> > > > >;

typedef struct SCAstVM* SCAstVMRef;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerIndexPath, void *> *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerIndexPath, void *> *> *> >;

typedef struct _compressed_pair<unsigned long, _IGListWorkingRangeHandlerIndexPathHash> {
	unsigned long long __first_;
} compressed_pair<unsigned long, _IGListWorkingRangeHandlerIndexPathHash>;

typedef struct _compressed_pair<float, std::__1::equal_to<_IGListWorkingRangeHandlerIndexPath> > {
	float __first_;
} compressed_pair<float, std::__1::equal_to<_IGListWorkingRangeHandlerIndexPath> >;

typedef struct _hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerIndexPath, void *> *> {
	__hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerIndexPath, void *> *> __next_;
} hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerIndexPath, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerIndexPath, void *> *>, std::__1::allocator<std::__1::__hash_node<_IGListWorkingRangeHandlerIndexPath, void *> > > {
	hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerIndexPath, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerIndexPath, void *> *>, std::__1::allocator<std::__1::__hash_node<_IGListWorkingRangeHandlerIndexPath, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerIndexPath, void *> *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerIndexPath, void *> *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerIndexPath, void *> *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerIndexPath, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerIndexPath, void *> *> *> > > {
	__hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerIndexPath, void *> *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerIndexPath, void *> *> *> > __second_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerIndexPath, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerIndexPath, void *> *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerIndexPath, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerIndexPath, void *> *> *> > > {
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerIndexPath, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerIndexPath, void *> *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerIndexPath, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerIndexPath, void *> *> *> > >;

typedef struct _hash_table<_IGListWorkingRangeHandlerIndexPath, _IGListWorkingRangeHandlerIndexPathHash, std::__1::equal_to<_IGListWorkingRangeHandlerIndexPath>, std::__1::allocator<_IGListWorkingRangeHandlerIndexPath> > {
	unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerIndexPath, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerIndexPath, void *> *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerIndexPath, void *> *>, std::__1::allocator<std::__1::__hash_node<_IGListWorkingRangeHandlerIndexPath, void *> > > __p1_;
	compressed_pair<unsigned long, _IGListWorkingRangeHandlerIndexPathHash> __p2_;
	compressed_pair<float, std::__1::equal_to<_IGListWorkingRangeHandlerIndexPath> > __p3_;
} hash_table<_IGListWorkingRangeHandlerIndexPath, _IGListWorkingRangeHandlerIndexPathHash, std::__1::equal_to<_IGListWorkingRangeHandlerIndexPath>, std::__1::allocator<_IGListWorkingRangeHandlerIndexPath> >;

typedef struct unordered_set<_IGListWorkingRangeHandlerIndexPath, _IGListWorkingRangeHandlerIndexPathHash, std::__1::equal_to<_IGListWorkingRangeHandlerIndexPath>, std::__1::allocator<_IGListWorkingRangeHandlerIndexPath> > {
	hash_table<_IGListWorkingRangeHandlerIndexPath, _IGListWorkingRangeHandlerIndexPathHash, std::__1::equal_to<_IGListWorkingRangeHandlerIndexPath>, std::__1::allocator<_IGListWorkingRangeHandlerIndexPath> > __table_;
} unordered_set<_IGListWorkingRangeHandlerIndexPath, _IGListWorkingRangeHandlerIndexPathHash, std::__1::equal_to<_IGListWorkingRangeHandlerIndexPath>, std::__1::allocator<_IGListWorkingRangeHandlerIndexPath> >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerSectionControllerWrapper, void *> *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerSectionControllerWrapper, void *> *> *> >;

typedef struct _compressed_pair<unsigned long, _IGListWorkingRangeHashID> {
	unsigned long long __first_;
} compressed_pair<unsigned long, _IGListWorkingRangeHashID>;

typedef struct _compressed_pair<float, std::__1::equal_to<_IGListWorkingRangeHandlerSectionControllerWrapper> > {
	float __first_;
} compressed_pair<float, std::__1::equal_to<_IGListWorkingRangeHandlerSectionControllerWrapper> >;

typedef struct _hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerSectionControllerWrapper, void *> *> {
	__hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerSectionControllerWrapper, void *> *> __next_;
} hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerSectionControllerWrapper, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerSectionControllerWrapper, void *> *>, std::__1::allocator<std::__1::__hash_node<_IGListWorkingRangeHandlerSectionControllerWrapper, void *> > > {
	hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerSectionControllerWrapper, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerSectionControllerWrapper, void *> *>, std::__1::allocator<std::__1::__hash_node<_IGListWorkingRangeHandlerSectionControllerWrapper, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerSectionControllerWrapper, void *> *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerSectionControllerWrapper, void *> *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerSectionControllerWrapper, void *> *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerSectionControllerWrapper, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerSectionControllerWrapper, void *> *> *> > > {
	__hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerSectionControllerWrapper, void *> *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerSectionControllerWrapper, void *> *> *> > __second_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerSectionControllerWrapper, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerSectionControllerWrapper, void *> *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerSectionControllerWrapper, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerSectionControllerWrapper, void *> *> *> > > {
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerSectionControllerWrapper, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerSectionControllerWrapper, void *> *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerSectionControllerWrapper, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerSectionControllerWrapper, void *> *> *> > >;

typedef struct _hash_table<_IGListWorkingRangeHandlerSectionControllerWrapper, _IGListWorkingRangeHashID, std::__1::equal_to<_IGListWorkingRangeHandlerSectionControllerWrapper>, std::__1::allocator<_IGListWorkingRangeHandlerSectionControllerWrapper> > {
	unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerSectionControllerWrapper, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerSectionControllerWrapper, void *> *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerSectionControllerWrapper, void *> *>, std::__1::allocator<std::__1::__hash_node<_IGListWorkingRangeHandlerSectionControllerWrapper, void *> > > __p1_;
	compressed_pair<unsigned long, _IGListWorkingRangeHashID> __p2_;
	compressed_pair<float, std::__1::equal_to<_IGListWorkingRangeHandlerSectionControllerWrapper> > __p3_;
} hash_table<_IGListWorkingRangeHandlerSectionControllerWrapper, _IGListWorkingRangeHashID, std::__1::equal_to<_IGListWorkingRangeHandlerSectionControllerWrapper>, std::__1::allocator<_IGListWorkingRangeHandlerSectionControllerWrapper> >;

typedef struct unordered_set<_IGListWorkingRangeHandlerSectionControllerWrapper, _IGListWorkingRangeHashID, std::__1::equal_to<_IGListWorkingRangeHandlerSectionControllerWrapper>, std::__1::allocator<_IGListWorkingRangeHandlerSectionControllerWrapper> > {
	hash_table<_IGListWorkingRangeHandlerSectionControllerWrapper, _IGListWorkingRangeHashID, std::__1::equal_to<_IGListWorkingRangeHandlerSectionControllerWrapper>, std::__1::allocator<_IGListWorkingRangeHandlerSectionControllerWrapper> > __table_;
} unordered_set<_IGListWorkingRangeHandlerSectionControllerWrapper, _IGListWorkingRangeHashID, std::__1::equal_to<_IGListWorkingRangeHandlerSectionControllerWrapper>, std::__1::allocator<_IGListWorkingRangeHandlerSectionControllerWrapper> >;

typedef struct _compressed_pair<IGListSectionEntry *, std::__1::allocator<IGListSectionEntry> > {
	IGListSectionEntry __first_;
} compressed_pair<IGListSectionEntry *, std::__1::allocator<IGListSectionEntry> >;

typedef struct vector<IGListSectionEntry, std::__1::allocator<IGListSectionEntry> > {
	IGListSectionEntry __begin_;
	IGListSectionEntry __end_;
	compressed_pair<IGListSectionEntry *, std::__1::allocator<IGListSectionEntry> > __end_cap_;
} vector<IGListSectionEntry, std::__1::allocator<IGListSectionEntry> >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCFeedManagerListener>, std::__1::allocator<__weak id<SCFeedManagerListener> > > > {
	vector<__weak id<SCFeedManagerListener>, std::__1::allocator<__weak id<SCFeedManagerListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCFeedManagerListener>, std::__1::allocator<__weak id<SCFeedManagerListener> > > >;

typedef struct objc_ivar* objc_ivarRef;

typedef struct shared_ptr<std::__1::vector<__weak id<SCGroupManagerListener>, std::__1::allocator<__weak id<SCGroupManagerListener> > > > {
	vector<__weak id<SCGroupManagerListener>, std::__1::allocator<__weak id<SCGroupManagerListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCGroupManagerListener>, std::__1::allocator<__weak id<SCGroupManagerListener> > > >;

typedef struct _compressed_pair<SCFlatMapProxyObserver *__strong *, std::__1::allocator<SCFlatMapProxyObserver *> > {
	id __first_;
} compressed_pair<SCFlatMapProxyObserver *__strong *, std::__1::allocator<SCFlatMapProxyObserver *> >;

typedef struct vector<SCFlatMapProxyObserver *, std::__1::allocator<SCFlatMapProxyObserver *> > {
	id __begin_;
	id __end_;
	compressed_pair<SCFlatMapProxyObserver *__strong *, std::__1::allocator<SCFlatMapProxyObserver *> > __end_cap_;
} vector<SCFlatMapProxyObserver *, std::__1::allocator<SCFlatMapProxyObserver *> >;

typedef struct atomic<unsigned long> {
	AQ __a_;
} atomic<unsigned long>;

typedef struct _compressed_pair<__strong id<SCDisposableObserver> *, std::__1::allocator<id<SCDisposableObserver> > > {
	id __first_;
} compressed_pair<__strong id<SCDisposableObserver> *, std::__1::allocator<id<SCDisposableObserver> > >;

typedef struct vector<id<SCDisposableObserver>, std::__1::allocator<id<SCDisposableObserver> > > {
	id __begin_;
	id __end_;
	compressed_pair<__strong id<SCDisposableObserver> *, std::__1::allocator<id<SCDisposableObserver> > > __end_cap_;
} vector<id<SCDisposableObserver>, std::__1::allocator<id<SCDisposableObserver> > >;

typedef struct atomic<bool> {
	AB __a_;
} atomic<bool>;

typedef struct _compressed_pair<__weak id<SCObserver> *, std::__1::allocator<__weak id<SCObserver> > > {
	id __first_;
} compressed_pair<__weak id<SCObserver> *, std::__1::allocator<__weak id<SCObserver> > >;

typedef struct vector<__weak id<SCObserver>, std::__1::allocator<__weak id<SCObserver> > > {
	id __begin_;
	id __end_;
	compressed_pair<__weak id<SCObserver> *, std::__1::allocator<__weak id<SCObserver> > > __end_cap_;
} vector<__weak id<SCObserver>, std::__1::allocator<__weak id<SCObserver> > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCFriendEventListener>, std::__1::allocator<__weak id<SCFriendEventListener> > > > {
	vector<__weak id<SCFriendEventListener>, std::__1::allocator<__weak id<SCFriendEventListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCFriendEventListener>, std::__1::allocator<__weak id<SCFriendEventListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCUpdatesResponseListener>, std::__1::allocator<__weak id<SCUpdatesResponseListener> > > > {
	vector<__weak id<SCUpdatesResponseListener>, std::__1::allocator<__weak id<SCUpdatesResponseListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCUpdatesResponseListener>, std::__1::allocator<__weak id<SCUpdatesResponseListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCUpdatesResponseListenerAnnouncerChangeListener>, std::__1::allocator<__weak id<SCUpdatesResponseListenerAnnouncerChangeListener> > > > {
	vector<__weak id<SCUpdatesResponseListenerAnnouncerChangeListener>, std::__1::allocator<__weak id<SCUpdatesResponseListenerAnnouncerChangeListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCUpdatesResponseListenerAnnouncerChangeListener>, std::__1::allocator<__weak id<SCUpdatesResponseListenerAnnouncerChangeListener> > > >;

typedef struct {
	double _min;
	double _max;
	double _total;
	int _samples;
} SCD_Struct_SC392;

typedef struct {
	BOOL field1;
	double field2;
	double field3;
	double field4;
} SCD_Struct_SC393;

typedef struct {
	id field1;
	long long field2;
	SCD_Struct_SC393 field3;
	BOOL field4;
} SCD_Struct_SC394;

typedef struct shared_ptr<std::__1::vector<__weak id<SCBitmojiDratiniManagerListener>, std::__1::allocator<__weak id<SCBitmojiDratiniManagerListener> > > > {
	vector<__weak id<SCBitmojiDratiniManagerListener>, std::__1::allocator<__weak id<SCBitmojiDratiniManagerListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCBitmojiDratiniManagerListener>, std::__1::allocator<__weak id<SCBitmojiDratiniManagerListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCBitmojiBuilderListener>, std::__1::allocator<__weak id<SCBitmojiBuilderListener> > > > {
	vector<__weak id<SCBitmojiBuilderListener>, std::__1::allocator<__weak id<SCBitmojiBuilderListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCBitmojiBuilderListener>, std::__1::allocator<__weak id<SCBitmojiBuilderListener> > > >;

typedef struct __CTFontDescriptor* CTFontDescriptorRef;

typedef struct __CTFont* CTFontRef;

typedef struct __CTLine* CTLineRef;

typedef struct CGColorSpace* CGColorSpaceRef;

typedef struct CGGradient* CGGradientRef;

typedef struct shared_ptr<std::__1::vector<__weak id<SCLensUIUpdateListener>, std::__1::allocator<__weak id<SCLensUIUpdateListener> > > > {
	vector<__weak id<SCLensUIUpdateListener>, std::__1::allocator<__weak id<SCLensUIUpdateListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCLensUIUpdateListener>, std::__1::allocator<__weak id<SCLensUIUpdateListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCLensDataFetcherListenerV2>, std::__1::allocator<__weak id<SCLensDataFetcherListenerV2> > > > {
	vector<__weak id<SCLensDataFetcherListenerV2>, std::__1::allocator<__weak id<SCLensDataFetcherListenerV2> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCLensDataFetcherListenerV2>, std::__1::allocator<__weak id<SCLensDataFetcherListenerV2> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCLensMetadataStoreListener>, std::__1::allocator<__weak id<SCLensMetadataStoreListener> > > > {
	vector<__weak id<SCLensMetadataStoreListener>, std::__1::allocator<__weak id<SCLensMetadataStoreListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCLensMetadataStoreListener>, std::__1::allocator<__weak id<SCLensMetadataStoreListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCLensDataProviderListener>, std::__1::allocator<__weak id<SCLensDataProviderListener> > > > {
	vector<__weak id<SCLensDataProviderListener>, std::__1::allocator<__weak id<SCLensDataProviderListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCLensDataProviderListener>, std::__1::allocator<__weak id<SCLensDataProviderListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCAudioSessionListener>, std::__1::allocator<__weak id<SCAudioSessionListener> > > > {
	vector<__weak id<SCAudioSessionListener>, std::__1::allocator<__weak id<SCAudioSessionListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCAudioSessionListener>, std::__1::allocator<__weak id<SCAudioSessionListener> > > >;

typedef struct _compressed_pair<__weak id<RTCAudioSessionDelegate> *, std::__1::allocator<__weak id<RTCAudioSessionDelegate> > > {
	id __first_;
} compressed_pair<__weak id<RTCAudioSessionDelegate> *, std::__1::allocator<__weak id<RTCAudioSessionDelegate> > >;

typedef struct vector<__weak id<RTCAudioSessionDelegate>, std::__1::allocator<__weak id<RTCAudioSessionDelegate> > > {
	id __begin_;
	id __end_;
	compressed_pair<__weak id<RTCAudioSessionDelegate> *, std::__1::allocator<__weak id<RTCAudioSessionDelegate> > > __end_cap_;
} vector<__weak id<RTCAudioSessionDelegate>, std::__1::allocator<__weak id<RTCAudioSessionDelegate> > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCTV3ActiveConversationsListener>, std::__1::allocator<__weak id<SCTV3ActiveConversationsListener> > > > {
	vector<__weak id<SCTV3ActiveConversationsListener>, std::__1::allocator<__weak id<SCTV3ActiveConversationsListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCTV3ActiveConversationsListener>, std::__1::allocator<__weak id<SCTV3ActiveConversationsListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCTV3CallStateListener>, std::__1::allocator<__weak id<SCTV3CallStateListener> > > > {
	vector<__weak id<SCTV3CallStateListener>, std::__1::allocator<__weak id<SCTV3CallStateListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCTV3CallStateListener>, std::__1::allocator<__weak id<SCTV3CallStateListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCTDrawerHeightListener>, std::__1::allocator<__weak id<SCTDrawerHeightListener> > > > {
	vector<__weak id<SCTDrawerHeightListener>, std::__1::allocator<__weak id<SCTDrawerHeightListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCTDrawerHeightListener>, std::__1::allocator<__weak id<SCTDrawerHeightListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCTV3MediaViewMediaChangeListener>, std::__1::allocator<__weak id<SCTV3MediaViewMediaChangeListener> > > > {
	vector<__weak id<SCTV3MediaViewMediaChangeListener>, std::__1::allocator<__weak id<SCTV3MediaViewMediaChangeListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCTV3MediaViewMediaChangeListener>, std::__1::allocator<__weak id<SCTV3MediaViewMediaChangeListener> > > >;

typedef struct SCTV3PresenceBitmojiState {
	double scale;
	double headOffset;
	double handsOffset;
	double draggingOffset;
	double typingArmOffset;
} SCTV3PresenceBitmojiState;

typedef struct shared_ptr<std::__1::vector<__weak id<SCTV3SessionWrapperListener>, std::__1::allocator<__weak id<SCTV3SessionWrapperListener> > > > {
	vector<__weak id<SCTV3SessionWrapperListener>, std::__1::allocator<__weak id<SCTV3SessionWrapperListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCTV3SessionWrapperListener>, std::__1::allocator<__weak id<SCTV3SessionWrapperListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCTV3SpeechActivityListener>, std::__1::allocator<__weak id<SCTV3SpeechActivityListener> > > > {
	vector<__weak id<SCTV3SpeechActivityListener>, std::__1::allocator<__weak id<SCTV3SpeechActivityListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCTV3SpeechActivityListener>, std::__1::allocator<__weak id<SCTV3SpeechActivityListener> > > >;

typedef struct S2CellId {
	unsigned long long id_;
} S2CellId;

typedef struct shared_ptr<std::__1::vector<__weak id<SCChatConversationStoreListener>, std::__1::allocator<__weak id<SCChatConversationStoreListener> > > > {
	vector<__weak id<SCChatConversationStoreListener>, std::__1::allocator<__weak id<SCChatConversationStoreListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCChatConversationStoreListener>, std::__1::allocator<__weak id<SCChatConversationStoreListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCChatConversationUpdaterListener>, std::__1::allocator<__weak id<SCChatConversationUpdaterListener> > > > {
	vector<__weak id<SCChatConversationUpdaterListener>, std::__1::allocator<__weak id<SCChatConversationUpdaterListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCChatConversationUpdaterListener>, std::__1::allocator<__weak id<SCChatConversationUpdaterListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCChatMessageReceiveListener>, std::__1::allocator<__weak id<SCChatMessageReceiveListener> > > > {
	vector<__weak id<SCChatMessageReceiveListener>, std::__1::allocator<__weak id<SCChatMessageReceiveListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCChatMessageReceiveListener>, std::__1::allocator<__weak id<SCChatMessageReceiveListener> > > >;

typedef struct {
	long long field1;
	unsigned long long field2;
} SCD_Struct_SC420;

typedef struct shared_ptr<std::__1::vector<__weak id<SCSnapchattersDataProviderListener>, std::__1::allocator<__weak id<SCSnapchattersDataProviderListener> > > > {
	vector<__weak id<SCSnapchattersDataProviderListener>, std::__1::allocator<__weak id<SCSnapchattersDataProviderListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCSnapchattersDataProviderListener>, std::__1::allocator<__weak id<SCSnapchattersDataProviderListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCSnapchattersDataRequestListener>, std::__1::allocator<__weak id<SCSnapchattersDataRequestListener> > > > {
	vector<__weak id<SCSnapchattersDataRequestListener>, std::__1::allocator<__weak id<SCSnapchattersDataRequestListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCSnapchattersDataRequestListener>, std::__1::allocator<__weak id<SCSnapchattersDataRequestListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCApplicationDataListener>, std::__1::allocator<__weak id<SCApplicationDataListener> > > > {
	vector<__weak id<SCApplicationDataListener>, std::__1::allocator<__weak id<SCApplicationDataListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCApplicationDataListener>, std::__1::allocator<__weak id<SCApplicationDataListener> > > >;

typedef struct __CVPixelBufferPool* CVPixelBufferPoolRef;

typedef struct {
	float field1;
	float field2;
	BOOL field3;
} SCD_Struct_SC425;

typedef struct shared_ptr<std::__1::vector<__weak id<SCImageProcessColorFilterSessionListener>, std::__1::allocator<__weak id<SCImageProcessColorFilterSessionListener> > > > {
	vector<__weak id<SCImageProcessColorFilterSessionListener>, std::__1::allocator<__weak id<SCImageProcessColorFilterSessionListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCImageProcessColorFilterSessionListener>, std::__1::allocator<__weak id<SCImageProcessColorFilterSessionListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCImageProcessVideoPlaybackSessionListener>, std::__1::allocator<__weak id<SCImageProcessVideoPlaybackSessionListener> > > > {
	vector<__weak id<SCImageProcessVideoPlaybackSessionListener>, std::__1::allocator<__weak id<SCImageProcessVideoPlaybackSessionListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCImageProcessVideoPlaybackSessionListener>, std::__1::allocator<__weak id<SCImageProcessVideoPlaybackSessionListener> > > >;

typedef struct OpaqueVTDecompressionSession* OpaqueVTDecompressionSessionRef;

typedef struct atomic<SCMediaScenePath> {
	A? __a_;
} atomic<SCMediaScenePath>;

typedef struct shared_ptr<std::__1::vector<__weak id<SCCloudFSDiskUsedListener>, std::__1::allocator<__weak id<SCCloudFSDiskUsedListener> > > > {
	vector<__weak id<SCCloudFSDiskUsedListener>, std::__1::allocator<__weak id<SCCloudFSDiskUsedListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCCloudFSDiskUsedListener>, std::__1::allocator<__weak id<SCCloudFSDiskUsedListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCCloudSyncStatusListener>, std::__1::allocator<__weak id<SCCloudSyncStatusListener> > > > {
	vector<__weak id<SCCloudSyncStatusListener>, std::__1::allocator<__weak id<SCCloudSyncStatusListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCCloudSyncStatusListener>, std::__1::allocator<__weak id<SCCloudSyncStatusListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCMediaFileRestorerStatusListener>, std::__1::allocator<__weak id<SCMediaFileRestorerStatusListener> > > > {
	vector<__weak id<SCMediaFileRestorerStatusListener>, std::__1::allocator<__weak id<SCMediaFileRestorerStatusListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCMediaFileRestorerStatusListener>, std::__1::allocator<__weak id<SCMediaFileRestorerStatusListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCSpectaclesCBCentralManagerEventListener>, std::__1::allocator<__weak id<SCSpectaclesCBCentralManagerEventListener> > > > {
	vector<__weak id<SCSpectaclesCBCentralManagerEventListener>, std::__1::allocator<__weak id<SCSpectaclesCBCentralManagerEventListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCSpectaclesCBCentralManagerEventListener>, std::__1::allocator<__weak id<SCSpectaclesCBCentralManagerEventListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCSpectaclesDeviceEventListener>, std::__1::allocator<__weak id<SCSpectaclesDeviceEventListener> > > > {
	vector<__weak id<SCSpectaclesDeviceEventListener>, std::__1::allocator<__weak id<SCSpectaclesDeviceEventListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCSpectaclesDeviceEventListener>, std::__1::allocator<__weak id<SCSpectaclesDeviceEventListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCSpectaclesSsidEventListener>, std::__1::allocator<__weak id<SCSpectaclesSsidEventListener> > > > {
	vector<__weak id<SCSpectaclesSsidEventListener>, std::__1::allocator<__weak id<SCSpectaclesSsidEventListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCSpectaclesSsidEventListener>, std::__1::allocator<__weak id<SCSpectaclesSsidEventListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCLagunaEventListener>, std::__1::allocator<__weak id<SCLagunaEventListener> > > > {
	vector<__weak id<SCLagunaEventListener>, std::__1::allocator<__weak id<SCLagunaEventListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCLagunaEventListener>, std::__1::allocator<__weak id<SCLagunaEventListener> > > >;

typedef struct SRDelegateAvailableMethods {
	unsigned didReceiveMessage : 1;
	unsigned didReceiveMessageWithString : 1;
	unsigned didReceiveMessageWithData : 1;
	unsigned didOpen : 1;
	unsigned didFailWithError : 1;
	unsigned didCloseWithCode : 1;
	unsigned didReceivePing : 1;
	unsigned didReceivePong : 1;
	unsigned shouldConvertTextFrameToString : 1;
} SRDelegateAvailableMethods;

typedef struct {
	BOOL field1;
	unsigned char field2;
	BOOL field3;
	unsigned long long field4;
} SCD_Struct_SR438;

typedef struct shared_ptr<std::__1::vector<__weak id<SCMapConfigurationListener>, std::__1::allocator<__weak id<SCMapConfigurationListener> > > > {
	vector<__weak id<SCMapConfigurationListener>, std::__1::allocator<__weak id<SCMapConfigurationListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCMapConfigurationListener>, std::__1::allocator<__weak id<SCMapConfigurationListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCMapViewportListener>, std::__1::allocator<__weak id<SCMapViewportListener> > > > {
	vector<__weak id<SCMapViewportListener>, std::__1::allocator<__weak id<SCMapViewportListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCMapViewportListener>, std::__1::allocator<__weak id<SCMapViewportListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCMapboxStyleProviderListener>, std::__1::allocator<__weak id<SCMapboxStyleProviderListener> > > > {
	vector<__weak id<SCMapboxStyleProviderListener>, std::__1::allocator<__weak id<SCMapboxStyleProviderListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCMapboxStyleProviderListener>, std::__1::allocator<__weak id<SCMapboxStyleProviderListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCMGLMapViewListener>, std::__1::allocator<__weak id<SCMGLMapViewListener> > > > {
	vector<__weak id<SCMGLMapViewListener>, std::__1::allocator<__weak id<SCMGLMapViewListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCMGLMapViewListener>, std::__1::allocator<__weak id<SCMGLMapViewListener> > > >;

typedef struct __GLsync* GLsyncRef;

typedef struct {
	CGPoint field1;
	CGPoint field2;
	CGPoint field3;
	CGPoint field4;
} SCD_Struct_SC444;

typedef struct {
	float x;
	float y;
	float z;
	float w;
} SCD_Struct_SC445;

typedef union GLKVector4 {
	SCD_Struct_SC445 field1;
	SCD_Struct_SC445 field2;
	SCD_Struct_SC445 field3;
	float v[4];
} GLKVector4;

typedef struct {
	float lastBlobIntensity[187];
	float blobs[187];
	float intensity[187];
	int shapeType;
} SCD_Struct_SC447;

typedef struct SCXMapBounds {
	CLLocationCoordinate2D sw;
	CLLocationCoordinate2D ne;
	double zoom;
} SCXMapBounds;

typedef struct SCMapCarouselViewPadding {
	double peek;
	double spacing;
	double bottom;
} SCMapCarouselViewPadding;

typedef struct {
	long long version;
	void info;
	/*function pointer*/void* retain;
	/*function pointer*/void* release;
	/*function pointer*/void* copyDescription;
} SCD_Struct_GC450;

typedef struct __CFReadStream* CFReadStreamRef;

typedef struct __CFWriteStream* CFWriteStreamRef;

typedef struct SSLContext* SSLContextRef;

typedef struct shared_ptr<std::__1::vector<__weak id<SCLagunaFirmwareUpdateEventListener>, std::__1::allocator<__weak id<SCLagunaFirmwareUpdateEventListener> > > > {
	vector<__weak id<SCLagunaFirmwareUpdateEventListener>, std::__1::allocator<__weak id<SCLagunaFirmwareUpdateEventListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCLagunaFirmwareUpdateEventListener>, std::__1::allocator<__weak id<SCLagunaFirmwareUpdateEventListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCLagunaHomeWifiManagerEventListener>, std::__1::allocator<__weak id<SCLagunaHomeWifiManagerEventListener> > > > {
	vector<__weak id<SCLagunaHomeWifiManagerEventListener>, std::__1::allocator<__weak id<SCLagunaHomeWifiManagerEventListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCLagunaHomeWifiManagerEventListener>, std::__1::allocator<__weak id<SCLagunaHomeWifiManagerEventListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCLagunaAppStatusListener>, std::__1::allocator<__weak id<SCLagunaAppStatusListener> > > > {
	vector<__weak id<SCLagunaAppStatusListener>, std::__1::allocator<__weak id<SCLagunaAppStatusListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCLagunaAppStatusListener>, std::__1::allocator<__weak id<SCLagunaAppStatusListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCGalleryLagunaWifiControllerEventListener>, std::__1::allocator<__weak id<SCGalleryLagunaWifiControllerEventListener> > > > {
	vector<__weak id<SCGalleryLagunaWifiControllerEventListener>, std::__1::allocator<__weak id<SCGalleryLagunaWifiControllerEventListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCGalleryLagunaWifiControllerEventListener>, std::__1::allocator<__weak id<SCGalleryLagunaWifiControllerEventListener> > > >;

typedef struct {
	unsigned field1;
	unsigned field2;
	unsigned char field3;
	unsigned char field4;
	unsigned char field5;
	unsigned char field6;
	unsigned char field7;
} SCD_Struct_YY458;

typedef struct {
	SCD_Struct_YY458 field1;
	/*function pointer*/void* field2;
	unsigned field3;
	/*function pointer*/void* field4;
	unsigned field5;
	unsigned field6;
	unsigned field7;
	unsigned field8;
	unsigned field9;
	unsigned field10;
	BOOL field11;
} SCD_Struct_YY459;

typedef struct WebPDemuxer* WebPDemuxerRef;

typedef struct CGImageDestination* CGImageDestinationRef;

typedef struct {
	id field1;
	id field2;
	/*function pointer*/void* field3;
	id field4;
	/*function pointer*/void* field5;
	double field6;
} SCD_Struct_PO462;

typedef struct SpringSolver<POP::Vector4<double> >* SpringSolver<POP::Vector4<double> >Ref;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<std::__1::shared_ptr<POPAnimatorItem>, void *> > > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<std::__1::shared_ptr<POPAnimatorItem>, void *> > >;

typedef struct _list_node_base<std::__1::shared_ptr<POPAnimatorItem>, void *> {
	__list_node_base<std::__1::shared_ptr<POPAnimatorItem>, void *> __prev_;
	__list_node_base<std::__1::shared_ptr<POPAnimatorItem>, void *> __next_;
} list_node_base<std::__1::shared_ptr<POPAnimatorItem>, void *>;

typedef struct list<std::__1::shared_ptr<POPAnimatorItem>, std::__1::allocator<std::__1::shared_ptr<POPAnimatorItem> > > {
	list_node_base<std::__1::shared_ptr<POPAnimatorItem>, void *> __end_;
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<std::__1::shared_ptr<POPAnimatorItem>, void *> > > __size_alloc_;
} list<std::__1::shared_ptr<POPAnimatorItem>, std::__1::allocator<std::__1::shared_ptr<POPAnimatorItem> > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCOnDemandGeofilterDataControllerListener>, std::__1::allocator<__weak id<SCOnDemandGeofilterDataControllerListener> > > > {
	vector<__weak id<SCOnDemandGeofilterDataControllerListener>, std::__1::allocator<__weak id<SCOnDemandGeofilterDataControllerListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCOnDemandGeofilterDataControllerListener>, std::__1::allocator<__weak id<SCOnDemandGeofilterDataControllerListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCOnDemandGeofilterDataControllerNotificationListener>, std::__1::allocator<__weak id<SCOnDemandGeofilterDataControllerNotificationListener> > > > {
	vector<__weak id<SCOnDemandGeofilterDataControllerNotificationListener>, std::__1::allocator<__weak id<SCOnDemandGeofilterDataControllerNotificationListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCOnDemandGeofilterDataControllerNotificationListener>, std::__1::allocator<__weak id<SCOnDemandGeofilterDataControllerNotificationListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCOnDemandLensAllTimeHitsTemplateDataStoreProtocolListener>, std::__1::allocator<__weak id<SCOnDemandLensAllTimeHitsTemplateDataStoreProtocolListener> > > > {
	vector<__weak id<SCOnDemandLensAllTimeHitsTemplateDataStoreProtocolListener>, std::__1::allocator<__weak id<SCOnDemandLensAllTimeHitsTemplateDataStoreProtocolListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCOnDemandLensAllTimeHitsTemplateDataStoreProtocolListener>, std::__1::allocator<__weak id<SCOnDemandLensAllTimeHitsTemplateDataStoreProtocolListener> > > >;

typedef struct shared_ptr<std::__1::map<NSString *, std::__1::shared_ptr<std::__1::vector<__weak id<SCOperaEventListener>, std::__1::allocator<__weak id<SCOperaEventListener> > > >, std::__1::less<NSString *>, std::__1::allocator<std::__1::pair<NSString *const, std::__1::shared_ptr<std::__1::vector<__weak id<SCOperaEventListener>, std::__1::allocator<__weak id<SCOperaEventListener> > > > > > > > {
	map<NSString *, std::__1::shared_ptr<std::__1::vector<__weak id<SCOperaEventListener>, std::__1::allocator<__weak id<SCOperaEventListener> > > >, std::__1::less<NSString *>, std::__1::allocator<std::__1::pair<NSString *const, std::__1::shared_ptr<std::__1::vector<__weak id<SCOperaEventListener>, std::__1::allocator<__weak id<SCOperaEventListener> > > > > > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::map<NSString *, std::__1::shared_ptr<std::__1::vector<__weak id<SCOperaEventListener>, std::__1::allocator<__weak id<SCOperaEventListener> > > >, std::__1::less<NSString *>, std::__1::allocator<std::__1::pair<NSString *const, std::__1::shared_ptr<std::__1::vector<__weak id<SCOperaEventListener>, std::__1::allocator<__weak id<SCOperaEventListener> > > > > > > >;

typedef struct shared_ptr<std::__1::map<__weak id<SCOperaEventListener>, std::__1::shared_ptr<std::__1::set<NSString *, std::__1::less<NSString *>, std::__1::allocator<NSString *> > >, std::__1::less<__weak id<SCOperaEventListener> >, std::__1::allocator<std::__1::pair<const __weak id<SCOperaEventListener>, std::__1::shared_ptr<std::__1::set<NSString *, std::__1::less<NSString *>, std::__1::allocator<NSString *> > > > > > > {
	map<__weak id<SCOperaEventListener>, std::__1::shared_ptr<std::__1::set<NSString *, std::__1::less<NSString *>, std::__1::allocator<NSString *> > >, std::__1::less<__weak id<SCOperaEventListener> >, std::__1::allocator<std::__1::pair<const __weak id<SCOperaEventListener>, std::__1::shared_ptr<std::__1::set<NSString *, std::__1::less<NSString *>, std::__1::allocator<NSString *> > > > > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::map<__weak id<SCOperaEventListener>, std::__1::shared_ptr<std::__1::set<NSString *, std::__1::less<NSString *>, std::__1::allocator<NSString *> > >, std::__1::less<__weak id<SCOperaEventListener> >, std::__1::allocator<std::__1::pair<const __weak id<SCOperaEventListener>, std::__1::shared_ptr<std::__1::set<NSString *, std::__1::less<NSString *>, std::__1::allocator<NSString *> > > > > > >;

typedef struct shared_ptr<std::__1::map<NSString *, __weak id<SCOperaEventListener>, std::__1::less<NSString *>, std::__1::allocator<std::__1::pair<NSString *const, __weak id<SCOperaEventListener> > > > > {
	map<NSString *, __weak id<SCOperaEventListener>, std::__1::less<NSString *>, std::__1::allocator<std::__1::pair<NSString *const, __weak id<SCOperaEventListener> > > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::map<NSString *, __weak id<SCOperaEventListener>, std::__1::less<NSString *>, std::__1::allocator<std::__1::pair<NSString *const, __weak id<SCOperaEventListener> > > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCOperaViewersCellViewModelListener>, std::__1::allocator<__weak id<SCOperaViewersCellViewModelListener> > > > {
	vector<__weak id<SCOperaViewersCellViewModelListener>, std::__1::allocator<__weak id<SCOperaViewersCellViewModelListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCOperaViewersCellViewModelListener>, std::__1::allocator<__weak id<SCOperaViewersCellViewModelListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCOperaWebAppAccessoryEventListener>, std::__1::allocator<__weak id<SCOperaWebAppAccessoryEventListener> > > > {
	vector<__weak id<SCOperaWebAppAccessoryEventListener>, std::__1::allocator<__weak id<SCOperaWebAppAccessoryEventListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCOperaWebAppAccessoryEventListener>, std::__1::allocator<__weak id<SCOperaWebAppAccessoryEventListener> > > >;

typedef struct DetachedBuffer {
	Allocator allocator_;
	BOOL own_allocator_;
	char* buf_;
	unsigned long long reserved_;
	char* cur_;
	unsigned long long size_;
} DetachedBuffer;

typedef struct __CFBitVector* CFBitVectorRef;

typedef struct shared_ptr<std::__1::vector<__weak id<SCScreenshotSendListener>, std::__1::allocator<__weak id<SCScreenshotSendListener> > > > {
	vector<__weak id<SCScreenshotSendListener>, std::__1::allocator<__weak id<SCScreenshotSendListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCScreenshotSendListener>, std::__1::allocator<__weak id<SCScreenshotSendListener> > > >;

typedef struct shared_ptr<ManyTargetTracker> {
	ManyTargetTracker __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<ManyTargetTracker>;

typedef struct atomic<int> {
	Ai __a_;
} atomic<int>;

typedef struct sqlcph3_stmt* sqlcph3_stmtRef;

typedef struct sqlcph3* sqlcph3Ref;

typedef struct dispatch_semaphore_s* dispatch_semaphore_sRef;

typedef struct YGNode* YGNodeRef;

typedef struct {
	SCD_Struct_LS191 field1;
	SCD_Struct_LS191 field2;
	SCD_Struct_LS191 field3;
	unsigned field4;
} SCD_Struct_SC484;

typedef struct {
	/*function pointer*/void* field1;
	double field2;
} SCD_Struct_LS485;

typedef struct {
	SCD_Struct_LS160 field1;
	double field2;
} SCD_Struct_LS486;

typedef struct {
	SCD_Struct_LS191 startTime;
	SCD_Struct_LS191 endTime;
	SCD_Struct_LS191 duration;
	unsigned sessionId;
} SCD_Struct_SC487;

typedef struct __CVMetalTextureCache* CVMetalTextureCacheRef;

typedef struct RenderData {
	opaqueCMSampleBuffer sampleBuffer;
	__CVBuffer depthDataMap;
	CGPoint depthBlurPointOfInterest;
} RenderData;

typedef struct SampleBufferMetadata {
	int isoSpeedRating;
	float exposureTime;
	float brightness;
} SampleBufferMetadata;

typedef struct OpaqueAudioQueue* OpaqueAudioQueueRef;

typedef struct opaqueCMFormatDescription* opaqueCMFormatDescriptionRef;

typedef struct opaqueCMBufferQueue* opaqueCMBufferQueueRef;

typedef struct OpaqueAudioFileID* OpaqueAudioFileIDRef;

typedef struct AudioStreamBasicDescription {
	double mSampleRate;
	unsigned mFormatID;
	unsigned mFormatFlags;
	unsigned mBytesPerPacket;
	unsigned mFramesPerPacket;
	unsigned mBytesPerFrame;
	unsigned mChannelsPerFrame;
	unsigned mBitsPerChannel;
	unsigned mReserved;
} AudioStreamBasicDescription;

typedef struct shared_ptr<std::__1::vector<__weak id<SCManagedAudioDataSourceListener>, std::__1::allocator<__weak id<SCManagedAudioDataSourceListener> > > > {
	vector<__weak id<SCManagedAudioDataSourceListener>, std::__1::allocator<__weak id<SCManagedAudioDataSourceListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCManagedAudioDataSourceListener>, std::__1::allocator<__weak id<SCManagedAudioDataSourceListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCManagedCapturerListener>, std::__1::allocator<__weak id<SCManagedCapturerListener> > > > {
	vector<__weak id<SCManagedCapturerListener>, std::__1::allocator<__weak id<SCManagedCapturerListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCManagedCapturerListener>, std::__1::allocator<__weak id<SCManagedCapturerListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCManagedDeviceCapacityAnalyzerListener>, std::__1::allocator<__weak id<SCManagedDeviceCapacityAnalyzerListener> > > > {
	vector<__weak id<SCManagedDeviceCapacityAnalyzerListener>, std::__1::allocator<__weak id<SCManagedDeviceCapacityAnalyzerListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCManagedDeviceCapacityAnalyzerListener>, std::__1::allocator<__weak id<SCManagedDeviceCapacityAnalyzerListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCManagedVideoDataSourceListener>, std::__1::allocator<__weak id<SCManagedVideoDataSourceListener> > > > {
	vector<__weak id<SCManagedVideoDataSourceListener>, std::__1::allocator<__weak id<SCManagedVideoDataSourceListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCManagedVideoDataSourceListener>, std::__1::allocator<__weak id<SCManagedVideoDataSourceListener> > > >;

typedef struct {
	unsigned field1 : 1;
	unsigned field2 : 1;
	unsigned field3 : 1;
	unsigned field4 : 1;
} SCD_Struct_SC500;

typedef struct shared_ptr<std::__1::vector<__weak id<SCMediaDrawerDataSourceListener>, std::__1::allocator<__weak id<SCMediaDrawerDataSourceListener> > > > {
	vector<__weak id<SCMediaDrawerDataSourceListener>, std::__1::allocator<__weak id<SCMediaDrawerDataSourceListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCMediaDrawerDataSourceListener>, std::__1::allocator<__weak id<SCMediaDrawerDataSourceListener> > > >;

typedef struct SC1On1AndGroupSyncState {
	BOOL oneOnOneAndGroupSynced;
	BOOL forceResetConversations;
	long long unarchivedInitial1On1Count;
	long long unarchivedPaginated1On1Count;
} SC1On1AndGroupSyncState;

typedef struct shared_ptr<std::__1::vector<__weak id<SCChatViewLifeCycleListener>, std::__1::allocator<__weak id<SCChatViewLifeCycleListener> > > > {
	vector<__weak id<SCChatViewLifeCycleListener>, std::__1::allocator<__weak id<SCChatViewLifeCycleListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCChatViewLifeCycleListener>, std::__1::allocator<__weak id<SCChatViewLifeCycleListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCChatViewModelListener>, std::__1::allocator<__weak id<SCChatViewModelListener> > > > {
	vector<__weak id<SCChatViewModelListener>, std::__1::allocator<__weak id<SCChatViewModelListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCChatViewModelListener>, std::__1::allocator<__weak id<SCChatViewModelListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCChatSideMenuLifeCycleListener>, std::__1::allocator<__weak id<SCChatSideMenuLifeCycleListener> > > > {
	vector<__weak id<SCChatSideMenuLifeCycleListener>, std::__1::allocator<__weak id<SCChatSideMenuLifeCycleListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCChatSideMenuLifeCycleListener>, std::__1::allocator<__weak id<SCChatSideMenuLifeCycleListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCChatCallingAccessoryListener>, std::__1::allocator<__weak id<SCChatCallingAccessoryListener> > > > {
	vector<__weak id<SCChatCallingAccessoryListener>, std::__1::allocator<__weak id<SCChatCallingAccessoryListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCChatCallingAccessoryListener>, std::__1::allocator<__weak id<SCChatCallingAccessoryListener> > > >;

typedef struct {
	CGSize field1;
	CLLocationCoordinate2D field2;
} SCD_Struct_SC507;

typedef struct _compressed_pair<MPSImageDescriptor *__strong *, std::__1::allocator<MPSImageDescriptor *> > {
	id __first_;
} compressed_pair<MPSImageDescriptor *__strong *, std::__1::allocator<MPSImageDescriptor *> >;

typedef struct vector<MPSImageDescriptor *, std::__1::allocator<MPSImageDescriptor *> > {
	id __begin_;
	id __end_;
	compressed_pair<MPSImageDescriptor *__strong *, std::__1::allocator<MPSImageDescriptor *> > __end_cap_;
} vector<MPSImageDescriptor *, std::__1::allocator<MPSImageDescriptor *> >;

typedef struct _compressed_pair<ConvolutionLayer *__strong *, std::__1::allocator<ConvolutionLayer *> > {
	id __first_;
} compressed_pair<ConvolutionLayer *__strong *, std::__1::allocator<ConvolutionLayer *> >;

typedef struct vector<ConvolutionLayer *, std::__1::allocator<ConvolutionLayer *> > {
	id __begin_;
	id __end_;
	compressed_pair<ConvolutionLayer *__strong *, std::__1::allocator<ConvolutionLayer *> > __end_cap_;
} vector<ConvolutionLayer *, std::__1::allocator<ConvolutionLayer *> >;

typedef struct _compressed_pair<DepthwiseConvolutionLayer *__strong *, std::__1::allocator<DepthwiseConvolutionLayer *> > {
	id __first_;
} compressed_pair<DepthwiseConvolutionLayer *__strong *, std::__1::allocator<DepthwiseConvolutionLayer *> >;

typedef struct vector<DepthwiseConvolutionLayer *, std::__1::allocator<DepthwiseConvolutionLayer *> > {
	id __begin_;
	id __end_;
	compressed_pair<DepthwiseConvolutionLayer *__strong *, std::__1::allocator<DepthwiseConvolutionLayer *> > __end_cap_;
} vector<DepthwiseConvolutionLayer *, std::__1::allocator<DepthwiseConvolutionLayer *> >;

typedef struct _compressed_pair<DeconvolutionLayer *__strong *, std::__1::allocator<DeconvolutionLayer *> > {
	id __first_;
} compressed_pair<DeconvolutionLayer *__strong *, std::__1::allocator<DeconvolutionLayer *> >;

typedef struct vector<DeconvolutionLayer *, std::__1::allocator<DeconvolutionLayer *> > {
	id __begin_;
	id __end_;
	compressed_pair<DeconvolutionLayer *__strong *, std::__1::allocator<DeconvolutionLayer *> > __end_cap_;
} vector<DeconvolutionLayer *, std::__1::allocator<DeconvolutionLayer *> >;

typedef struct _compressed_pair<InstanceNormLayer *__strong *, std::__1::allocator<InstanceNormLayer *> > {
	id __first_;
} compressed_pair<InstanceNormLayer *__strong *, std::__1::allocator<InstanceNormLayer *> >;

typedef struct vector<InstanceNormLayer *, std::__1::allocator<InstanceNormLayer *> > {
	id __begin_;
	id __end_;
	compressed_pair<InstanceNormLayer *__strong *, std::__1::allocator<InstanceNormLayer *> > __end_cap_;
} vector<InstanceNormLayer *, std::__1::allocator<InstanceNormLayer *> >;

typedef struct _compressed_pair<cv::Point_<int> *, std::__1::allocator<cv::Point_<int> > > {
	Point_<int> __first_;
} compressed_pair<cv::Point_<int> *, std::__1::allocator<cv::Point_<int> > >;

typedef struct vector<cv::Point_<int>, std::__1::allocator<cv::Point_<int> > > {
	Point_<int> __begin_;
	Point_<int> __end_;
	compressed_pair<cv::Point_<int> *, std::__1::allocator<cv::Point_<int> > > __end_cap_;
} vector<cv::Point_<int>, std::__1::allocator<cv::Point_<int> > >;

typedef struct Mat {
	int flags;
	int dims;
	int rows;
	int cols;
	char* data;
	char* datastart;
	char* dataend;
	char* datalimit;
	MatAllocator allocator;
	UMatData u;
	MatSize size;
	MatStep step;
} Mat;

typedef struct InternalMetadataWithArena {
	void ptr_;
} InternalMetadataWithArena;

typedef struct RepeatedPtrField<tensorflow::NodeDef> {
	Arena arena_;
	int current_size_;
	int total_size_;
	Rep rep_;
} RepeatedPtrField<tensorflow::NodeDef>;

typedef struct GraphDef {
	/*function pointer*/void* _vptr$MessageLite;
	InternalMetadataWithArena _internal_metadata_;
	BOOL _is_default_instance_;
	RepeatedPtrField<tensorflow::NodeDef> node_;
	VersionDef versions_;
	FunctionDefLibrary library_;
	int version_;
	int _cached_size_;
} GraphDef;

typedef struct shared_ptr<std::__1::vector<__weak id<SCTileDataSourceListener>, std::__1::allocator<__weak id<SCTileDataSourceListener> > > > {
	vector<__weak id<SCTileDataSourceListener>, std::__1::allocator<__weak id<SCTileDataSourceListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCTileDataSourceListener>, std::__1::allocator<__weak id<SCTileDataSourceListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCGalleryLagunaContentListener>, std::__1::allocator<__weak id<SCGalleryLagunaContentListener> > > > {
	vector<__weak id<SCGalleryLagunaContentListener>, std::__1::allocator<__weak id<SCGalleryLagunaContentListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCGalleryLagunaContentListener>, std::__1::allocator<__weak id<SCGalleryLagunaContentListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCMergedGalleryDataSourceListener>, std::__1::allocator<__weak id<SCMergedGalleryDataSourceListener> > > > {
	vector<__weak id<SCMergedGalleryDataSourceListener>, std::__1::allocator<__weak id<SCMergedGalleryDataSourceListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCMergedGalleryDataSourceListener>, std::__1::allocator<__weak id<SCMergedGalleryDataSourceListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCGalleryEGOCipherKeyProviderListener>, std::__1::allocator<__weak id<SCGalleryEGOCipherKeyProviderListener> > > > {
	vector<__weak id<SCGalleryEGOCipherKeyProviderListener>, std::__1::allocator<__weak id<SCGalleryEGOCipherKeyProviderListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCGalleryEGOCipherKeyProviderListener>, std::__1::allocator<__weak id<SCGalleryEGOCipherKeyProviderListener> > > >;

typedef struct _compressed_pair<FaceBioGraphics *, std::__1::default_delete<FaceBioGraphics> > {
	FaceBioGraphics __first_;
} compressed_pair<FaceBioGraphics *, std::__1::default_delete<FaceBioGraphics> >;

typedef struct unique_ptr<FaceBioGraphics, std::__1::default_delete<FaceBioGraphics> > {
	compressed_pair<FaceBioGraphics *, std::__1::default_delete<FaceBioGraphics> > __ptr_;
} unique_ptr<FaceBioGraphics, std::__1::default_delete<FaceBioGraphics> >;

typedef struct _compressed_pair<LS::Tracking::Face::TrackerWrapper *, std::__1::default_delete<LS::Tracking::Face::TrackerWrapper> > {
	TrackerWrapper __first_;
} compressed_pair<LS::Tracking::Face::TrackerWrapper *, std::__1::default_delete<LS::Tracking::Face::TrackerWrapper> >;

typedef struct unique_ptr<LS::Tracking::Face::TrackerWrapper, std::__1::default_delete<LS::Tracking::Face::TrackerWrapper> > {
	compressed_pair<LS::Tracking::Face::TrackerWrapper *, std::__1::default_delete<LS::Tracking::Face::TrackerWrapper> > __ptr_;
} unique_ptr<LS::Tracking::Face::TrackerWrapper, std::__1::default_delete<LS::Tracking::Face::TrackerWrapper> >;

typedef struct plain_array<float, 9, 0, 0> {
	float array[9];
} plain_array<float, 9, 0, 0>;

typedef struct DenseStorage<float, 9, 3, 3, 0> {
	plain_array<float, 9, 0, 0> m_data;
} DenseStorage<float, 9, 3, 3, 0>;

typedef struct Matrix<float, 3, 3, 0, 3, 3> {
	DenseStorage<float, 9, 3, 3, 0> m_storage;
} Matrix<float, 3, 3, 0, 3, 3>;

typedef struct CamIntMat {
	Matrix<float, 3, 3, 0, 3, 3> mMat;
	Matrix<float, 3, 3, 0, 3, 3> mInvMat;
} CamIntMat;

typedef struct _compressed_pair<face3DTrack::Face3DModel *, std::__1::default_delete<face3DTrack::Face3DModel> > {
	Face3DModel __first_;
} compressed_pair<face3DTrack::Face3DModel *, std::__1::default_delete<face3DTrack::Face3DModel> >;

typedef struct unique_ptr<face3DTrack::Face3DModel, std::__1::default_delete<face3DTrack::Face3DModel> > {
	compressed_pair<face3DTrack::Face3DModel *, std::__1::default_delete<face3DTrack::Face3DModel> > __ptr_;
} unique_ptr<face3DTrack::Face3DModel, std::__1::default_delete<face3DTrack::Face3DModel> >;

typedef struct _compressed_pair<face3DTrack::Face3DFit *, std::__1::default_delete<face3DTrack::Face3DFit> > {
	Face3DFit __first_;
} compressed_pair<face3DTrack::Face3DFit *, std::__1::default_delete<face3DTrack::Face3DFit> >;

typedef struct unique_ptr<face3DTrack::Face3DFit, std::__1::default_delete<face3DTrack::Face3DFit> > {
	compressed_pair<face3DTrack::Face3DFit *, std::__1::default_delete<face3DTrack::Face3DFit> > __ptr_;
} unique_ptr<face3DTrack::Face3DFit, std::__1::default_delete<face3DTrack::Face3DFit> >;

typedef struct _compressed_pair<face3DTrack::FaceMorph *, std::__1::default_delete<face3DTrack::FaceMorph> > {
	FaceMorph __first_;
} compressed_pair<face3DTrack::FaceMorph *, std::__1::default_delete<face3DTrack::FaceMorph> >;

typedef struct unique_ptr<face3DTrack::FaceMorph, std::__1::default_delete<face3DTrack::FaceMorph> > {
	compressed_pair<face3DTrack::FaceMorph *, std::__1::default_delete<face3DTrack::FaceMorph> > __ptr_;
} unique_ptr<face3DTrack::FaceMorph, std::__1::default_delete<face3DTrack::FaceMorph> >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCGallerySavingLoggerListener>, std::__1::allocator<__weak id<SCGallerySavingLoggerListener> > > > {
	vector<__weak id<SCGallerySavingLoggerListener>, std::__1::allocator<__weak id<SCGallerySavingLoggerListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCGallerySavingLoggerListener>, std::__1::allocator<__weak id<SCGallerySavingLoggerListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCGalleryFaceManagerListener>, std::__1::allocator<__weak id<SCGalleryFaceManagerListener> > > > {
	vector<__weak id<SCGalleryFaceManagerListener>, std::__1::allocator<__weak id<SCGalleryFaceManagerListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCGalleryFaceManagerListener>, std::__1::allocator<__weak id<SCGalleryFaceManagerListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCGalleryPhotoLibraryFetcherListener>, std::__1::allocator<__weak id<SCGalleryPhotoLibraryFetcherListener> > > > {
	vector<__weak id<SCGalleryPhotoLibraryFetcherListener>, std::__1::allocator<__weak id<SCGalleryPhotoLibraryFetcherListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCGalleryPhotoLibraryFetcherListener>, std::__1::allocator<__weak id<SCGalleryPhotoLibraryFetcherListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCGalleryPrivateGalleryManagerListener>, std::__1::allocator<__weak id<SCGalleryPrivateGalleryManagerListener> > > > {
	vector<__weak id<SCGalleryPrivateGalleryManagerListener>, std::__1::allocator<__weak id<SCGalleryPrivateGalleryManagerListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCGalleryPrivateGalleryManagerListener>, std::__1::allocator<__weak id<SCGalleryPrivateGalleryManagerListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCKeyServiceListener>, std::__1::allocator<__weak id<SCKeyServiceListener> > > > {
	vector<__weak id<SCKeyServiceListener>, std::__1::allocator<__weak id<SCKeyServiceListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCKeyServiceListener>, std::__1::allocator<__weak id<SCKeyServiceListener> > > >;

typedef struct shared_ptr<face::Analyzer> {
	Analyzer __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<face::Analyzer>;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::hash<int> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::hash<int> >;

typedef struct _compressed_pair<float, std::__1::equal_to<int> > {
	float __first_;
} compressed_pair<float, std::__1::equal_to<int> >;

typedef struct _hash_node_base<std::__1::__hash_node<int, void *> *> {
	__hash_node_base<std::__1::__hash_node<int, void *> *> __next_;
} hash_node_base<std::__1::__hash_node<int, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *>, std::__1::allocator<std::__1::__hash_node<int, void *> > > {
	hash_node_base<std::__1::__hash_node<int, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *>, std::__1::allocator<std::__1::__hash_node<int, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *> *> > > {
	__hash_node_base<std::__1::__hash_node<int, void *> *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *> *> > __second_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *> *> > > {
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *> *> > >;

typedef struct _hash_table<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> > {
	unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *>, std::__1::allocator<std::__1::__hash_node<int, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::hash<int> > __p2_;
	compressed_pair<float, std::__1::equal_to<int> > __p3_;
} hash_table<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> >;

typedef struct unordered_set<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> > {
	hash_table<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> > __table_;
} unordered_set<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCGalleryFaceInfoIndexerStatusListener>, std::__1::allocator<__weak id<SCGalleryFaceInfoIndexerStatusListener> > > > {
	vector<__weak id<SCGalleryFaceInfoIndexerStatusListener>, std::__1::allocator<__weak id<SCGalleryFaceInfoIndexerStatusListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCGalleryFaceInfoIndexerStatusListener>, std::__1::allocator<__weak id<SCGalleryFaceInfoIndexerStatusListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCGallerySearchIndexerStatusListener>, std::__1::allocator<__weak id<SCGallerySearchIndexerStatusListener> > > > {
	vector<__weak id<SCGallerySearchIndexerStatusListener>, std::__1::allocator<__weak id<SCGallerySearchIndexerStatusListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCGallerySearchIndexerStatusListener>, std::__1::allocator<__weak id<SCGallerySearchIndexerStatusListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCGallerySearchQueryResultsCollectorListener>, std::__1::allocator<__weak id<SCGallerySearchQueryResultsCollectorListener> > > > {
	vector<__weak id<SCGallerySearchQueryResultsCollectorListener>, std::__1::allocator<__weak id<SCGallerySearchQueryResultsCollectorListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCGallerySearchQueryResultsCollectorListener>, std::__1::allocator<__weak id<SCGallerySearchQueryResultsCollectorListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCGalleryUserDefaultsManagerListener>, std::__1::allocator<__weak id<SCGalleryUserDefaultsManagerListener> > > > {
	vector<__weak id<SCGalleryUserDefaultsManagerListener>, std::__1::allocator<__weak id<SCGalleryUserDefaultsManagerListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCGalleryUserDefaultsManagerListener>, std::__1::allocator<__weak id<SCGalleryUserDefaultsManagerListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCSnapVideoFilterUpdateListener>, std::__1::allocator<__weak id<SCSnapVideoFilterUpdateListener> > > > {
	vector<__weak id<SCSnapVideoFilterUpdateListener>, std::__1::allocator<__weak id<SCSnapVideoFilterUpdateListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCSnapVideoFilterUpdateListener>, std::__1::allocator<__weak id<SCSnapVideoFilterUpdateListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCOnDemandLensDataStoreListener>, std::__1::allocator<__weak id<SCOnDemandLensDataStoreListener> > > > {
	vector<__weak id<SCOnDemandLensDataStoreListener>, std::__1::allocator<__weak id<SCOnDemandLensDataStoreListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCOnDemandLensDataStoreListener>, std::__1::allocator<__weak id<SCOnDemandLensDataStoreListener> > > >;

typedef struct {
	float field1;
	double field2;
} SCD_Struct_SC564;

typedef struct shared_ptr<std::__1::vector<__weak id<SCLensEffectActivatorListener>, std::__1::allocator<__weak id<SCLensEffectActivatorListener> > > > {
	vector<__weak id<SCLensEffectActivatorListener>, std::__1::allocator<__weak id<SCLensEffectActivatorListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCLensEffectActivatorListener>, std::__1::allocator<__weak id<SCLensEffectActivatorListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCLensFrameRateCounterListener>, std::__1::allocator<__weak id<SCLensFrameRateCounterListener> > > > {
	vector<__weak id<SCLensFrameRateCounterListener>, std::__1::allocator<__weak id<SCLensFrameRateCounterListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCLensFrameRateCounterListener>, std::__1::allocator<__weak id<SCLensFrameRateCounterListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCManagedLensProcessorStateListener>, std::__1::allocator<__weak id<SCManagedLensProcessorStateListener> > > > {
	vector<__weak id<SCManagedLensProcessorStateListener>, std::__1::allocator<__weak id<SCManagedLensProcessorStateListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCManagedLensProcessorStateListener>, std::__1::allocator<__weak id<SCManagedLensProcessorStateListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCLocationServicesListener>, std::__1::allocator<__weak id<SCLocationServicesListener> > > > {
	vector<__weak id<SCLocationServicesListener>, std::__1::allocator<__weak id<SCLocationServicesListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCLocationServicesListener>, std::__1::allocator<__weak id<SCLocationServicesListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCSnapLoggerListener>, std::__1::allocator<__weak id<SCSnapLoggerListener> > > > {
	vector<__weak id<SCSnapLoggerListener>, std::__1::allocator<__weak id<SCSnapLoggerListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCSnapLoggerListener>, std::__1::allocator<__weak id<SCSnapLoggerListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCStoryLoggerListener>, std::__1::allocator<__weak id<SCStoryLoggerListener> > > > {
	vector<__weak id<SCStoryLoggerListener>, std::__1::allocator<__weak id<SCStoryLoggerListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCStoryLoggerListener>, std::__1::allocator<__weak id<SCStoryLoggerListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCFriendLocationsListener>, std::__1::allocator<__weak id<SCFriendLocationsListener> > > > {
	vector<__weak id<SCFriendLocationsListener>, std::__1::allocator<__weak id<SCFriendLocationsListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCFriendLocationsListener>, std::__1::allocator<__weak id<SCFriendLocationsListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCMapExploreDataStoreListener>, std::__1::allocator<__weak id<SCMapExploreDataStoreListener> > > > {
	vector<__weak id<SCMapExploreDataStoreListener>, std::__1::allocator<__weak id<SCMapExploreDataStoreListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCMapExploreDataStoreListener>, std::__1::allocator<__weak id<SCMapExploreDataStoreListener> > > >;

typedef struct {
	CLLocationCoordinate2D center;
	CGSize span;
} SCD_Struct_SC573;

typedef struct shared_ptr<std::__1::vector<__weak id<EphemeralMediaDelegate>, std::__1::allocator<__weak id<EphemeralMediaDelegate> > > > {
	vector<__weak id<EphemeralMediaDelegate>, std::__1::allocator<__weak id<EphemeralMediaDelegate> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<EphemeralMediaDelegate>, std::__1::allocator<__weak id<EphemeralMediaDelegate> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<MediaUpdateListener>, std::__1::allocator<__weak id<MediaUpdateListener> > > > {
	vector<__weak id<MediaUpdateListener>, std::__1::allocator<__weak id<MediaUpdateListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<MediaUpdateListener>, std::__1::allocator<__weak id<MediaUpdateListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCPaymentsMethodDidLoadPaymentsMethodListener>, std::__1::allocator<__weak id<SCPaymentsMethodDidLoadPaymentsMethodListener> > > > {
	vector<__weak id<SCPaymentsMethodDidLoadPaymentsMethodListener>, std::__1::allocator<__weak id<SCPaymentsMethodDidLoadPaymentsMethodListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCPaymentsMethodDidLoadPaymentsMethodListener>, std::__1::allocator<__weak id<SCPaymentsMethodDidLoadPaymentsMethodListener> > > >;

typedef struct os_unfair_lock_s {
	unsigned _os_unfair_lock_opaque;
} os_unfair_lock_s;

typedef struct shared_ptr<std::__1::vector<__weak id<SCPreloadListener>, std::__1::allocator<__weak id<SCPreloadListener> > > > {
	vector<__weak id<SCPreloadListener>, std::__1::allocator<__weak id<SCPreloadListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCPreloadListener>, std::__1::allocator<__weak id<SCPreloadListener> > > >;

typedef struct _compressed_pair<SnapCutExt *, std::__1::default_delete<SnapCutExt> > {
	SnapCutExt __first_;
} compressed_pair<SnapCutExt *, std::__1::default_delete<SnapCutExt> >;

typedef struct unique_ptr<SnapCutExt, std::__1::default_delete<SnapCutExt> > {
	compressed_pair<SnapCutExt *, std::__1::default_delete<SnapCutExt> > __ptr_;
} unique_ptr<SnapCutExt, std::__1::default_delete<SnapCutExt> >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCCustomStickerManagerListener>, std::__1::allocator<__weak id<SCCustomStickerManagerListener> > > > {
	vector<__weak id<SCCustomStickerManagerListener>, std::__1::allocator<__weak id<SCCustomStickerManagerListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCCustomStickerManagerListener>, std::__1::allocator<__weak id<SCCustomStickerManagerListener> > > >;

typedef struct {
	CGPoint pts[5];
} SCD_Struct_SC582;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<SCContextFilterDetectedObjectType, std::__1::__value_type<SCContextFilterDetectedObjectType, cv::Mat>, std::__1::less<SCContextFilterDetectedObjectType>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<SCContextFilterDetectedObjectType, std::__1::__value_type<SCContextFilterDetectedObjectType, cv::Mat>, std::__1::less<SCContextFilterDetectedObjectType>, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<SCContextFilterDetectedObjectType, cv::Mat>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<SCContextFilterDetectedObjectType, cv::Mat>, void *> > >;

typedef struct _tree<std::__1::__value_type<SCContextFilterDetectedObjectType, cv::Mat>, std::__1::__map_value_compare<SCContextFilterDetectedObjectType, std::__1::__value_type<SCContextFilterDetectedObjectType, cv::Mat>, std::__1::less<SCContextFilterDetectedObjectType>, true>, std::__1::allocator<std::__1::__value_type<SCContextFilterDetectedObjectType, cv::Mat> > > {
	__tree_end_node<std::__1::__tree_node_base<void *> *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<SCContextFilterDetectedObjectType, cv::Mat>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<SCContextFilterDetectedObjectType, std::__1::__value_type<SCContextFilterDetectedObjectType, cv::Mat>, std::__1::less<SCContextFilterDetectedObjectType>, true> > __pair3_;
} tree<std::__1::__value_type<SCContextFilterDetectedObjectType, cv::Mat>, std::__1::__map_value_compare<SCContextFilterDetectedObjectType, std::__1::__value_type<SCContextFilterDetectedObjectType, cv::Mat>, std::__1::less<SCContextFilterDetectedObjectType>, true>, std::__1::allocator<std::__1::__value_type<SCContextFilterDetectedObjectType, cv::Mat> > >;

typedef struct map<SCContextFilterDetectedObjectType, cv::Mat, std::__1::less<SCContextFilterDetectedObjectType>, std::__1::allocator<std::__1::pair<const SCContextFilterDetectedObjectType, cv::Mat> > > {
	tree<std::__1::__value_type<SCContextFilterDetectedObjectType, cv::Mat>, std::__1::__map_value_compare<SCContextFilterDetectedObjectType, std::__1::__value_type<SCContextFilterDetectedObjectType, cv::Mat>, std::__1::less<SCContextFilterDetectedObjectType>, true>, std::__1::allocator<std::__1::__value_type<SCContextFilterDetectedObjectType, cv::Mat> > > __tree_;
} map<SCContextFilterDetectedObjectType, cv::Mat, std::__1::less<SCContextFilterDetectedObjectType>, std::__1::allocator<std::__1::pair<const SCContextFilterDetectedObjectType, cv::Mat> > >;

typedef struct {
	id field1;
	CGRect field2;
} SCD_Struct_SC587;

typedef struct {
	double field1;
	BOOL field2;
	long long field3;
	long long field4;
	unsigned long long field5;
	unsigned long long field6;
} SCD_Struct_SC588;

typedef struct shared_ptr<std::__1::vector<__weak id<SCSearchAttachmentsClipboardProviderListener>, std::__1::allocator<__weak id<SCSearchAttachmentsClipboardProviderListener> > > > {
	vector<__weak id<SCSearchAttachmentsClipboardProviderListener>, std::__1::allocator<__weak id<SCSearchAttachmentsClipboardProviderListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCSearchAttachmentsClipboardProviderListener>, std::__1::allocator<__weak id<SCSearchAttachmentsClipboardProviderListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCSearchAttachmentsDataProviderListener>, std::__1::allocator<__weak id<SCSearchAttachmentsDataProviderListener> > > > {
	vector<__weak id<SCSearchAttachmentsDataProviderListener>, std::__1::allocator<__weak id<SCSearchAttachmentsDataProviderListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCSearchAttachmentsDataProviderListener>, std::__1::allocator<__weak id<SCSearchAttachmentsDataProviderListener> > > >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<double, std::__1::__value_type<double, SOJUGalleryTransform *>, std::__1::less<double>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<double, std::__1::__value_type<double, SOJUGalleryTransform *>, std::__1::less<double>, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<double, SOJUGalleryTransform *>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<double, SOJUGalleryTransform *>, void *> > >;

typedef struct _tree<std::__1::__value_type<double, SOJUGalleryTransform *>, std::__1::__map_value_compare<double, std::__1::__value_type<double, SOJUGalleryTransform *>, std::__1::less<double>, true>, std::__1::allocator<std::__1::__value_type<double, SOJUGalleryTransform *> > > {
	__tree_end_node<std::__1::__tree_node_base<void *> *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<double, SOJUGalleryTransform *>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<double, std::__1::__value_type<double, SOJUGalleryTransform *>, std::__1::less<double>, true> > __pair3_;
} tree<std::__1::__value_type<double, SOJUGalleryTransform *>, std::__1::__map_value_compare<double, std::__1::__value_type<double, SOJUGalleryTransform *>, std::__1::less<double>, true>, std::__1::allocator<std::__1::__value_type<double, SOJUGalleryTransform *> > >;

typedef struct map<double, SOJUGalleryTransform *, std::__1::less<double>, std::__1::allocator<std::__1::pair<const double, SOJUGalleryTransform *> > > {
	tree<std::__1::__value_type<double, SOJUGalleryTransform *>, std::__1::__map_value_compare<double, std::__1::__value_type<double, SOJUGalleryTransform *>, std::__1::less<double>, true>, std::__1::allocator<std::__1::__value_type<double, SOJUGalleryTransform *> > > __tree_;
} map<double, SOJUGalleryTransform *, std::__1::less<double>, std::__1::allocator<std::__1::pair<const double, SOJUGalleryTransform *> > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCFriendProfileManagerListener>, std::__1::allocator<__weak id<SCFriendProfileManagerListener> > > > {
	vector<__weak id<SCFriendProfileManagerListener>, std::__1::allocator<__weak id<SCFriendProfileManagerListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCFriendProfileManagerListener>, std::__1::allocator<__weak id<SCFriendProfileManagerListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCGroupProfileManagerListener>, std::__1::allocator<__weak id<SCGroupProfileManagerListener> > > > {
	vector<__weak id<SCGroupProfileManagerListener>, std::__1::allocator<__weak id<SCGroupProfileManagerListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCGroupProfileManagerListener>, std::__1::allocator<__weak id<SCGroupProfileManagerListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCSearchFriendsDataProviderListener>, std::__1::allocator<__weak id<SCSearchFriendsDataProviderListener> > > > {
	vector<__weak id<SCSearchFriendsDataProviderListener>, std::__1::allocator<__weak id<SCSearchFriendsDataProviderListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCSearchFriendsDataProviderListener>, std::__1::allocator<__weak id<SCSearchFriendsDataProviderListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCChatStickerManagerListener>, std::__1::allocator<__weak id<SCChatStickerManagerListener> > > > {
	vector<__weak id<SCChatStickerManagerListener>, std::__1::allocator<__weak id<SCChatStickerManagerListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCChatStickerManagerListener>, std::__1::allocator<__weak id<SCChatStickerManagerListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCChatStickerFuzzySearchListener>, std::__1::allocator<__weak id<SCChatStickerFuzzySearchListener> > > > {
	vector<__weak id<SCChatStickerFuzzySearchListener>, std::__1::allocator<__weak id<SCChatStickerFuzzySearchListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCChatStickerFuzzySearchListener>, std::__1::allocator<__weak id<SCChatStickerFuzzySearchListener> > > >;

typedef struct _compressed_pair<tensorflow::Session *, std::__1::default_delete<tensorflow::Session> > {
	Session __first_;
} compressed_pair<tensorflow::Session *, std::__1::default_delete<tensorflow::Session> >;

typedef struct unique_ptr<tensorflow::Session, std::__1::default_delete<tensorflow::Session> > {
	compressed_pair<tensorflow::Session *, std::__1::default_delete<tensorflow::Session> > __ptr_;
} unique_ptr<tensorflow::Session, std::__1::default_delete<tensorflow::Session> >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCStoryMediaStateListener>, std::__1::allocator<__weak id<SCStoryMediaStateListener> > > > {
	vector<__weak id<SCStoryMediaStateListener>, std::__1::allocator<__weak id<SCStoryMediaStateListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCStoryMediaStateListener>, std::__1::allocator<__weak id<SCStoryMediaStateListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCStorySaveCompleteListener>, std::__1::allocator<__weak id<SCStorySaveCompleteListener> > > > {
	vector<__weak id<SCStorySaveCompleteListener>, std::__1::allocator<__weak id<SCStorySaveCompleteListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCStorySaveCompleteListener>, std::__1::allocator<__weak id<SCStorySaveCompleteListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCStoriesModelUpdateListener>, std::__1::allocator<__weak id<SCStoriesModelUpdateListener> > > > {
	vector<__weak id<SCStoriesModelUpdateListener>, std::__1::allocator<__weak id<SCStoriesModelUpdateListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCStoriesModelUpdateListener>, std::__1::allocator<__weak id<SCStoriesModelUpdateListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCDynamicSectionsModelListener>, std::__1::allocator<__weak id<SCDynamicSectionsModelListener> > > > {
	vector<__weak id<SCDynamicSectionsModelListener>, std::__1::allocator<__weak id<SCDynamicSectionsModelListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCDynamicSectionsModelListener>, std::__1::allocator<__weak id<SCDynamicSectionsModelListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCTPhoneCallListener>, std::__1::allocator<__weak id<SCTPhoneCallListener> > > > {
	vector<__weak id<SCTPhoneCallListener>, std::__1::allocator<__weak id<SCTPhoneCallListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCTPhoneCallListener>, std::__1::allocator<__weak id<SCTPhoneCallListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCGtqUnlockablesDataSourceListener>, std::__1::allocator<__weak id<SCGtqUnlockablesDataSourceListener> > > > {
	vector<__weak id<SCGtqUnlockablesDataSourceListener>, std::__1::allocator<__weak id<SCGtqUnlockablesDataSourceListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCGtqUnlockablesDataSourceListener>, std::__1::allocator<__weak id<SCGtqUnlockablesDataSourceListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCLocationDataUnlockablesListener>, std::__1::allocator<__weak id<SCLocationDataUnlockablesListener> > > > {
	vector<__weak id<SCLocationDataUnlockablesListener>, std::__1::allocator<__weak id<SCLocationDataUnlockablesListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCLocationDataUnlockablesListener>, std::__1::allocator<__weak id<SCLocationDataUnlockablesListener> > > >;

typedef struct shared_ptr<std::__1::vector<__weak id<SCUnlockablesCommonDataStoreListener>, std::__1::allocator<__weak id<SCUnlockablesCommonDataStoreListener> > > > {
	vector<__weak id<SCUnlockablesCommonDataStoreListener>, std::__1::allocator<__weak id<SCUnlockablesCommonDataStoreListener> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::vector<__weak id<SCUnlockablesCommonDataStoreListener>, std::__1::allocator<__weak id<SCUnlockablesCommonDataStoreListener> > > >;

