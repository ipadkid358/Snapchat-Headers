/*
* This header is generated by classdump-dyld 1.0
* on Saturday, May 19, 2018 at 4:52:38 PM Eastern Daylight Time
* Operating System: Version 10.2 (Build 14C92)
* Image Source: /var/containers/Bundle/Application/7AB1B6B1-534C-4BF9-A7EB-BE2BD4C13043/Snapchat.app/Snapchat
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <Snapchat/Snapchat-Structs.h>
#import <Snapchat/SCCrashedLensIdProvider.h>
#import <Snapchat/LSAEffectComponentListener.h>
#import <Snapchat/SCLensProcessingCore.h>

@protocol SCLensProcessingCore <SCManagedLensProcessor,SCLensEffectActivator,SCManagedCapturerListener>
@end


@class SCCaptureResource, SCLensCrashLogger, SCLensCrashLoggerStore, SCLensEffectActivator, SCManagedLensesProcessor, LSAComponentManager, SCManagedCapturerState, NSString, SCLens;

@interface SCLensProcessingCore : NSObject <SCCrashedLensIdProvider, LSAEffectComponentListener, SCLensProcessingCore> {

	SCCaptureResource* _captureResource;
	SCLensCrashLogger* _crashLogger;
	SCLensCrashLoggerStore* _crashLoggerStore;
	SCLensEffectActivator* _lensEffectActivator;
	SCManagedLensesProcessor* _managedLensProcessor;
	LSAComponentManager* _componentManager;
	long long _componentManagerOnceToken;
	SCManagedCapturerState* _managedCapturerState;

}

@property (retain) SCManagedCapturerState * managedCapturerState;                                                                    //@synthesize managedCapturerState=_managedCapturerState - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (nonatomic,readonly) LSAComponentManager * componentManager; 
@property (nonatomic,readonly) id<SCManagedAudioDataSourceListener><SCManagedVideoDataSourceListener> capturerListener; 
@property (nonatomic,copy,readonly) SCLens * appliedLens; 
@property (nonatomic,readonly) unsigned long long appliedLensFeatures; 
@property (nonatomic,copy,readonly) SCLens * currentApplyingLens; 
@property (nonatomic,copy,readonly) SCLens * previousAppliedLens; 
-(void)effectComponent:(id)arg1 didTurnOnEffectWithId:(id)arg2 features:(unsigned long long)arg3 ;
-(SCLens *)appliedLens;
-(void)managedCapturer:(id)arg1 didChangeState:(id)arg2 ;
-(SCManagedCapturerState *)managedCapturerState;
-(void)setManagedCapturerState:(SCManagedCapturerState *)arg1 ;
-(id)initWithCaptureResource:(id)arg1 ;
-(void)detectLensCategoryOnNextFrame:(CGPoint)arg1 videoOrientation:(long long)arg2 lenses:(id)arg3 completion:(/*^block*/id)arg4 ;
-(void)setLensesActive:(BOOL)arg1 videoOrientation:(long long)arg2 filterFactory:(id)arg3 ;
-(void)setModifySource:(BOOL)arg1 ;
-(void)setShouldMuteAllSounds:(BOOL)arg1 ;
-(id<SCManagedAudioDataSourceListener><SCManagedVideoDataSourceListener>)capturerListener;
-(id)activeLensId;
-(id)processImage:(id)arg1 maxPixelSize:(long long)arg2 devicePosition:(unsigned long long)arg3 fieldOfView:(float)arg4 ;
-(void)setShouldProcessARFrames:(BOOL)arg1 ;
-(void)removeFieldOfViewListener;
-(void)setAsFieldOfViewListenerForARDataSource:(id)arg1 ;
-(void)setAsFieldOfViewListenerForDevice:(id)arg1 ;
-(LSAComponentManager *)componentManager;
-(BOOL)addStateListener:(id)arg1 ;
-(BOOL)addLensEffectActivatorListener:(id)arg1 ;
-(SCLens *)previousAppliedLens;
-(void)resetCurrentApplyingLens;
-(BOOL)isLensBeingApplied:(id)arg1 ;
-(BOOL)shouldActivateLens:(id)arg1 ;
-(SCLens *)currentApplyingLens;
-(void)activateLens:(id)arg1 configuration:(id)arg2 completion:(/*^block*/id)arg3 ;
-(unsigned long long)appliedLensFeatures;
-(BOOL)addFrameRateListener:(id)arg1 ;
-(void)removeStateListener:(id)arg1 ;
-(void)removeFrameRateListener:(id)arg1 ;
-(id)lensEffectActivator;
-(void)removeLensEffectActivatorListener:(id)arg1 ;
-(void)_configureCrashLogger;
-(void)_configureLensProcessor;
-(void)_configureLensEffectActivator;
-(void)_configureCrashLoggerStore;
-(id)managedLensesProcessor;
-(id)lensIdForCrashLogger;
-(void)setAspectRatio:(SCAspectRatio)arg1 ;
-(void)setFieldOfView:(float)arg1 ;
@end

