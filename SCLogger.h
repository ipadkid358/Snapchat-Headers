/*
* This header is generated by classdump-dyld 1.0
* on Saturday, May 19, 2018 at 4:51:49 PM Eastern Daylight Time
* Operating System: Version 10.2 (Build 14C92)
* Image Source: /var/containers/Bundle/Application/7AB1B6B1-534C-4BF9-A7EB-BE2BD4C13043/Snapchat.app/Snapchat
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@protocol SCLoggerAmplitudeProtocol, SCPerforming;
#import <Snapchat/Snapchat-Structs.h>
@class SCCounters, SCEventUploader, NSMutableSet, NSMutableDictionary, SCStartupContext, NSArray, NSMutableArray, NSNumber;

@interface SCLogger : NSObject {

	SCCounters* _counters;
	SCEventUploader* _eventUploader;
	NSMutableSet* _uniqueEvents;
	NSMutableDictionary* _timers;
	NSMutableDictionary* _timedEvents;
	SCStartupContext* _startupContext;
	/*^block*/id _userProvider;
	/*^block*/id _sendEventsBlock;
	/*^block*/id _didLogBlizzardEventCallback;
	/*^block*/id _didLogOpsDataPipelineEventCallback;
	/*^block*/id _didEndPerfEventCallback;
	/*^block*/id _didCancelTimerEventsCallback;
	id<SCLoggerAmplitudeProtocol> _blizzardLogger;
	/*^block*/id _reachabilityProvider;
	/*^block*/id _isLowPowerModeEnabledCallback;
	/*^block*/id _isTravelModeEnabledCallback;
	/*^block*/id _isProtectedDataAvailable;
	/*^block*/id _mainThreadDelaysProvider;
	/*^block*/id _currentHostProvider;
	/*^block*/id _frameRatesProvider;
	NSArray* _performanceEvents;
	NSMutableArray* _savedEvents;
	id<SCPerforming> _performer;

}

@property (nonatomic,retain) NSNumber * cameraCreationDelayLoggingStatus; 
@property (nonatomic,retain) SCEventUploader * eventUploader;                           //@synthesize eventUploader=_eventUploader - In the implementation block
@property (nonatomic,retain) NSMutableSet * uniqueEvents;                               //@synthesize uniqueEvents=_uniqueEvents - In the implementation block
@property (nonatomic,retain) NSMutableDictionary * timers;                              //@synthesize timers=_timers - In the implementation block
@property (nonatomic,retain) NSMutableDictionary * timedEvents;                         //@synthesize timedEvents=_timedEvents - In the implementation block
@property (nonatomic,retain) SCStartupContext * startupContext;                         //@synthesize startupContext=_startupContext - In the implementation block
@property (nonatomic,copy) id userProvider;                                             //@synthesize userProvider=_userProvider - In the implementation block
@property (nonatomic,copy) id sendEventsBlock;                                          //@synthesize sendEventsBlock=_sendEventsBlock - In the implementation block
@property (nonatomic,copy) id didLogBlizzardEventCallback;                              //@synthesize didLogBlizzardEventCallback=_didLogBlizzardEventCallback - In the implementation block
@property (nonatomic,copy) id didLogOpsDataPipelineEventCallback;                       //@synthesize didLogOpsDataPipelineEventCallback=_didLogOpsDataPipelineEventCallback - In the implementation block
@property (nonatomic,copy) id didEndPerfEventCallback;                                  //@synthesize didEndPerfEventCallback=_didEndPerfEventCallback - In the implementation block
@property (nonatomic,copy) id didCancelTimerEventsCallback;                             //@synthesize didCancelTimerEventsCallback=_didCancelTimerEventsCallback - In the implementation block
@property (nonatomic,retain) id<SCLoggerAmplitudeProtocol> blizzardLogger;              //@synthesize blizzardLogger=_blizzardLogger - In the implementation block
@property (nonatomic,copy) id reachabilityProvider;                                     //@synthesize reachabilityProvider=_reachabilityProvider - In the implementation block
@property (nonatomic,copy) id isLowPowerModeEnabledCallback;                            //@synthesize isLowPowerModeEnabledCallback=_isLowPowerModeEnabledCallback - In the implementation block
@property (nonatomic,copy) id isTravelModeEnabledCallback;                              //@synthesize isTravelModeEnabledCallback=_isTravelModeEnabledCallback - In the implementation block
@property (nonatomic,copy) id isProtectedDataAvailable;                                 //@synthesize isProtectedDataAvailable=_isProtectedDataAvailable - In the implementation block
@property (nonatomic,copy) id mainThreadDelaysProvider;                                 //@synthesize mainThreadDelaysProvider=_mainThreadDelaysProvider - In the implementation block
@property (nonatomic,copy) id currentHostProvider;                                      //@synthesize currentHostProvider=_currentHostProvider - In the implementation block
@property (nonatomic,copy) id frameRatesProvider;                                       //@synthesize frameRatesProvider=_frameRatesProvider - In the implementation block
@property (nonatomic,retain) NSArray * performanceEvents;                               //@synthesize performanceEvents=_performanceEvents - In the implementation block
@property (nonatomic,retain) NSMutableArray * savedEvents;                              //@synthesize savedEvents=_savedEvents - In the implementation block
@property (nonatomic,retain) id<SCPerforming> performer;                                //@synthesize performer=_performer - In the implementation block
@property (nonatomic,readonly) SCCounters * counters;                                   //@synthesize counters=_counters - In the implementation block
+(BOOL)shouldReportForPercentage:(double)arg1 ;
+(id)perfMetrics;
+(unsigned long long)currentThreadCount;
+(double)memoryUsedBytes;
+(id)_getTotalAndSubfolderSizesMBInDirectory:(id)arg1 cancelationToken:(id)arg2 ;
+(double)memoryFreeMB;
+(double)memoryVirtualMB;
+(double)memoryUsedMB;
+(double)memoryTotalUsedMB;
+(double)memoryWireUsedMB;
+(double)memoryActiveUsedMB;
+(double)memoryInactiveUsedMB;
+(unsigned long long)diskspaceUsedMB;
+(unsigned long long)diskspaceFreeMB;
+(id)diskUsageParams_DEPRECATED:(id)arg1 ;
+(id)networkTrafficDataStatistic;
+(id)perfMetricsAsString;
+(BOOL)shouldUnsample;
+(BOOL)shouldReport;
+(id)sharedInstance;
+(double)cpuUsage;
-(id<SCPerforming>)performer;
-(void)logEvent:(id)arg1 parameters:(id)arg2 ;
-(void)logEventToEventLogger:(id)arg1 parameters:(id)arg2 secretParameters:(id)arg3 ;
-(void)getAndClearEventsWithBlock:(/*^block*/id)arg1 ;
-(id)sendEventsBlock;
-(void)setSendEventsBlock:(id)arg1 ;
-(void)logTimedEvent:(id)arg1 interval:(double)arg2 parameters:(id)arg3 samplePercentage:(double)arg4 ;
-(void)logTimedEventStart:(id)arg1 uniqueId:(id)arg2 isUniqueEvent:(BOOL)arg3 parameters:(id)arg4 ;
-(void)logTimedEventStart:(id)arg1 uniqueId:(id)arg2 isUniqueEvent:(BOOL)arg3 parameters:(id)arg4 shouldLogStartTime:(BOOL)arg5 ;
-(void)logTimedEventStart:(id)arg1 uniqueId:(id)arg2 isUniqueEvent:(BOOL)arg3 parameters:(id)arg4 shouldLogStartTime:(BOOL)arg5 sampled:(BOOL)arg6 ;
-(void)_setStartParameters:(id)arg1 parameters:(id)arg2 ;
-(void)logStepEndForEvent:(id)arg1 uniqueId:(id)arg2 stepName:(id)arg3 sampled:(BOOL)arg4 ;
-(void)logTimedEventEnd:(id)arg1 uniqueId:(id)arg2 parameters:(id)arg3 shouldLog:(/*^block*/id)arg4 samplePercentage:(double)arg5 endTime:(id)arg6 ;
-(void)logTimedEventEnd:(id)arg1 uniqueId:(id)arg2 parameters:(id)arg3 endTime:(id)arg4 ;
-(void)logTimedEventEnd:(id)arg1 uniqueId:(id)arg2 parameters:(id)arg3 samplePercentage:(double)arg4 endTime:(id)arg5 ;
-(void)logTimedEventEnd:(id)arg1 uniqueId:(id)arg2 update:(/*^block*/id)arg3 shouldLog:(/*^block*/id)arg4 samplePercentage:(double)arg5 endTime:(id)arg6 ;
-(id)eventsWithDelaysAttached;
-(void)logEventWithAttachedDelays:(id)arg1 ;
-(void)updateLogTimedEventStart:(id)arg1 uniqueId:(id)arg2 parameters:(id)arg3 ;
-(void)updateLogTimedEvent:(id)arg1 uniqueId:(id)arg2 update:(/*^block*/id)arg3 ;
-(void)updateLogTimedEvent:(id)arg1 uniqueId:(id)arg2 splitPoint:(id)arg3 time:(double)arg4 ;
-(void)addSplitPoint:(id)arg1 atTime:(double)arg2 toEvent:(id)arg3 ;
-(id)onCancelEventDependencies;
-(void)cancelLogTimedEvent:(id)arg1 uniqueId:(id)arg2 ;
-(void)cancelLogTimedEventsWithName:(id)arg1 ;
-(void)cancelLogTimedEvents:(id)arg1 ;
-(void)cancelPerfEventsForStartupToAllViews;
-(void)updateLogTimedEvent:(id)arg1 uniqueId:(id)arg2 parameters:(id)arg3 ;
-(void)cancelPerfEventsForStartupToFeedStoryView;
-(void)logCancellationPerfEventsForStartupToCameraView;
-(void)logNetworkStepToEvent:(id)arg1 uniqueId:(id)arg2 stepName:(id)arg3 ;
-(void)logTimedEvent:(id)arg1 interval:(double)arg2 ;
-(void)logTimedEvent:(id)arg1 interval:(double)arg2 parameters:(id)arg3 ;
-(void)logCounterEvent:(id)arg1 count:(unsigned long long)arg2 parameters:(id)arg3 ;
-(void)logCounterEvent:(id)arg1 count:(unsigned long long)arg2 parameters:(id)arg3 samplePercentage:(double)arg4 ;
-(void)logUnsampledTimedEventStart:(id)arg1 uniqueId:(id)arg2 isUniqueEvent:(BOOL)arg3 parameters:(id)arg4 ;
-(void)useT0ForEvent:(id)arg1 uniqueId:(id)arg2 ;
-(void)disableResetForEvent:(id)arg1 uniqueId:(id)arg2 ;
-(void)logStepToEvent:(id)arg1 uniqueId:(id)arg2 stepName:(id)arg3 ;
-(void)conditionallyLogTimedEventEnd:(id)arg1 uniqueId:(id)arg2 parameters:(id)arg3 shouldLog:(/*^block*/id)arg4 ;
-(void)logTimedEventEnd:(id)arg1 uniqueId:(id)arg2 parameters:(id)arg3 samplePercentage:(double)arg4 ;
-(void)logTimedEventEnd:(id)arg1 uniqueId:(id)arg2 update:(/*^block*/id)arg3 ;
-(void)updateLogTimedEventStart:(id)arg1 uniqueId:(id)arg2 ;
-(void)updateLogTimedEvent:(id)arg1 uniqueId:(id)arg2 splitPoint:(id)arg3 ;
-(void)cancelAllLogTimedEvents;
-(void)removeUniqueEvents;
-(void)startPerfEventsWhenAppStartupFromKilledState;
-(void)startPerfEventsWhenAppStartupFromKilledStateEarlyWithTimeLapse:(double)arg1 preOpenLatency:(double)arg2 ;
-(void)startPerfEventsWhenAppStartupFromKilledStateWithNotification;
-(void)startPerfEventsWhenAppStartupFromBackgroundWithProtectedDataUnavailable;
-(void)startPerfEventsWhenAppStartupFromBackgroundWithTimeLapse:(double)arg1 ;
-(void)startPerfEventsWhenAppStartupFromBackgroundWithNotification;
-(void)cancelPerfEventsWhenFeedViewFullyDisappear;
-(void)cancelPerfEventsWhenMyFriendsViewFullyDisappear;
-(void)cancelPerfEventsWhenPreviewViewAppear;
-(void)cancelPerfEventsWhenVisibleVCIsNotMainVC;
-(void)cancelPerfEventsWhenChatViewAppear;
-(void)cancelPerfEventsWhenDiscoverEditionViewAppear;
-(void)cancelPerfEventsWhenOpenAppFromDeepLink;
-(void)cancelPerfEventsWhenOpenAppFromQuickAction;
-(void)cancelPerfEventsWhenLoggedOut;
-(void)updateContentReadyAndFirstItemReadyEventswithParameters:(id)arg1 ;
-(void)updateContentReadyAndFirstItemReadyEventswithNetworkStepName:(id)arg1 ;
-(void)endOrCancelTimedEvent:(id)arg1 uniqueId:(id)arg2 parameters:(id)arg3 shouldEnd:(BOOL)arg4 ;
-(void)setSavedEvents:(NSMutableArray *)arg1 ;
-(void)setUniqueEvents:(NSMutableSet *)arg1 ;
-(void)setTimedEvents:(NSMutableDictionary *)arg1 ;
-(void)setPerformanceEvents:(NSArray *)arg1 ;
-(void)setUserProvider:(id)arg1 ;
-(void)setDidLogOpsDataPipelineEventCallback:(id)arg1 ;
-(void)setDidEndPerfEventCallback:(id)arg1 ;
-(void)setDidCancelTimerEventsCallback:(id)arg1 ;
-(void)setBlizzardLogger:(id<SCLoggerAmplitudeProtocol>)arg1 ;
-(void)setReachabilityProvider:(id)arg1 ;
-(void)setIsLowPowerModeEnabledCallback:(id)arg1 ;
-(void)setIsTravelModeEnabledCallback:(id)arg1 ;
-(void)setIsProtectedDataAvailable:(id)arg1 ;
-(void)setMainThreadDelaysProvider:(id)arg1 ;
-(void)setCurrentHostProvider:(id)arg1 ;
-(void)setFrameRatesProvider:(id)arg1 ;
-(id<SCLoggerAmplitudeProtocol>)blizzardLogger;
-(NSMutableArray *)savedEvents;
-(void)logEvent:(id)arg1 parameters:(id)arg2 secretParameters:(id)arg3 ;
-(void)logEvent:(id)arg1 parameters:(id)arg2 secretParameters:(id)arg3 metrics:(id)arg4 ;
-(void)logEvent:(id)arg1 parameters:(id)arg2 secretParameters:(id)arg3 metrics:(id)arg4 samplePercentage:(double)arg5 ;
-(void)synchronouslyLogEvent:(id)arg1 parameters:(id)arg2 secretParameters:(id)arg3 metrics:(id)arg4 samplePercentage:(double)arg5 ;
-(void)logEventToEventLogger:(id)arg1 parameters:(id)arg2 secretParameters:(id)arg3 metrics:(id)arg4 samplePercentage:(double)arg5 ;
-(void)logEventToEventLogger:(id)arg1 parameters:(id)arg2 secretParameters:(id)arg3 metrics:(id)arg4 ;
-(void)syncLogEventToEventLogger:(id)arg1 parameters:(id)arg2 secretParameters:(id)arg3 metrics:(id)arg4 samplePercentage:(double)arg5 ;
-(void)logUserTrackedEvent:(id)arg1 ;
-(void)logUserNotTrackedEvent:(id)arg1 ;
-(BOOL)markStartSessionForType:(id)arg1 withStartTime:(double)arg2 ;
-(id)markEndSessionForType:(id)arg1 ;
-(id)histogramBucketForTimeLapsed:(double)arg1 bucketSize:(double)arg2 numberBuckets:(int)arg3 ;
-(id)didEndPerfEventCallback;
-(id)didLogOpsDataPipelineEventCallback;
-(void)startServicesWithBlizzardLogger:(id)arg1 userProvider:(/*^block*/id)arg2 sendEventsBlock:(/*^block*/id)arg3 didLogOpsDataPipelineEventCallback:(/*^block*/id)arg4 didEndPerfEventCallback:(/*^block*/id)arg5 didCancelTimerEventsCallback:(/*^block*/id)arg6 reachabilityProvider:(/*^block*/id)arg7 isLowPowerModeEnabledCallBack:(/*^block*/id)arg8 isTravelModeEnabledCallBack:(/*^block*/id)arg9 isProtectedDataAvailable:(/*^block*/id)arg10 mainThreadDelaysProvider:(/*^block*/id)arg11 currentHostProvider:(/*^block*/id)arg12 frameRateProvider:(/*^block*/id)arg13 ;
-(void)attemptResumeBlizzardSession:(long long)arg1 ;
-(void)logSavedEvents;
-(void)forceUploadEvents;
-(void)logUnsampledEvent:(id)arg1 parameters:(id)arg2 secretParameters:(id)arg3 metrics:(id)arg4 ;
-(void)logUnsampledEventToEventLogger:(id)arg1 parameters:(id)arg2 secretParameters:(id)arg3 metrics:(id)arg4 ;
-(void)logJSONSerializationError:(id)arg1 endpoint:(id)arg2 parameters:(id)arg3 ;
-(void)updateBlizzardValidationServerUrl:(id)arg1 ;
-(void)logStartSessionForType:(id)arg1 ;
-(void)logEndSessionForType:(id)arg1 ;
-(void)setEventUploaderBatchSizeLimit:(unsigned long long)arg1 ;
-(SCCounters *)counters;
-(SCEventUploader *)eventUploader;
-(void)setEventUploader:(SCEventUploader *)arg1 ;
-(NSMutableSet *)uniqueEvents;
-(NSMutableDictionary *)timedEvents;
-(SCStartupContext *)startupContext;
-(void)setStartupContext:(SCStartupContext *)arg1 ;
-(id)userProvider;
-(id)didLogBlizzardEventCallback;
-(void)setDidLogBlizzardEventCallback:(id)arg1 ;
-(id)didCancelTimerEventsCallback;
-(id)reachabilityProvider;
-(id)isLowPowerModeEnabledCallback;
-(id)isTravelModeEnabledCallback;
-(id)mainThreadDelaysProvider;
-(id)currentHostProvider;
-(id)frameRatesProvider;
-(NSArray *)performanceEvents;
-(void)setPerformer:(id<SCPerforming>)arg1 ;
-(double)appStartupCompleteTime;
-(void)setAppStartupCompleteTime:(double)arg1 ;
-(void)logTimedEventStart:(id)arg1 uniqueId:(id)arg2 isUniqueEvent:(BOOL)arg3 ;
-(void)logTimedEventEnd:(id)arg1 uniqueId:(id)arg2 parameters:(id)arg3 ;
-(void)logManagedCapturerSettingFailure:(id)arg1 error:(id)arg2 ;
-(void)logCameraExposureAdjustmentDelayStart;
-(void)logCameraExposureAdjustmentDelayEndWithStrategy:(id)arg1 ;
-(void)logStillImageCaptureApi:(id)arg1 ;
-(void)logPreCaptureOperationFinishedAt:(double)arg1 ;
-(void)logPreCaptureOperationRequestedAt:(double)arg1 ;
-(void)logCameraCaptureContentReady;
-(void)logCameraCreationStartWithMethod:(unsigned long long)arg1 lensesEnabled:(BOOL)arg2 activeLensId:(id)arg3 captureSessionId:(id)arg4 ;
-(void)logRecordingMayBeTooShortWithMethod:(unsigned long long)arg1 ;
-(void)cancelCameraCreationEvent;
-(void)logCameraCaptureRecordingGestureFinishedAtTime:(double)arg1 ;
-(void)logRecordingWasTooShortWithFirstFrame:(SCD_Struct_LS191)arg1 frontFacingCamera:(BOOL)arg2 cameraFlips:(long long)arg3 ;
-(void)logCameraCaptureFinishedWithDuration:(double)arg1 ;
-(NSNumber *)cameraCreationDelayLoggingStatus;
-(void)setCameraCreationDelayLoggingStatus:(NSNumber *)arg1 ;
-(void)logCameraCreationDelaySubMetricsStartWithSignCode:(unsigned)arg1 ;
-(void)logCameraCreationDelaySubMetricsEndWithSignCode:(unsigned)arg1 ;
-(void)logCameraCreationDelayEnd;
-(BOOL)shouldLogCameraCreationDelay;
-(void)logPreviewFinishedPreparation;
-(void)logPreviewDisplayedForImage:(BOOL)arg1 ;
-(void)logPreviewAnimationComplete:(BOOL)arg1 ;
-(void)logPreviewFirstFramePlayed:(BOOL)arg1 ;
-(void)logLocationMessageSeenWithMessageType:(id)arg1 canShareBack:(BOOL)arg2 wasAlreadySharing:(BOOL)arg3 messageId:(id)arg4 ;
-(void)logLocationMessageResponseWithMessageType:(id)arg1 didShareBack:(BOOL)arg2 ;
-(void)logViewedLocationSharingButtonWithType:(id)arg1 source:(long long)arg2 isGroup:(BOOL)arg3 ;
-(void)logLocationShareDialogWithSource:(long long)arg1 dialogType:(id)arg2 isGroup:(BOOL)arg3 resultingSharingAudience:(id)arg4 didCompleteFlow:(BOOL)arg5 ;
-(id)init;
-(id)isProtectedDataAvailable;
-(NSMutableDictionary *)timers;
-(void)setTimers:(NSMutableDictionary *)arg1 ;
-(void)logEvent:(id)arg1 ;
@end

